
lab1_elec_36.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059ac  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005b84  08005b84  00015b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bc4  08005bc4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005bc4  08005bc4  00015bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bcc  08005bcc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bcc  08005bcc  00015bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bd0  08005bd0  00015bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  20000010  08005be4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08005be4  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001713c  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a1b  00000000  00000000  000371bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001468  00000000  00000000  00039be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff3  00000000  00000000  0003b048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a3a  00000000  00000000  0003c03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016d4c  00000000  00000000  00063a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e9d4  00000000  00000000  0007a7c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058c0  00000000  00000000  00189198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0018ea58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005b6c 	.word	0x08005b6c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08005b6c 	.word	0x08005b6c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000518:	b08e      	sub	sp, #56	; 0x38
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fd2b 	bl	8000f76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f8d6 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 faca 	bl	8000abc <MX_GPIO_Init>
  MX_DMA_Init();
 8000528:	f000 fa9e 	bl	8000a68 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800052c:	f000 f9b6 	bl	800089c <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8000530:	f000 f9fe 	bl	8000930 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000534:	f000 f918 	bl	8000768 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000538:	f000 fa48 	bl	80009cc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800053c:	4859      	ldr	r0, [pc, #356]	; (80006a4 <main+0x190>)
 800053e:	f003 ff49 	bl	80043d4 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 300);
 8000542:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000546:	4958      	ldr	r1, [pc, #352]	; (80006a8 <main+0x194>)
 8000548:	4858      	ldr	r0, [pc, #352]	; (80006ac <main+0x198>)
 800054a:	f001 f981 	bl	8001850 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 800054e:	4858      	ldr	r0, [pc, #352]	; (80006b0 <main+0x19c>)
 8000550:	f003 fed0 	bl	80042f4 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mn = __HAL_TIM_GET_COUNTER(&htim2);
 8000554:	4b53      	ldr	r3, [pc, #332]	; (80006a4 <main+0x190>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800055a:	4b56      	ldr	r3, [pc, #344]	; (80006b4 <main+0x1a0>)
 800055c:	601a      	str	r2, [r3, #0]
	  hpmn = ((count-1)*4294967295)+mn;
 800055e:	4b56      	ldr	r3, [pc, #344]	; (80006b8 <main+0x1a4>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	3b01      	subs	r3, #1
 8000564:	2200      	movs	r2, #0
 8000566:	4698      	mov	r8, r3
 8000568:	4691      	mov	r9, r2
 800056a:	4642      	mov	r2, r8
 800056c:	464b      	mov	r3, r9
 800056e:	f04f 0000 	mov.w	r0, #0
 8000572:	f04f 0100 	mov.w	r1, #0
 8000576:	07d9      	lsls	r1, r3, #31
 8000578:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 800057c:	07d0      	lsls	r0, r2, #31
 800057e:	4602      	mov	r2, r0
 8000580:	460b      	mov	r3, r1
 8000582:	ebb2 0408 	subs.w	r4, r2, r8
 8000586:	eb63 0509 	sbc.w	r5, r3, r9
 800058a:	1923      	adds	r3, r4, r4
 800058c:	603b      	str	r3, [r7, #0]
 800058e:	eb45 0305 	adc.w	r3, r5, r5
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000598:	eb14 0a08 	adds.w	sl, r4, r8
 800059c:	eb45 0b09 	adc.w	fp, r5, r9
 80005a0:	4b44      	ldr	r3, [pc, #272]	; (80006b4 <main+0x1a0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2200      	movs	r2, #0
 80005a6:	623b      	str	r3, [r7, #32]
 80005a8:	627a      	str	r2, [r7, #36]	; 0x24
 80005aa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80005ae:	460b      	mov	r3, r1
 80005b0:	eb1a 0303 	adds.w	r3, sl, r3
 80005b4:	61bb      	str	r3, [r7, #24]
 80005b6:	4613      	mov	r3, r2
 80005b8:	eb4b 0303 	adc.w	r3, fp, r3
 80005bc:	61fb      	str	r3, [r7, #28]
 80005be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80005c2:	4b3e      	ldr	r3, [pc, #248]	; (80006bc <main+0x1a8>)
 80005c4:	e9c3 0100 	strd	r0, r1, [r3]

	  HAL_Delay(300);
 80005c8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005cc:	f000 fd44 	bl	8001058 <HAL_Delay>
	  channelSums[0] = 0;
 80005d0:	493b      	ldr	r1, [pc, #236]	; (80006c0 <main+0x1ac>)
 80005d2:	f04f 0200 	mov.w	r2, #0
 80005d6:	f04f 0300 	mov.w	r3, #0
 80005da:	e9c1 2300 	strd	r2, r3, [r1]
	  channelSums[1] = 0;
 80005de:	4938      	ldr	r1, [pc, #224]	; (80006c0 <main+0x1ac>)
 80005e0:	f04f 0200 	mov.w	r2, #0
 80005e4:	f04f 0300 	mov.w	r3, #0
 80005e8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	  channelSums[2] = 0;
 80005ec:	4934      	ldr	r1, [pc, #208]	; (80006c0 <main+0x1ac>)
 80005ee:	f04f 0200 	mov.w	r2, #0
 80005f2:	f04f 0300 	mov.w	r3, #0
 80005f6:	e9c1 2304 	strd	r2, r3, [r1, #16]

	  for (int i=0; i< ADCChannels; i++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	637b      	str	r3, [r7, #52]	; 0x34
 80005fe:	e049      	b.n	8000694 <main+0x180>
		  for (int j=0; j < ADCCount; j++) {
 8000600:	2300      	movs	r3, #0
 8000602:	633b      	str	r3, [r7, #48]	; 0x30
 8000604:	e026      	b.n	8000654 <main+0x140>
			  channelSums[i] += ADCBuffer[i+j*ADCChannels];
 8000606:	4a2e      	ldr	r2, [pc, #184]	; (80006c0 <main+0x1ac>)
 8000608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800060a:	00db      	lsls	r3, r3, #3
 800060c:	4413      	add	r3, r2
 800060e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000612:	4b2c      	ldr	r3, [pc, #176]	; (80006c4 <main+0x1b0>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	461a      	mov	r2, r3
 8000618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800061a:	fb03 f202 	mul.w	r2, r3, r2
 800061e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000620:	441a      	add	r2, r3
 8000622:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <main+0x194>)
 8000624:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000628:	b29b      	uxth	r3, r3
 800062a:	2200      	movs	r2, #0
 800062c:	62bb      	str	r3, [r7, #40]	; 0x28
 800062e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000632:	18c3      	adds	r3, r0, r3
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000638:	eb41 0303 	adc.w	r3, r1, r3
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	4a20      	ldr	r2, [pc, #128]	; (80006c0 <main+0x1ac>)
 8000640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	4413      	add	r3, r2
 8000646:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800064a:	e9c3 1200 	strd	r1, r2, [r3]
		  for (int j=0; j < ADCCount; j++) {
 800064e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000650:	3301      	adds	r3, #1
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <main+0x1b4>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800065c:	4293      	cmp	r3, r2
 800065e:	dbd2      	blt.n	8000606 <main+0xf2>
		  }
		  AVG[i] = channelSums[i] / ADCCount;
 8000660:	4a17      	ldr	r2, [pc, #92]	; (80006c0 <main+0x1ac>)
 8000662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000664:	00db      	lsls	r3, r3, #3
 8000666:	4413      	add	r3, r2
 8000668:	e9d3 0100 	ldrd	r0, r1, [r3]
 800066c:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <main+0x1b4>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2200      	movs	r2, #0
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	60fa      	str	r2, [r7, #12]
 8000678:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800067c:	f7ff fdcc 	bl	8000218 <__aeabi_uldivmod>
 8000680:	4602      	mov	r2, r0
 8000682:	460b      	mov	r3, r1
 8000684:	4611      	mov	r1, r2
 8000686:	4a11      	ldr	r2, [pc, #68]	; (80006cc <main+0x1b8>)
 8000688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800068a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for (int i=0; i< ADCChannels; i++) {
 800068e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000690:	3301      	adds	r3, #1
 8000692:	637b      	str	r3, [r7, #52]	; 0x34
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <main+0x1b0>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800069c:	4293      	cmp	r3, r2
 800069e:	dbaf      	blt.n	8000600 <main+0xec>
	  mn = __HAL_TIM_GET_COUNTER(&htim2);
 80006a0:	e758      	b.n	8000554 <main+0x40>
 80006a2:	bf00      	nop
 80006a4:	2000018c 	.word	0x2000018c
 80006a8:	2000022c 	.word	0x2000022c
 80006ac:	2000002c 	.word	0x2000002c
 80006b0:	200001d8 	.word	0x200001d8
 80006b4:	20000224 	.word	0x20000224
 80006b8:	20000228 	.word	0x20000228
 80006bc:	20000488 	.word	0x20000488
 80006c0:	200004a0 	.word	0x200004a0
 80006c4:	20000000 	.word	0x20000000
 80006c8:	20000001 	.word	0x20000001
 80006cc:	20000490 	.word	0x20000490

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0318 	add.w	r3, r7, #24
 80006da:	2238      	movs	r2, #56	; 0x38
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f005 fa18 	bl	8005b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006f2:	2000      	movs	r0, #0
 80006f4:	f002 fd76 	bl	80031e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000702:	2340      	movs	r3, #64	; 0x40
 8000704:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	2302      	movs	r3, #2
 8000708:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070a:	2302      	movs	r3, #2
 800070c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800070e:	2304      	movs	r3, #4
 8000710:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000712:	2355      	movs	r3, #85	; 0x55
 8000714:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000716:	2302      	movs	r3, #2
 8000718:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800071a:	2302      	movs	r3, #2
 800071c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800071e:	2302      	movs	r3, #2
 8000720:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 0318 	add.w	r3, r7, #24
 8000726:	4618      	mov	r0, r3
 8000728:	f002 fe10 	bl	800334c <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000732:	f000 fa49 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2303      	movs	r3, #3
 800073c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2104      	movs	r1, #4
 800074e:	4618      	mov	r0, r3
 8000750:	f003 f90e 	bl	8003970 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800075a:	f000 fa35 	bl	8000bc8 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	; 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08c      	sub	sp, #48	; 0x30
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800076e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2220      	movs	r2, #32
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f005 f9c7 	bl	8005b14 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000786:	4b41      	ldr	r3, [pc, #260]	; (800088c <MX_ADC1_Init+0x124>)
 8000788:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800078c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800078e:	4b3f      	ldr	r3, [pc, #252]	; (800088c <MX_ADC1_Init+0x124>)
 8000790:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000794:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000796:	4b3d      	ldr	r3, [pc, #244]	; (800088c <MX_ADC1_Init+0x124>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079c:	4b3b      	ldr	r3, [pc, #236]	; (800088c <MX_ADC1_Init+0x124>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80007a2:	4b3a      	ldr	r3, [pc, #232]	; (800088c <MX_ADC1_Init+0x124>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007a8:	4b38      	ldr	r3, [pc, #224]	; (800088c <MX_ADC1_Init+0x124>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ae:	4b37      	ldr	r3, [pc, #220]	; (800088c <MX_ADC1_Init+0x124>)
 80007b0:	2204      	movs	r2, #4
 80007b2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007b4:	4b35      	ldr	r3, [pc, #212]	; (800088c <MX_ADC1_Init+0x124>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ba:	4b34      	ldr	r3, [pc, #208]	; (800088c <MX_ADC1_Init+0x124>)
 80007bc:	2200      	movs	r2, #0
 80007be:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80007c0:	4b32      	ldr	r3, [pc, #200]	; (800088c <MX_ADC1_Init+0x124>)
 80007c2:	2203      	movs	r2, #3
 80007c4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c6:	4b31      	ldr	r3, [pc, #196]	; (800088c <MX_ADC1_Init+0x124>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80007ce:	4b2f      	ldr	r3, [pc, #188]	; (800088c <MX_ADC1_Init+0x124>)
 80007d0:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80007d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007d6:	4b2d      	ldr	r3, [pc, #180]	; (800088c <MX_ADC1_Init+0x124>)
 80007d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007dc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007de:	4b2b      	ldr	r3, [pc, #172]	; (800088c <MX_ADC1_Init+0x124>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007e6:	4b29      	ldr	r3, [pc, #164]	; (800088c <MX_ADC1_Init+0x124>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <MX_ADC1_Init+0x124>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f4:	4825      	ldr	r0, [pc, #148]	; (800088c <MX_ADC1_Init+0x124>)
 80007f6:	f000 fe6f 	bl	80014d8 <HAL_ADC_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000800:	f000 f9e2 	bl	8000bc8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080c:	4619      	mov	r1, r3
 800080e:	481f      	ldr	r0, [pc, #124]	; (800088c <MX_ADC1_Init+0x124>)
 8000810:	f001 fea0 	bl	8002554 <HAL_ADCEx_MultiModeConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800081a:	f000 f9d5 	bl	8000bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <MX_ADC1_Init+0x128>)
 8000820:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000822:	2306      	movs	r3, #6
 8000824:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000826:	2307      	movs	r3, #7
 8000828:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800082a:	237f      	movs	r3, #127	; 0x7f
 800082c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800082e:	2304      	movs	r3, #4
 8000830:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4619      	mov	r1, r3
 800083a:	4814      	ldr	r0, [pc, #80]	; (800088c <MX_ADC1_Init+0x124>)
 800083c:	f001 f8fa 	bl	8001a34 <HAL_ADC_ConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000846:	f000 f9bf 	bl	8000bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_ADC1_Init+0x12c>)
 800084c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800084e:	230c      	movs	r3, #12
 8000850:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4619      	mov	r1, r3
 8000856:	480d      	ldr	r0, [pc, #52]	; (800088c <MX_ADC1_Init+0x124>)
 8000858:	f001 f8ec 	bl	8001a34 <HAL_ADC_ConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000862:	f000 f9b1 	bl	8000bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_ADC1_Init+0x130>)
 8000868:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800086a:	2312      	movs	r3, #18
 800086c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	4619      	mov	r1, r3
 8000872:	4806      	ldr	r0, [pc, #24]	; (800088c <MX_ADC1_Init+0x124>)
 8000874:	f001 f8de 	bl	8001a34 <HAL_ADC_ConfigChannel>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800087e:	f000 f9a3 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	3730      	adds	r7, #48	; 0x30
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000002c 	.word	0x2000002c
 8000890:	04300002 	.word	0x04300002
 8000894:	08600004 	.word	0x08600004
 8000898:	3ef08000 	.word	0x3ef08000

0800089c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008a0:	4b21      	ldr	r3, [pc, #132]	; (8000928 <MX_LPUART1_UART_Init+0x8c>)
 80008a2:	4a22      	ldr	r2, [pc, #136]	; (800092c <MX_LPUART1_UART_Init+0x90>)
 80008a4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80008a6:	4b20      	ldr	r3, [pc, #128]	; (8000928 <MX_LPUART1_UART_Init+0x8c>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_LPUART1_UART_Init+0x8c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_LPUART1_UART_Init+0x8c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <MX_LPUART1_UART_Init+0x8c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_LPUART1_UART_Init+0x8c>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_LPUART1_UART_Init+0x8c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008cc:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_LPUART1_UART_Init+0x8c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <MX_LPUART1_UART_Init+0x8c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_LPUART1_UART_Init+0x8c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008de:	4812      	ldr	r0, [pc, #72]	; (8000928 <MX_LPUART1_UART_Init+0x8c>)
 80008e0:	f004 faaa 	bl	8004e38 <HAL_UART_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80008ea:	f000 f96d 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ee:	2100      	movs	r1, #0
 80008f0:	480d      	ldr	r0, [pc, #52]	; (8000928 <MX_LPUART1_UART_Init+0x8c>)
 80008f2:	f005 f845 	bl	8005980 <HAL_UARTEx_SetTxFifoThreshold>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80008fc:	f000 f964 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000900:	2100      	movs	r1, #0
 8000902:	4809      	ldr	r0, [pc, #36]	; (8000928 <MX_LPUART1_UART_Init+0x8c>)
 8000904:	f005 f87a 	bl	80059fc <HAL_UARTEx_SetRxFifoThreshold>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800090e:	f000 f95b 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_LPUART1_UART_Init+0x8c>)
 8000914:	f004 fffb 	bl	800590e <HAL_UARTEx_DisableFifoMode>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800091e:	f000 f953 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200000f8 	.word	0x200000f8
 800092c:	40008000 	.word	0x40008000

08000930 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800094e:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <MX_TIM2_Init+0x98>)
 8000950:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000954:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000956:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <MX_TIM2_Init+0x98>)
 8000958:	22a9      	movs	r2, #169	; 0xa9
 800095a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095c:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_TIM2_Init+0x98>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_TIM2_Init+0x98>)
 8000964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000968:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_TIM2_Init+0x98>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_TIM2_Init+0x98>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000976:	4814      	ldr	r0, [pc, #80]	; (80009c8 <MX_TIM2_Init+0x98>)
 8000978:	f003 fc64 	bl	8004244 <HAL_TIM_Base_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000982:	f000 f921 	bl	8000bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800098c:	f107 0310 	add.w	r3, r7, #16
 8000990:	4619      	mov	r1, r3
 8000992:	480d      	ldr	r0, [pc, #52]	; (80009c8 <MX_TIM2_Init+0x98>)
 8000994:	f003 fee6 	bl	8004764 <HAL_TIM_ConfigClockSource>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800099e:	f000 f913 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	4619      	mov	r1, r3
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <MX_TIM2_Init+0x98>)
 80009b0:	f004 f966 	bl	8004c80 <HAL_TIMEx_MasterConfigSynchronization>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009ba:	f000 f905 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	3720      	adds	r7, #32
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2000018c 	.word	0x2000018c

080009cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009ea:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <MX_TIM3_Init+0x94>)
 80009ec:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <MX_TIM3_Init+0x98>)
 80009ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16999;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <MX_TIM3_Init+0x94>)
 80009f2:	f244 2267 	movw	r2, #16999	; 0x4267
 80009f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f8:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <MX_TIM3_Init+0x94>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_TIM3_Init+0x94>)
 8000a00:	2209      	movs	r2, #9
 8000a02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <MX_TIM3_Init+0x94>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_TIM3_Init+0x94>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a10:	4813      	ldr	r0, [pc, #76]	; (8000a60 <MX_TIM3_Init+0x94>)
 8000a12:	f003 fc17 	bl	8004244 <HAL_TIM_Base_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000a1c:	f000 f8d4 	bl	8000bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a26:	f107 0310 	add.w	r3, r7, #16
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <MX_TIM3_Init+0x94>)
 8000a2e:	f003 fe99 	bl	8004764 <HAL_TIM_ConfigClockSource>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000a38:	f000 f8c6 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a3c:	2320      	movs	r3, #32
 8000a3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	4619      	mov	r1, r3
 8000a48:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_TIM3_Init+0x94>)
 8000a4a:	f004 f919 	bl	8004c80 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a54:	f000 f8b8 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	3720      	adds	r7, #32
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200001d8 	.word	0x200001d8
 8000a64:	40000400 	.word	0x40000400

08000a68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_DMA_Init+0x50>)
 8000a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a72:	4a11      	ldr	r2, [pc, #68]	; (8000ab8 <MX_DMA_Init+0x50>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	6493      	str	r3, [r2, #72]	; 0x48
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_DMA_Init+0x50>)
 8000a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_DMA_Init+0x50>)
 8000a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <MX_DMA_Init+0x50>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6493      	str	r3, [r2, #72]	; 0x48
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_DMA_Init+0x50>)
 8000a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	200b      	movs	r0, #11
 8000aa4:	f001 ff39 	bl	800291a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000aa8:	200b      	movs	r0, #11
 8000aaa:	f001 ff50 	bl	800294e <HAL_NVIC_EnableIRQ>

}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad2:	4b2f      	ldr	r3, [pc, #188]	; (8000b90 <MX_GPIO_Init+0xd4>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a2e      	ldr	r2, [pc, #184]	; (8000b90 <MX_GPIO_Init+0xd4>)
 8000ad8:	f043 0304 	orr.w	r3, r3, #4
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b2c      	ldr	r3, [pc, #176]	; (8000b90 <MX_GPIO_Init+0xd4>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0304 	and.w	r3, r3, #4
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aea:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <MX_GPIO_Init+0xd4>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a28      	ldr	r2, [pc, #160]	; (8000b90 <MX_GPIO_Init+0xd4>)
 8000af0:	f043 0320 	orr.w	r3, r3, #32
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <MX_GPIO_Init+0xd4>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0320 	and.w	r3, r3, #32
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <MX_GPIO_Init+0xd4>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a22      	ldr	r2, [pc, #136]	; (8000b90 <MX_GPIO_Init+0xd4>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b20      	ldr	r3, [pc, #128]	; (8000b90 <MX_GPIO_Init+0xd4>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <MX_GPIO_Init+0xd4>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <MX_GPIO_Init+0xd4>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <MX_GPIO_Init+0xd4>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2120      	movs	r1, #32
 8000b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3a:	f002 fb17 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b44:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	480f      	ldr	r0, [pc, #60]	; (8000b94 <MX_GPIO_Init+0xd8>)
 8000b56:	f002 f987 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b5a:	2320      	movs	r3, #32
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b74:	f002 f978 	bl	8002e68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2028      	movs	r0, #40	; 0x28
 8000b7e:	f001 fecc 	bl	800291a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b82:	2028      	movs	r0, #40	; 0x28
 8000b84:	f001 fee3 	bl	800294e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b88:	bf00      	nop
 8000b8a:	3728      	adds	r7, #40	; 0x28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40021000 	.word	0x40021000
 8000b94:	48000800 	.word	0x48000800

08000b98 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
if(htim == &htim2)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d104      	bne.n	8000bb2 <HAL_TIM_PeriodElapsedCallback+0x1a>
{
count += 1;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	3301      	adds	r3, #1
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000bb0:	6013      	str	r3, [r2, #0]
}
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	2000018c 	.word	0x2000018c
 8000bc4:	20000228 	.word	0x20000228

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <Error_Handler+0x8>
	...

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <HAL_MspInit+0x44>)
 8000bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bde:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <HAL_MspInit+0x44>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6613      	str	r3, [r2, #96]	; 0x60
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <HAL_MspInit+0x44>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_MspInit+0x44>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <HAL_MspInit+0x44>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_MspInit+0x44>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c0a:	f002 fb8f 	bl	800332c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000

08000c1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b0a0      	sub	sp, #128	; 0x80
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c34:	f107 0318 	add.w	r3, r7, #24
 8000c38:	2254      	movs	r2, #84	; 0x54
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f004 ff69 	bl	8005b14 <memset>
  if(hadc->Instance==ADC1)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c4a:	d177      	bne.n	8000d3c <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c50:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c52:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c56:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c58:	f107 0318 	add.w	r3, r7, #24
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f003 f8a3 	bl	8003da8 <HAL_RCCEx_PeriphCLKConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c68:	f7ff ffae 	bl	8000bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c6c:	4b35      	ldr	r3, [pc, #212]	; (8000d44 <HAL_ADC_MspInit+0x128>)
 8000c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c70:	4a34      	ldr	r2, [pc, #208]	; (8000d44 <HAL_ADC_MspInit+0x128>)
 8000c72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c78:	4b32      	ldr	r3, [pc, #200]	; (8000d44 <HAL_ADC_MspInit+0x128>)
 8000c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c84:	4b2f      	ldr	r3, [pc, #188]	; (8000d44 <HAL_ADC_MspInit+0x128>)
 8000c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c88:	4a2e      	ldr	r2, [pc, #184]	; (8000d44 <HAL_ADC_MspInit+0x128>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c90:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <HAL_ADC_MspInit+0x128>)
 8000c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9c:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <HAL_ADC_MspInit+0x128>)
 8000c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca0:	4a28      	ldr	r2, [pc, #160]	; (8000d44 <HAL_ADC_MspInit+0x128>)
 8000ca2:	f043 0302 	orr.w	r3, r3, #2
 8000ca6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca8:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <HAL_ADC_MspInit+0x128>)
 8000caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cca:	f002 f8cd 	bl	8002e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cda:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4819      	ldr	r0, [pc, #100]	; (8000d48 <HAL_ADC_MspInit+0x12c>)
 8000ce2:	f002 f8c1 	bl	8002e68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <HAL_ADC_MspInit+0x130>)
 8000ce8:	4a19      	ldr	r2, [pc, #100]	; (8000d50 <HAL_ADC_MspInit+0x134>)
 8000cea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <HAL_ADC_MspInit+0x130>)
 8000cee:	2205      	movs	r2, #5
 8000cf0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <HAL_ADC_MspInit+0x130>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <HAL_ADC_MspInit+0x130>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <HAL_ADC_MspInit+0x130>)
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_ADC_MspInit+0x130>)
 8000d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d0a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_ADC_MspInit+0x130>)
 8000d0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d12:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d14:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <HAL_ADC_MspInit+0x130>)
 8000d16:	2220      	movs	r2, #32
 8000d18:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_ADC_MspInit+0x130>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d20:	480a      	ldr	r0, [pc, #40]	; (8000d4c <HAL_ADC_MspInit+0x130>)
 8000d22:	f001 fe2f 	bl	8002984 <HAL_DMA_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8000d2c:	f7ff ff4c 	bl	8000bc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a06      	ldr	r2, [pc, #24]	; (8000d4c <HAL_ADC_MspInit+0x130>)
 8000d34:	655a      	str	r2, [r3, #84]	; 0x54
 8000d36:	4a05      	ldr	r2, [pc, #20]	; (8000d4c <HAL_ADC_MspInit+0x130>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d3c:	bf00      	nop
 8000d3e:	3780      	adds	r7, #128	; 0x80
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40021000 	.word	0x40021000
 8000d48:	48000400 	.word	0x48000400
 8000d4c:	20000098 	.word	0x20000098
 8000d50:	40020008 	.word	0x40020008

08000d54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b09e      	sub	sp, #120	; 0x78
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	2254      	movs	r2, #84	; 0x54
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f004 fecd 	bl	8005b14 <memset>
  if(huart->Instance==LPUART1)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a1f      	ldr	r2, [pc, #124]	; (8000dfc <HAL_UART_MspInit+0xa8>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d136      	bne.n	8000df2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d84:	2320      	movs	r3, #32
 8000d86:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4618      	mov	r0, r3
 8000d92:	f003 f809 	bl	8003da8 <HAL_RCCEx_PeriphCLKConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d9c:	f7ff ff14 	bl	8000bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <HAL_UART_MspInit+0xac>)
 8000da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000da4:	4a16      	ldr	r2, [pc, #88]	; (8000e00 <HAL_UART_MspInit+0xac>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <HAL_UART_MspInit+0xac>)
 8000dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <HAL_UART_MspInit+0xac>)
 8000dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbc:	4a10      	ldr	r2, [pc, #64]	; (8000e00 <HAL_UART_MspInit+0xac>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <HAL_UART_MspInit+0xac>)
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000dd0:	230c      	movs	r3, #12
 8000dd2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000de0:	230c      	movs	r3, #12
 8000de2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000de8:	4619      	mov	r1, r3
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dee:	f002 f83b 	bl	8002e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000df2:	bf00      	nop
 8000df4:	3778      	adds	r7, #120	; 0x78
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40008000 	.word	0x40008000
 8000e00:	40021000 	.word	0x40021000

08000e04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e14:	d114      	bne.n	8000e40 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_TIM_Base_MspInit+0x68>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1a:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <HAL_TIM_Base_MspInit+0x68>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6593      	str	r3, [r2, #88]	; 0x58
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_TIM_Base_MspInit+0x68>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	201c      	movs	r0, #28
 8000e34:	f001 fd71 	bl	800291a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e38:	201c      	movs	r0, #28
 8000e3a:	f001 fd88 	bl	800294e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e3e:	e010      	b.n	8000e62 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <HAL_TIM_Base_MspInit+0x6c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d10b      	bne.n	8000e62 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <HAL_TIM_Base_MspInit+0x68>)
 8000e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4e:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <HAL_TIM_Base_MspInit+0x68>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6593      	str	r3, [r2, #88]	; 0x58
 8000e56:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <HAL_TIM_Base_MspInit+0x68>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40000400 	.word	0x40000400

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 f8ac 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <DMA1_Channel1_IRQHandler+0x10>)
 8000ece:	f001 fe7c 	bl	8002bca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000098 	.word	0x20000098

08000edc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <TIM2_IRQHandler+0x10>)
 8000ee2:	f003 faef 	bl	80044c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	2000018c 	.word	0x2000018c

08000ef0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ef4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ef8:	f002 f950 	bl	800319c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <SystemInit+0x20>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <SystemInit+0x20>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f28:	f7ff ffea 	bl	8000f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f2c:	480c      	ldr	r0, [pc, #48]	; (8000f60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f2e:	490d      	ldr	r1, [pc, #52]	; (8000f64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <LoopForever+0xe>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f34:	e002      	b.n	8000f3c <LoopCopyDataInit>

08000f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3a:	3304      	adds	r3, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f40:	d3f9      	bcc.n	8000f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f44:	4c0a      	ldr	r4, [pc, #40]	; (8000f70 <LoopForever+0x16>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f48:	e001      	b.n	8000f4e <LoopFillZerobss>

08000f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4c:	3204      	adds	r2, #4

08000f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f50:	d3fb      	bcc.n	8000f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f52:	f004 fde7 	bl	8005b24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f56:	f7ff fadd 	bl	8000514 <main>

08000f5a <LoopForever>:

LoopForever:
    b LoopForever
 8000f5a:	e7fe      	b.n	8000f5a <LoopForever>
  ldr   r0, =_estack
 8000f5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f68:	08005bd4 	.word	0x08005bd4
  ldr r2, =_sbss
 8000f6c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f70:	200004bc 	.word	0x200004bc

08000f74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC1_2_IRQHandler>

08000f76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f001 fcbf 	bl	8002904 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f86:	2000      	movs	r0, #0
 8000f88:	f000 f80e 	bl	8000fa8 <HAL_InitTick>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d002      	beq.n	8000f98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	71fb      	strb	r3, [r7, #7]
 8000f96:	e001      	b.n	8000f9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f98:	f7ff fe1c 	bl	8000bd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]

}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fb4:	4b16      	ldr	r3, [pc, #88]	; (8001010 <HAL_InitTick+0x68>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d022      	beq.n	8001002 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <HAL_InitTick+0x6c>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b13      	ldr	r3, [pc, #76]	; (8001010 <HAL_InitTick+0x68>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 fcca 	bl	800296a <HAL_SYSTICK_Config>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10f      	bne.n	8000ffc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b0f      	cmp	r3, #15
 8000fe0:	d809      	bhi.n	8000ff6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fea:	f001 fc96 	bl	800291a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <HAL_InitTick+0x70>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	e007      	b.n	8001006 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	73fb      	strb	r3, [r7, #15]
 8000ffa:	e004      	b.n	8001006 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	73fb      	strb	r3, [r7, #15]
 8001000:	e001      	b.n	8001006 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001006:	7bfb      	ldrb	r3, [r7, #15]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	2000000c 	.word	0x2000000c
 8001014:	20000004 	.word	0x20000004
 8001018:	20000008 	.word	0x20000008

0800101c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <HAL_IncTick+0x1c>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <HAL_IncTick+0x20>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4413      	add	r3, r2
 800102a:	4a03      	ldr	r2, [pc, #12]	; (8001038 <HAL_IncTick+0x1c>)
 800102c:	6013      	str	r3, [r2, #0]
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	200004b8 	.word	0x200004b8
 800103c:	2000000c 	.word	0x2000000c

08001040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <HAL_GetTick+0x14>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	200004b8 	.word	0x200004b8

08001058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001060:	f7ff ffee 	bl	8001040 <HAL_GetTick>
 8001064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001070:	d004      	beq.n	800107c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_Delay+0x40>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	4413      	add	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800107c:	bf00      	nop
 800107e:	f7ff ffdf 	bl	8001040 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	429a      	cmp	r2, r3
 800108c:	d8f7      	bhi.n	800107e <HAL_Delay+0x26>
  {
  }
}
 800108e:	bf00      	nop
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	2000000c 	.word	0x2000000c

0800109c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	431a      	orrs	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	609a      	str	r2, [r3, #8]
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	431a      	orrs	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	609a      	str	r2, [r3, #8]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3360      	adds	r3, #96	; 0x60
 8001116:	461a      	mov	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <LL_ADC_SetOffset+0x44>)
 8001126:	4013      	ands	r3, r2
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	430a      	orrs	r2, r1
 8001132:	4313      	orrs	r3, r2
 8001134:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800113c:	bf00      	nop
 800113e:	371c      	adds	r7, #28
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	03fff000 	.word	0x03fff000

0800114c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3360      	adds	r3, #96	; 0x60
 800115a:	461a      	mov	r2, r3
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800116c:	4618      	mov	r0, r3
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001178:	b480      	push	{r7}
 800117a:	b087      	sub	sp, #28
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3360      	adds	r3, #96	; 0x60
 8001188:	461a      	mov	r2, r3
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	431a      	orrs	r2, r3
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011a2:	bf00      	nop
 80011a4:	371c      	adds	r7, #28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b087      	sub	sp, #28
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	3360      	adds	r3, #96	; 0x60
 80011be:	461a      	mov	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	431a      	orrs	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80011d8:	bf00      	nop
 80011da:	371c      	adds	r7, #28
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b087      	sub	sp, #28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3360      	adds	r3, #96	; 0x60
 80011f4:	461a      	mov	r2, r3
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	431a      	orrs	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800120e:	bf00      	nop
 8001210:	371c      	adds	r7, #28
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	615a      	str	r2, [r3, #20]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001266:	b480      	push	{r7}
 8001268:	b087      	sub	sp, #28
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3330      	adds	r3, #48	; 0x30
 8001276:	461a      	mov	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	0a1b      	lsrs	r3, r3, #8
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	4413      	add	r3, r2
 8001284:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	f003 031f 	and.w	r3, r3, #31
 8001290:	211f      	movs	r1, #31
 8001292:	fa01 f303 	lsl.w	r3, r1, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	401a      	ands	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	0e9b      	lsrs	r3, r3, #26
 800129e:	f003 011f 	and.w	r1, r3, #31
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	f003 031f 	and.w	r3, r3, #31
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	431a      	orrs	r2, r3
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012b2:	bf00      	nop
 80012b4:	371c      	adds	r7, #28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012be:	b480      	push	{r7}
 80012c0:	b087      	sub	sp, #28
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3314      	adds	r3, #20
 80012ce:	461a      	mov	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	0e5b      	lsrs	r3, r3, #25
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	4413      	add	r3, r2
 80012dc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	0d1b      	lsrs	r3, r3, #20
 80012e6:	f003 031f 	and.w	r3, r3, #31
 80012ea:	2107      	movs	r1, #7
 80012ec:	fa01 f303 	lsl.w	r3, r1, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	401a      	ands	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	0d1b      	lsrs	r3, r3, #20
 80012f8:	f003 031f 	and.w	r3, r3, #31
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	431a      	orrs	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001308:	bf00      	nop
 800130a:	371c      	adds	r7, #28
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800132c:	43db      	mvns	r3, r3
 800132e:	401a      	ands	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0318 	and.w	r3, r3, #24
 8001336:	4908      	ldr	r1, [pc, #32]	; (8001358 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001338:	40d9      	lsrs	r1, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	400b      	ands	r3, r1
 800133e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001342:	431a      	orrs	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800134a:	bf00      	nop
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	0007ffff 	.word	0x0007ffff

0800135c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 031f 	and.w	r3, r3, #31
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001388:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	6093      	str	r3, [r2, #8]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013b0:	d101      	bne.n	80013b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001400:	d101      	bne.n	8001406 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001424:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001428:	f043 0201 	orr.w	r2, r3, #1
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b01      	cmp	r3, #1
 800144e:	d101      	bne.n	8001454 <LL_ADC_IsEnabled+0x18>
 8001450:	2301      	movs	r3, #1
 8001452:	e000      	b.n	8001456 <LL_ADC_IsEnabled+0x1a>
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001472:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001476:	f043 0204 	orr.w	r2, r3, #4
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 0304 	and.w	r3, r3, #4
 800149a:	2b04      	cmp	r3, #4
 800149c:	d101      	bne.n	80014a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d101      	bne.n	80014c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b089      	sub	sp, #36	; 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e0:	2300      	movs	r3, #0
 80014e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e1a9      	b.n	8001846 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d109      	bne.n	8001514 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff fb8b 	bl	8000c1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff3f 	bl	800139c <LL_ADC_IsDeepPowerDownEnabled>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d004      	beq.n	800152e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff25 	bl	8001378 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff ff5a 	bl	80013ec <LL_ADC_IsInternalRegulatorEnabled>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d115      	bne.n	800156a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff ff3e 	bl	80013c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001548:	4b9c      	ldr	r3, [pc, #624]	; (80017bc <HAL_ADC_Init+0x2e4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	099b      	lsrs	r3, r3, #6
 800154e:	4a9c      	ldr	r2, [pc, #624]	; (80017c0 <HAL_ADC_Init+0x2e8>)
 8001550:	fba2 2303 	umull	r2, r3, r2, r3
 8001554:	099b      	lsrs	r3, r3, #6
 8001556:	3301      	adds	r3, #1
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800155c:	e002      	b.n	8001564 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3b01      	subs	r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f9      	bne.n	800155e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff ff3c 	bl	80013ec <LL_ADC_IsInternalRegulatorEnabled>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10d      	bne.n	8001596 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157e:	f043 0210 	orr.w	r2, r3, #16
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158a:	f043 0201 	orr.w	r2, r3, #1
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ff75 	bl	800148a <LL_ADC_REG_IsConversionOngoing>
 80015a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f040 8142 	bne.w	8001834 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f040 813e 	bne.w	8001834 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015c0:	f043 0202 	orr.w	r2, r3, #2
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff35 	bl	800143c <LL_ADC_IsEnabled>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d141      	bne.n	800165c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015e0:	d004      	beq.n	80015ec <HAL_ADC_Init+0x114>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a77      	ldr	r2, [pc, #476]	; (80017c4 <HAL_ADC_Init+0x2ec>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d10f      	bne.n	800160c <HAL_ADC_Init+0x134>
 80015ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015f0:	f7ff ff24 	bl	800143c <LL_ADC_IsEnabled>
 80015f4:	4604      	mov	r4, r0
 80015f6:	4873      	ldr	r0, [pc, #460]	; (80017c4 <HAL_ADC_Init+0x2ec>)
 80015f8:	f7ff ff20 	bl	800143c <LL_ADC_IsEnabled>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4323      	orrs	r3, r4
 8001600:	2b00      	cmp	r3, #0
 8001602:	bf0c      	ite	eq
 8001604:	2301      	moveq	r3, #1
 8001606:	2300      	movne	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	e012      	b.n	8001632 <HAL_ADC_Init+0x15a>
 800160c:	486e      	ldr	r0, [pc, #440]	; (80017c8 <HAL_ADC_Init+0x2f0>)
 800160e:	f7ff ff15 	bl	800143c <LL_ADC_IsEnabled>
 8001612:	4604      	mov	r4, r0
 8001614:	486d      	ldr	r0, [pc, #436]	; (80017cc <HAL_ADC_Init+0x2f4>)
 8001616:	f7ff ff11 	bl	800143c <LL_ADC_IsEnabled>
 800161a:	4603      	mov	r3, r0
 800161c:	431c      	orrs	r4, r3
 800161e:	486c      	ldr	r0, [pc, #432]	; (80017d0 <HAL_ADC_Init+0x2f8>)
 8001620:	f7ff ff0c 	bl	800143c <LL_ADC_IsEnabled>
 8001624:	4603      	mov	r3, r0
 8001626:	4323      	orrs	r3, r4
 8001628:	2b00      	cmp	r3, #0
 800162a:	bf0c      	ite	eq
 800162c:	2301      	moveq	r3, #1
 800162e:	2300      	movne	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d012      	beq.n	800165c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800163e:	d004      	beq.n	800164a <HAL_ADC_Init+0x172>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a5f      	ldr	r2, [pc, #380]	; (80017c4 <HAL_ADC_Init+0x2ec>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d101      	bne.n	800164e <HAL_ADC_Init+0x176>
 800164a:	4a62      	ldr	r2, [pc, #392]	; (80017d4 <HAL_ADC_Init+0x2fc>)
 800164c:	e000      	b.n	8001650 <HAL_ADC_Init+0x178>
 800164e:	4a62      	ldr	r2, [pc, #392]	; (80017d8 <HAL_ADC_Init+0x300>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	4619      	mov	r1, r3
 8001656:	4610      	mov	r0, r2
 8001658:	f7ff fd20 	bl	800109c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7f5b      	ldrb	r3, [r3, #29]
 8001660:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001666:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800166c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001672:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800167a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001686:	2b01      	cmp	r3, #1
 8001688:	d106      	bne.n	8001698 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	3b01      	subs	r3, #1
 8001690:	045b      	lsls	r3, r3, #17
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169c:	2b00      	cmp	r3, #0
 800169e:	d009      	beq.n	80016b4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	4b48      	ldr	r3, [pc, #288]	; (80017dc <HAL_ADC_Init+0x304>)
 80016bc:	4013      	ands	r3, r2
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	69b9      	ldr	r1, [r7, #24]
 80016c4:	430b      	orrs	r3, r1
 80016c6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fee4 	bl	80014b0 <LL_ADC_INJ_IsConversionOngoing>
 80016e8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d17f      	bne.n	80017f0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d17c      	bne.n	80017f0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016fa:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001702:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001712:	f023 0302 	bic.w	r3, r3, #2
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	69b9      	ldr	r1, [r7, #24]
 800171c:	430b      	orrs	r3, r1
 800171e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d017      	beq.n	8001758 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	691a      	ldr	r2, [r3, #16]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001736:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001740:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001744:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6911      	ldr	r1, [r2, #16]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	430b      	orrs	r3, r1
 8001752:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001756:	e013      	b.n	8001780 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	691a      	ldr	r2, [r3, #16]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001766:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001778:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800177c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001786:	2b01      	cmp	r3, #1
 8001788:	d12a      	bne.n	80017e0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001794:	f023 0304 	bic.w	r3, r3, #4
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017a0:	4311      	orrs	r1, r2
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80017a6:	4311      	orrs	r1, r2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80017ac:	430a      	orrs	r2, r1
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f042 0201 	orr.w	r2, r2, #1
 80017b8:	611a      	str	r2, [r3, #16]
 80017ba:	e019      	b.n	80017f0 <HAL_ADC_Init+0x318>
 80017bc:	20000004 	.word	0x20000004
 80017c0:	053e2d63 	.word	0x053e2d63
 80017c4:	50000100 	.word	0x50000100
 80017c8:	50000400 	.word	0x50000400
 80017cc:	50000500 	.word	0x50000500
 80017d0:	50000600 	.word	0x50000600
 80017d4:	50000300 	.word	0x50000300
 80017d8:	50000700 	.word	0x50000700
 80017dc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	691a      	ldr	r2, [r3, #16]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0201 	bic.w	r2, r2, #1
 80017ee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d10c      	bne.n	8001812 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f023 010f 	bic.w	r1, r3, #15
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	1e5a      	subs	r2, r3, #1
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	631a      	str	r2, [r3, #48]	; 0x30
 8001810:	e007      	b.n	8001822 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 020f 	bic.w	r2, r2, #15
 8001820:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001826:	f023 0303 	bic.w	r3, r3, #3
 800182a:	f043 0201 	orr.w	r2, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	65da      	str	r2, [r3, #92]	; 0x5c
 8001832:	e007      	b.n	8001844 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001838:	f043 0210 	orr.w	r2, r3, #16
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001844:	7ffb      	ldrb	r3, [r7, #31]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3724      	adds	r7, #36	; 0x24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd90      	pop	{r4, r7, pc}
 800184e:	bf00      	nop

08001850 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001864:	d004      	beq.n	8001870 <HAL_ADC_Start_DMA+0x20>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a5a      	ldr	r2, [pc, #360]	; (80019d4 <HAL_ADC_Start_DMA+0x184>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d101      	bne.n	8001874 <HAL_ADC_Start_DMA+0x24>
 8001870:	4b59      	ldr	r3, [pc, #356]	; (80019d8 <HAL_ADC_Start_DMA+0x188>)
 8001872:	e000      	b.n	8001876 <HAL_ADC_Start_DMA+0x26>
 8001874:	4b59      	ldr	r3, [pc, #356]	; (80019dc <HAL_ADC_Start_DMA+0x18c>)
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fd70 	bl	800135c <LL_ADC_GetMultimode>
 800187c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fe01 	bl	800148a <LL_ADC_REG_IsConversionOngoing>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	f040 809b 	bne.w	80019c6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001896:	2b01      	cmp	r3, #1
 8001898:	d101      	bne.n	800189e <HAL_ADC_Start_DMA+0x4e>
 800189a:	2302      	movs	r3, #2
 800189c:	e096      	b.n	80019cc <HAL_ADC_Start_DMA+0x17c>
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a4d      	ldr	r2, [pc, #308]	; (80019e0 <HAL_ADC_Start_DMA+0x190>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d008      	beq.n	80018c2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d005      	beq.n	80018c2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	2b05      	cmp	r3, #5
 80018ba:	d002      	beq.n	80018c2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	2b09      	cmp	r3, #9
 80018c0:	d17a      	bne.n	80019b8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 fcf6 	bl	80022b4 <ADC_Enable>
 80018c8:	4603      	mov	r3, r0
 80018ca:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80018cc:	7dfb      	ldrb	r3, [r7, #23]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d16d      	bne.n	80019ae <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018da:	f023 0301 	bic.w	r3, r3, #1
 80018de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a3a      	ldr	r2, [pc, #232]	; (80019d4 <HAL_ADC_Start_DMA+0x184>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d009      	beq.n	8001904 <HAL_ADC_Start_DMA+0xb4>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a3b      	ldr	r2, [pc, #236]	; (80019e4 <HAL_ADC_Start_DMA+0x194>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d002      	beq.n	8001900 <HAL_ADC_Start_DMA+0xb0>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	e003      	b.n	8001908 <HAL_ADC_Start_DMA+0xb8>
 8001900:	4b39      	ldr	r3, [pc, #228]	; (80019e8 <HAL_ADC_Start_DMA+0x198>)
 8001902:	e001      	b.n	8001908 <HAL_ADC_Start_DMA+0xb8>
 8001904:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	4293      	cmp	r3, r2
 800190e:	d002      	beq.n	8001916 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d105      	bne.n	8001922 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001926:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d006      	beq.n	800193c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001932:	f023 0206 	bic.w	r2, r3, #6
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	661a      	str	r2, [r3, #96]	; 0x60
 800193a:	e002      	b.n	8001942 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001946:	4a29      	ldr	r2, [pc, #164]	; (80019ec <HAL_ADC_Start_DMA+0x19c>)
 8001948:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194e:	4a28      	ldr	r2, [pc, #160]	; (80019f0 <HAL_ADC_Start_DMA+0x1a0>)
 8001950:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001956:	4a27      	ldr	r2, [pc, #156]	; (80019f4 <HAL_ADC_Start_DMA+0x1a4>)
 8001958:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	221c      	movs	r2, #28
 8001960:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f042 0210 	orr.w	r2, r2, #16
 8001978:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f042 0201 	orr.w	r2, r2, #1
 8001988:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	3340      	adds	r3, #64	; 0x40
 8001994:	4619      	mov	r1, r3
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f001 f89b 	bl	8002ad4 <HAL_DMA_Start_IT>
 800199e:	4603      	mov	r3, r0
 80019a0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fd5b 	bl	8001462 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80019ac:	e00d      	b.n	80019ca <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80019b6:	e008      	b.n	80019ca <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80019c4:	e001      	b.n	80019ca <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019c6:	2302      	movs	r3, #2
 80019c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	50000100 	.word	0x50000100
 80019d8:	50000300 	.word	0x50000300
 80019dc:	50000700 	.word	0x50000700
 80019e0:	50000600 	.word	0x50000600
 80019e4:	50000500 	.word	0x50000500
 80019e8:	50000400 	.word	0x50000400
 80019ec:	080023e1 	.word	0x080023e1
 80019f0:	080024b9 	.word	0x080024b9
 80019f4:	080024d5 	.word	0x080024d5

080019f8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b0b6      	sub	sp, #216	; 0xd8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d102      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x24>
 8001a52:	2302      	movs	r3, #2
 8001a54:	f000 bc13 	b.w	800227e <HAL_ADC_ConfigChannel+0x84a>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fd10 	bl	800148a <LL_ADC_REG_IsConversionOngoing>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f040 83f3 	bne.w	8002258 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	6859      	ldr	r1, [r3, #4]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	f7ff fbf1 	bl	8001266 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fcfe 	bl	800148a <LL_ADC_REG_IsConversionOngoing>
 8001a8e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fd0a 	bl	80014b0 <LL_ADC_INJ_IsConversionOngoing>
 8001a9c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aa0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f040 81d9 	bne.w	8001e5c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aaa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f040 81d4 	bne.w	8001e5c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001abc:	d10f      	bne.n	8001ade <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f7ff fbf8 	bl	80012be <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fb9f 	bl	800121a <LL_ADC_SetSamplingTimeCommonConfig>
 8001adc:	e00e      	b.n	8001afc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	6819      	ldr	r1, [r3, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	461a      	mov	r2, r3
 8001aec:	f7ff fbe7 	bl	80012be <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2100      	movs	r1, #0
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fb8f 	bl	800121a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	695a      	ldr	r2, [r3, #20]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	08db      	lsrs	r3, r3, #3
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d022      	beq.n	8001b64 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	6919      	ldr	r1, [r3, #16]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b2e:	f7ff fae9 	bl	8001104 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	6919      	ldr	r1, [r3, #16]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	f7ff fb35 	bl	80011ae <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d102      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x126>
 8001b54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b58:	e000      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x128>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	f7ff fb41 	bl	80011e4 <LL_ADC_SetOffsetSaturation>
 8001b62:	e17b      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff faee 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10a      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x15c>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fae3 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001b86:	4603      	mov	r3, r0
 8001b88:	0e9b      	lsrs	r3, r3, #26
 8001b8a:	f003 021f 	and.w	r2, r3, #31
 8001b8e:	e01e      	b.n	8001bce <HAL_ADC_ConfigChannel+0x19a>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fad8 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001bb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001bbe:	2320      	movs	r3, #32
 8001bc0:	e004      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001bc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bc6:	fab3 f383 	clz	r3, r3
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d105      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x1b2>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	0e9b      	lsrs	r3, r3, #26
 8001be0:	f003 031f 	and.w	r3, r3, #31
 8001be4:	e018      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x1e4>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bf2:	fa93 f3a3 	rbit	r3, r3
 8001bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001bfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001c0a:	2320      	movs	r3, #32
 8001c0c:	e004      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001c0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c12:	fab3 f383 	clz	r3, r3
 8001c16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d106      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2200      	movs	r2, #0
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff faa7 	bl	8001178 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2101      	movs	r1, #1
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fa8b 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10a      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x222>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2101      	movs	r1, #1
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fa80 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	0e9b      	lsrs	r3, r3, #26
 8001c50:	f003 021f 	and.w	r2, r3, #31
 8001c54:	e01e      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x260>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fa75 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c6c:	fa93 f3a3 	rbit	r3, r3
 8001c70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001c84:	2320      	movs	r3, #32
 8001c86:	e004      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001c88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c8c:	fab3 f383 	clz	r3, r3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d105      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x278>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	0e9b      	lsrs	r3, r3, #26
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	e018      	b.n	8001cde <HAL_ADC_ConfigChannel+0x2aa>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001cb8:	fa93 f3a3 	rbit	r3, r3
 8001cbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001cc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001cc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001cc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	e004      	b.n	8001cde <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001cd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cd8:	fab3 f383 	clz	r3, r3
 8001cdc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d106      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2101      	movs	r1, #1
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fa44 	bl	8001178 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2102      	movs	r1, #2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fa28 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10a      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x2e8>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2102      	movs	r1, #2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fa1d 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001d12:	4603      	mov	r3, r0
 8001d14:	0e9b      	lsrs	r3, r3, #26
 8001d16:	f003 021f 	and.w	r2, r3, #31
 8001d1a:	e01e      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x326>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2102      	movs	r1, #2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fa12 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d32:	fa93 f3a3 	rbit	r3, r3
 8001d36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001d3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001d42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001d4a:	2320      	movs	r3, #32
 8001d4c:	e004      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001d4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d52:	fab3 f383 	clz	r3, r3
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d105      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x33e>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	0e9b      	lsrs	r3, r3, #26
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	e016      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x36c>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d7e:	fa93 f3a3 	rbit	r3, r3
 8001d82:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001d92:	2320      	movs	r3, #32
 8001d94:	e004      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001d96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d106      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2200      	movs	r2, #0
 8001daa:	2102      	movs	r1, #2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff f9e3 	bl	8001178 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2103      	movs	r1, #3
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff f9c7 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10a      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x3aa>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2103      	movs	r1, #3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff f9bc 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	0e9b      	lsrs	r3, r3, #26
 8001dd8:	f003 021f 	and.w	r2, r3, #31
 8001ddc:	e017      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x3da>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2103      	movs	r1, #3
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff f9b1 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001dea:	4603      	mov	r3, r0
 8001dec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001df6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001df8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001dfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001e00:	2320      	movs	r3, #32
 8001e02:	e003      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d105      	bne.n	8001e26 <HAL_ADC_ConfigChannel+0x3f2>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	0e9b      	lsrs	r3, r3, #26
 8001e20:	f003 031f 	and.w	r3, r3, #31
 8001e24:	e011      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x416>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e36:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001e3e:	2320      	movs	r3, #32
 8001e40:	e003      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e44:	fab3 f383 	clz	r3, r3
 8001e48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d106      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2200      	movs	r2, #0
 8001e54:	2103      	movs	r1, #3
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff f98e 	bl	8001178 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff faeb 	bl	800143c <LL_ADC_IsEnabled>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f040 813d 	bne.w	80020e8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	6819      	ldr	r1, [r3, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	f7ff fa4a 	bl	8001314 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4aa2      	ldr	r2, [pc, #648]	; (8002110 <HAL_ADC_ConfigChannel+0x6dc>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	f040 812e 	bne.w	80020e8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10b      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x480>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	0e9b      	lsrs	r3, r3, #26
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	2b09      	cmp	r3, #9
 8001eaa:	bf94      	ite	ls
 8001eac:	2301      	movls	r3, #1
 8001eae:	2300      	movhi	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	e019      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x4b4>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ebc:	fa93 f3a3 	rbit	r3, r3
 8001ec0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001ec2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ec4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001ec6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001ecc:	2320      	movs	r3, #32
 8001ece:	e003      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001ed0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ed2:	fab3 f383 	clz	r3, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	3301      	adds	r3, #1
 8001eda:	f003 031f 	and.w	r3, r3, #31
 8001ede:	2b09      	cmp	r3, #9
 8001ee0:	bf94      	ite	ls
 8001ee2:	2301      	movls	r3, #1
 8001ee4:	2300      	movhi	r3, #0
 8001ee6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d079      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d107      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x4d4>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	0e9b      	lsrs	r3, r3, #26
 8001efe:	3301      	adds	r3, #1
 8001f00:	069b      	lsls	r3, r3, #26
 8001f02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f06:	e015      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x500>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f10:	fa93 f3a3 	rbit	r3, r3
 8001f14:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f18:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001f20:	2320      	movs	r3, #32
 8001f22:	e003      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f26:	fab3 f383 	clz	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	069b      	lsls	r3, r3, #26
 8001f30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d109      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x520>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	0e9b      	lsrs	r3, r3, #26
 8001f46:	3301      	adds	r3, #1
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f52:	e017      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x550>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f5c:	fa93 f3a3 	rbit	r3, r3
 8001f60:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f64:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001f6c:	2320      	movs	r3, #32
 8001f6e:	e003      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f72:	fab3 f383 	clz	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	3301      	adds	r3, #1
 8001f7a:	f003 031f 	and.w	r3, r3, #31
 8001f7e:	2101      	movs	r1, #1
 8001f80:	fa01 f303 	lsl.w	r3, r1, r3
 8001f84:	ea42 0103 	orr.w	r1, r2, r3
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10a      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x576>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	0e9b      	lsrs	r3, r3, #26
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	f003 021f 	and.w	r2, r3, #31
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	051b      	lsls	r3, r3, #20
 8001fa8:	e018      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x5a8>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb2:	fa93 f3a3 	rbit	r3, r3
 8001fb6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001fc2:	2320      	movs	r3, #32
 8001fc4:	e003      	b.n	8001fce <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fc8:	fab3 f383 	clz	r3, r3
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	3301      	adds	r3, #1
 8001fd0:	f003 021f 	and.w	r2, r3, #31
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	e07e      	b.n	80020de <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d107      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x5c8>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	0e9b      	lsrs	r3, r3, #26
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	069b      	lsls	r3, r3, #26
 8001ff6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ffa:	e015      	b.n	8002028 <HAL_ADC_ConfigChannel+0x5f4>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800200a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800200e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002014:	2320      	movs	r3, #32
 8002016:	e003      	b.n	8002020 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	3301      	adds	r3, #1
 8002022:	069b      	lsls	r3, r3, #26
 8002024:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002030:	2b00      	cmp	r3, #0
 8002032:	d109      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x614>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	0e9b      	lsrs	r3, r3, #26
 800203a:	3301      	adds	r3, #1
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	2101      	movs	r1, #1
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	e017      	b.n	8002078 <HAL_ADC_ConfigChannel+0x644>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	fa93 f3a3 	rbit	r3, r3
 8002054:	61fb      	str	r3, [r7, #28]
  return result;
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002060:	2320      	movs	r3, #32
 8002062:	e003      	b.n	800206c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	fab3 f383 	clz	r3, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	3301      	adds	r3, #1
 800206e:	f003 031f 	and.w	r3, r3, #31
 8002072:	2101      	movs	r1, #1
 8002074:	fa01 f303 	lsl.w	r3, r1, r3
 8002078:	ea42 0103 	orr.w	r1, r2, r3
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10d      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x670>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	0e9b      	lsrs	r3, r3, #26
 800208e:	3301      	adds	r3, #1
 8002090:	f003 021f 	and.w	r2, r3, #31
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	3b1e      	subs	r3, #30
 800209c:	051b      	lsls	r3, r3, #20
 800209e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020a2:	e01b      	b.n	80020dc <HAL_ADC_ConfigChannel+0x6a8>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	613b      	str	r3, [r7, #16]
  return result;
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80020bc:	2320      	movs	r3, #32
 80020be:	e003      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	3301      	adds	r3, #1
 80020ca:	f003 021f 	and.w	r2, r3, #31
 80020ce:	4613      	mov	r3, r2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	4413      	add	r3, r2
 80020d4:	3b1e      	subs	r3, #30
 80020d6:	051b      	lsls	r3, r3, #20
 80020d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020dc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020e2:	4619      	mov	r1, r3
 80020e4:	f7ff f8eb 	bl	80012be <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_ADC_ConfigChannel+0x6e0>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80be 	beq.w	8002272 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020fe:	d004      	beq.n	800210a <HAL_ADC_ConfigChannel+0x6d6>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a04      	ldr	r2, [pc, #16]	; (8002118 <HAL_ADC_ConfigChannel+0x6e4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d10a      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x6ec>
 800210a:	4b04      	ldr	r3, [pc, #16]	; (800211c <HAL_ADC_ConfigChannel+0x6e8>)
 800210c:	e009      	b.n	8002122 <HAL_ADC_ConfigChannel+0x6ee>
 800210e:	bf00      	nop
 8002110:	407f0000 	.word	0x407f0000
 8002114:	80080000 	.word	0x80080000
 8002118:	50000100 	.word	0x50000100
 800211c:	50000300 	.word	0x50000300
 8002120:	4b59      	ldr	r3, [pc, #356]	; (8002288 <HAL_ADC_ConfigChannel+0x854>)
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe ffe0 	bl	80010e8 <LL_ADC_GetCommonPathInternalCh>
 8002128:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a56      	ldr	r2, [pc, #344]	; (800228c <HAL_ADC_ConfigChannel+0x858>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d004      	beq.n	8002140 <HAL_ADC_ConfigChannel+0x70c>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a55      	ldr	r2, [pc, #340]	; (8002290 <HAL_ADC_ConfigChannel+0x85c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d13a      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002140:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002144:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d134      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002154:	d005      	beq.n	8002162 <HAL_ADC_ConfigChannel+0x72e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a4e      	ldr	r2, [pc, #312]	; (8002294 <HAL_ADC_ConfigChannel+0x860>)
 800215c:	4293      	cmp	r3, r2
 800215e:	f040 8085 	bne.w	800226c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800216a:	d004      	beq.n	8002176 <HAL_ADC_ConfigChannel+0x742>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a49      	ldr	r2, [pc, #292]	; (8002298 <HAL_ADC_ConfigChannel+0x864>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d101      	bne.n	800217a <HAL_ADC_ConfigChannel+0x746>
 8002176:	4a49      	ldr	r2, [pc, #292]	; (800229c <HAL_ADC_ConfigChannel+0x868>)
 8002178:	e000      	b.n	800217c <HAL_ADC_ConfigChannel+0x748>
 800217a:	4a43      	ldr	r2, [pc, #268]	; (8002288 <HAL_ADC_ConfigChannel+0x854>)
 800217c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002180:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002184:	4619      	mov	r1, r3
 8002186:	4610      	mov	r0, r2
 8002188:	f7fe ff9b 	bl	80010c2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800218c:	4b44      	ldr	r3, [pc, #272]	; (80022a0 <HAL_ADC_ConfigChannel+0x86c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	099b      	lsrs	r3, r3, #6
 8002192:	4a44      	ldr	r2, [pc, #272]	; (80022a4 <HAL_ADC_ConfigChannel+0x870>)
 8002194:	fba2 2303 	umull	r2, r3, r2, r3
 8002198:	099b      	lsrs	r3, r3, #6
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	4613      	mov	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021a6:	e002      	b.n	80021ae <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f9      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021b4:	e05a      	b.n	800226c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a3b      	ldr	r2, [pc, #236]	; (80022a8 <HAL_ADC_ConfigChannel+0x874>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d125      	bne.n	800220c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d11f      	bne.n	800220c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a31      	ldr	r2, [pc, #196]	; (8002298 <HAL_ADC_ConfigChannel+0x864>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d104      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x7ac>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a34      	ldr	r2, [pc, #208]	; (80022ac <HAL_ADC_ConfigChannel+0x878>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d047      	beq.n	8002270 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021e8:	d004      	beq.n	80021f4 <HAL_ADC_ConfigChannel+0x7c0>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a2a      	ldr	r2, [pc, #168]	; (8002298 <HAL_ADC_ConfigChannel+0x864>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d101      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x7c4>
 80021f4:	4a29      	ldr	r2, [pc, #164]	; (800229c <HAL_ADC_ConfigChannel+0x868>)
 80021f6:	e000      	b.n	80021fa <HAL_ADC_ConfigChannel+0x7c6>
 80021f8:	4a23      	ldr	r2, [pc, #140]	; (8002288 <HAL_ADC_ConfigChannel+0x854>)
 80021fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002202:	4619      	mov	r1, r3
 8002204:	4610      	mov	r0, r2
 8002206:	f7fe ff5c 	bl	80010c2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800220a:	e031      	b.n	8002270 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a27      	ldr	r2, [pc, #156]	; (80022b0 <HAL_ADC_ConfigChannel+0x87c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d12d      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002216:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800221a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d127      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a1c      	ldr	r2, [pc, #112]	; (8002298 <HAL_ADC_ConfigChannel+0x864>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d022      	beq.n	8002272 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002234:	d004      	beq.n	8002240 <HAL_ADC_ConfigChannel+0x80c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a17      	ldr	r2, [pc, #92]	; (8002298 <HAL_ADC_ConfigChannel+0x864>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d101      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x810>
 8002240:	4a16      	ldr	r2, [pc, #88]	; (800229c <HAL_ADC_ConfigChannel+0x868>)
 8002242:	e000      	b.n	8002246 <HAL_ADC_ConfigChannel+0x812>
 8002244:	4a10      	ldr	r2, [pc, #64]	; (8002288 <HAL_ADC_ConfigChannel+0x854>)
 8002246:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800224a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800224e:	4619      	mov	r1, r3
 8002250:	4610      	mov	r0, r2
 8002252:	f7fe ff36 	bl	80010c2 <LL_ADC_SetCommonPathInternalCh>
 8002256:	e00c      	b.n	8002272 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225c:	f043 0220 	orr.w	r2, r3, #32
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800226a:	e002      	b.n	8002272 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800226c:	bf00      	nop
 800226e:	e000      	b.n	8002272 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002270:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800227a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800227e:	4618      	mov	r0, r3
 8002280:	37d8      	adds	r7, #216	; 0xd8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	50000700 	.word	0x50000700
 800228c:	c3210000 	.word	0xc3210000
 8002290:	90c00010 	.word	0x90c00010
 8002294:	50000600 	.word	0x50000600
 8002298:	50000100 	.word	0x50000100
 800229c:	50000300 	.word	0x50000300
 80022a0:	20000004 	.word	0x20000004
 80022a4:	053e2d63 	.word	0x053e2d63
 80022a8:	c7520000 	.word	0xc7520000
 80022ac:	50000500 	.word	0x50000500
 80022b0:	cb840000 	.word	0xcb840000

080022b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80022bc:	2300      	movs	r3, #0
 80022be:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff f8b9 	bl	800143c <LL_ADC_IsEnabled>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d176      	bne.n	80023be <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	4b3c      	ldr	r3, [pc, #240]	; (80023c8 <ADC_Enable+0x114>)
 80022d8:	4013      	ands	r3, r2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00d      	beq.n	80022fa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e2:	f043 0210 	orr.w	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ee:	f043 0201 	orr.w	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e062      	b.n	80023c0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff f888 	bl	8001414 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800230c:	d004      	beq.n	8002318 <ADC_Enable+0x64>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a2e      	ldr	r2, [pc, #184]	; (80023cc <ADC_Enable+0x118>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d101      	bne.n	800231c <ADC_Enable+0x68>
 8002318:	4b2d      	ldr	r3, [pc, #180]	; (80023d0 <ADC_Enable+0x11c>)
 800231a:	e000      	b.n	800231e <ADC_Enable+0x6a>
 800231c:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <ADC_Enable+0x120>)
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe fee2 	bl	80010e8 <LL_ADC_GetCommonPathInternalCh>
 8002324:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002326:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800232a:	2b00      	cmp	r3, #0
 800232c:	d013      	beq.n	8002356 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800232e:	4b2a      	ldr	r3, [pc, #168]	; (80023d8 <ADC_Enable+0x124>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	099b      	lsrs	r3, r3, #6
 8002334:	4a29      	ldr	r2, [pc, #164]	; (80023dc <ADC_Enable+0x128>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	099b      	lsrs	r3, r3, #6
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	4613      	mov	r3, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002348:	e002      	b.n	8002350 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	3b01      	subs	r3, #1
 800234e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f9      	bne.n	800234a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002356:	f7fe fe73 	bl	8001040 <HAL_GetTick>
 800235a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800235c:	e028      	b.n	80023b0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff f86a 	bl	800143c <LL_ADC_IsEnabled>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d104      	bne.n	8002378 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff f84e 	bl	8001414 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002378:	f7fe fe62 	bl	8001040 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d914      	bls.n	80023b0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b01      	cmp	r3, #1
 8002392:	d00d      	beq.n	80023b0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002398:	f043 0210 	orr.w	r2, r3, #16
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a4:	f043 0201 	orr.w	r2, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e007      	b.n	80023c0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d1cf      	bne.n	800235e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	8000003f 	.word	0x8000003f
 80023cc:	50000100 	.word	0x50000100
 80023d0:	50000300 	.word	0x50000300
 80023d4:	50000700 	.word	0x50000700
 80023d8:	20000004 	.word	0x20000004
 80023dc:	053e2d63 	.word	0x053e2d63

080023e0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d14b      	bne.n	8002492 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d021      	beq.n	8002458 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe ff11 	bl	8001240 <LL_ADC_REG_IsTriggerSourceSWStart>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d032      	beq.n	800248a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d12b      	bne.n	800248a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002436:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002442:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d11f      	bne.n	800248a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244e:	f043 0201 	orr.w	r2, r3, #1
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	65da      	str	r2, [r3, #92]	; 0x5c
 8002456:	e018      	b.n	800248a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d111      	bne.n	800248a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d105      	bne.n	800248a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002482:	f043 0201 	orr.w	r2, r3, #1
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f7ff fab4 	bl	80019f8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002490:	e00e      	b.n	80024b0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f7ff fabe 	bl	8001a20 <HAL_ADC_ErrorCallback>
}
 80024a4:	e004      	b.n	80024b0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	4798      	blx	r3
}
 80024b0:	bf00      	nop
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f7ff faa0 	bl	8001a0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f2:	f043 0204 	orr.w	r2, r3, #4
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f7ff fa90 	bl	8001a20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002500:	bf00      	nop
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <LL_ADC_IsEnabled>:
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <LL_ADC_IsEnabled+0x18>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <LL_ADC_IsEnabled+0x1a>
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <LL_ADC_REG_IsConversionOngoing>:
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b04      	cmp	r3, #4
 8002540:	d101      	bne.n	8002546 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b0a1      	sub	sp, #132	; 0x84
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800256e:	2302      	movs	r3, #2
 8002570:	e0e7      	b.n	8002742 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800257a:	2300      	movs	r3, #0
 800257c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800257e:	2300      	movs	r3, #0
 8002580:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800258a:	d102      	bne.n	8002592 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800258c:	4b6f      	ldr	r3, [pc, #444]	; (800274c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	e009      	b.n	80025a6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a6e      	ldr	r2, [pc, #440]	; (8002750 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d102      	bne.n	80025a2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800259c:	4b6d      	ldr	r3, [pc, #436]	; (8002754 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	e001      	b.n	80025a6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10b      	bne.n	80025c4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b0:	f043 0220 	orr.w	r2, r3, #32
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0be      	b.n	8002742 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff ffb1 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 80025cc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff ffab 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f040 80a0 	bne.w	8002720 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80025e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f040 809c 	bne.w	8002720 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025f0:	d004      	beq.n	80025fc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a55      	ldr	r2, [pc, #340]	; (800274c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d101      	bne.n	8002600 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80025fc:	4b56      	ldr	r3, [pc, #344]	; (8002758 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80025fe:	e000      	b.n	8002602 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002600:	4b56      	ldr	r3, [pc, #344]	; (800275c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002602:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d04b      	beq.n	80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800260c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	6859      	ldr	r1, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800261e:	035b      	lsls	r3, r3, #13
 8002620:	430b      	orrs	r3, r1
 8002622:	431a      	orrs	r2, r3
 8002624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002626:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002630:	d004      	beq.n	800263c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a45      	ldr	r2, [pc, #276]	; (800274c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d10f      	bne.n	800265c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800263c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002640:	f7ff ff62 	bl	8002508 <LL_ADC_IsEnabled>
 8002644:	4604      	mov	r4, r0
 8002646:	4841      	ldr	r0, [pc, #260]	; (800274c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002648:	f7ff ff5e 	bl	8002508 <LL_ADC_IsEnabled>
 800264c:	4603      	mov	r3, r0
 800264e:	4323      	orrs	r3, r4
 8002650:	2b00      	cmp	r3, #0
 8002652:	bf0c      	ite	eq
 8002654:	2301      	moveq	r3, #1
 8002656:	2300      	movne	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	e012      	b.n	8002682 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800265c:	483c      	ldr	r0, [pc, #240]	; (8002750 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800265e:	f7ff ff53 	bl	8002508 <LL_ADC_IsEnabled>
 8002662:	4604      	mov	r4, r0
 8002664:	483b      	ldr	r0, [pc, #236]	; (8002754 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002666:	f7ff ff4f 	bl	8002508 <LL_ADC_IsEnabled>
 800266a:	4603      	mov	r3, r0
 800266c:	431c      	orrs	r4, r3
 800266e:	483c      	ldr	r0, [pc, #240]	; (8002760 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002670:	f7ff ff4a 	bl	8002508 <LL_ADC_IsEnabled>
 8002674:	4603      	mov	r3, r0
 8002676:	4323      	orrs	r3, r4
 8002678:	2b00      	cmp	r3, #0
 800267a:	bf0c      	ite	eq
 800267c:	2301      	moveq	r3, #1
 800267e:	2300      	movne	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d056      	beq.n	8002734 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800268e:	f023 030f 	bic.w	r3, r3, #15
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	6811      	ldr	r1, [r2, #0]
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	6892      	ldr	r2, [r2, #8]
 800269a:	430a      	orrs	r2, r1
 800269c:	431a      	orrs	r2, r3
 800269e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026a0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80026a2:	e047      	b.n	8002734 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80026a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026ae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026b8:	d004      	beq.n	80026c4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a23      	ldr	r2, [pc, #140]	; (800274c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d10f      	bne.n	80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80026c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80026c8:	f7ff ff1e 	bl	8002508 <LL_ADC_IsEnabled>
 80026cc:	4604      	mov	r4, r0
 80026ce:	481f      	ldr	r0, [pc, #124]	; (800274c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80026d0:	f7ff ff1a 	bl	8002508 <LL_ADC_IsEnabled>
 80026d4:	4603      	mov	r3, r0
 80026d6:	4323      	orrs	r3, r4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	bf0c      	ite	eq
 80026dc:	2301      	moveq	r3, #1
 80026de:	2300      	movne	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	e012      	b.n	800270a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80026e4:	481a      	ldr	r0, [pc, #104]	; (8002750 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80026e6:	f7ff ff0f 	bl	8002508 <LL_ADC_IsEnabled>
 80026ea:	4604      	mov	r4, r0
 80026ec:	4819      	ldr	r0, [pc, #100]	; (8002754 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80026ee:	f7ff ff0b 	bl	8002508 <LL_ADC_IsEnabled>
 80026f2:	4603      	mov	r3, r0
 80026f4:	431c      	orrs	r4, r3
 80026f6:	481a      	ldr	r0, [pc, #104]	; (8002760 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80026f8:	f7ff ff06 	bl	8002508 <LL_ADC_IsEnabled>
 80026fc:	4603      	mov	r3, r0
 80026fe:	4323      	orrs	r3, r4
 8002700:	2b00      	cmp	r3, #0
 8002702:	bf0c      	ite	eq
 8002704:	2301      	moveq	r3, #1
 8002706:	2300      	movne	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d012      	beq.n	8002734 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800270e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002716:	f023 030f 	bic.w	r3, r3, #15
 800271a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800271c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800271e:	e009      	b.n	8002734 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002724:	f043 0220 	orr.w	r2, r3, #32
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002732:	e000      	b.n	8002736 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002734:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800273e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002742:	4618      	mov	r0, r3
 8002744:	3784      	adds	r7, #132	; 0x84
 8002746:	46bd      	mov	sp, r7
 8002748:	bd90      	pop	{r4, r7, pc}
 800274a:	bf00      	nop
 800274c:	50000100 	.word	0x50000100
 8002750:	50000400 	.word	0x50000400
 8002754:	50000500 	.word	0x50000500
 8002758:	50000300 	.word	0x50000300
 800275c:	50000700 	.word	0x50000700
 8002760:	50000600 	.word	0x50000600

08002764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002774:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002780:	4013      	ands	r3, r2
 8002782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800278c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002796:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	60d3      	str	r3, [r2, #12]
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b0:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <__NVIC_GetPriorityGrouping+0x18>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	0a1b      	lsrs	r3, r3, #8
 80027b6:	f003 0307 	and.w	r3, r3, #7
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	db0b      	blt.n	80027f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	f003 021f 	and.w	r2, r3, #31
 80027e0:	4907      	ldr	r1, [pc, #28]	; (8002800 <__NVIC_EnableIRQ+0x38>)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	2001      	movs	r0, #1
 80027ea:	fa00 f202 	lsl.w	r2, r0, r2
 80027ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000e100 	.word	0xe000e100

08002804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	6039      	str	r1, [r7, #0]
 800280e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002814:	2b00      	cmp	r3, #0
 8002816:	db0a      	blt.n	800282e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	b2da      	uxtb	r2, r3
 800281c:	490c      	ldr	r1, [pc, #48]	; (8002850 <__NVIC_SetPriority+0x4c>)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	0112      	lsls	r2, r2, #4
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	440b      	add	r3, r1
 8002828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800282c:	e00a      	b.n	8002844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	4908      	ldr	r1, [pc, #32]	; (8002854 <__NVIC_SetPriority+0x50>)
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	3b04      	subs	r3, #4
 800283c:	0112      	lsls	r2, r2, #4
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	440b      	add	r3, r1
 8002842:	761a      	strb	r2, [r3, #24]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000e100 	.word	0xe000e100
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002858:	b480      	push	{r7}
 800285a:	b089      	sub	sp, #36	; 0x24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f1c3 0307 	rsb	r3, r3, #7
 8002872:	2b04      	cmp	r3, #4
 8002874:	bf28      	it	cs
 8002876:	2304      	movcs	r3, #4
 8002878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3304      	adds	r3, #4
 800287e:	2b06      	cmp	r3, #6
 8002880:	d902      	bls.n	8002888 <NVIC_EncodePriority+0x30>
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	3b03      	subs	r3, #3
 8002886:	e000      	b.n	800288a <NVIC_EncodePriority+0x32>
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800288c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43da      	mvns	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	401a      	ands	r2, r3
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	fa01 f303 	lsl.w	r3, r1, r3
 80028aa:	43d9      	mvns	r1, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b0:	4313      	orrs	r3, r2
         );
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3724      	adds	r7, #36	; 0x24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028d0:	d301      	bcc.n	80028d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028d2:	2301      	movs	r3, #1
 80028d4:	e00f      	b.n	80028f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d6:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <SysTick_Config+0x40>)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3b01      	subs	r3, #1
 80028dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028de:	210f      	movs	r1, #15
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028e4:	f7ff ff8e 	bl	8002804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <SysTick_Config+0x40>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ee:	4b04      	ldr	r3, [pc, #16]	; (8002900 <SysTick_Config+0x40>)
 80028f0:	2207      	movs	r2, #7
 80028f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	e000e010 	.word	0xe000e010

08002904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff ff29 	bl	8002764 <__NVIC_SetPriorityGrouping>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002928:	f7ff ff40 	bl	80027ac <__NVIC_GetPriorityGrouping>
 800292c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	6978      	ldr	r0, [r7, #20]
 8002934:	f7ff ff90 	bl	8002858 <NVIC_EncodePriority>
 8002938:	4602      	mov	r2, r0
 800293a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff5f 	bl	8002804 <__NVIC_SetPriority>
}
 8002946:	bf00      	nop
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff33 	bl	80027c8 <__NVIC_EnableIRQ>
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff ffa4 	bl	80028c0 <SysTick_Config>
 8002978:	4603      	mov	r3, r0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e08d      	b.n	8002ab2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	4b47      	ldr	r3, [pc, #284]	; (8002abc <HAL_DMA_Init+0x138>)
 800299e:	429a      	cmp	r2, r3
 80029a0:	d80f      	bhi.n	80029c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	4b45      	ldr	r3, [pc, #276]	; (8002ac0 <HAL_DMA_Init+0x13c>)
 80029aa:	4413      	add	r3, r2
 80029ac:	4a45      	ldr	r2, [pc, #276]	; (8002ac4 <HAL_DMA_Init+0x140>)
 80029ae:	fba2 2303 	umull	r2, r3, r2, r3
 80029b2:	091b      	lsrs	r3, r3, #4
 80029b4:	009a      	lsls	r2, r3, #2
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a42      	ldr	r2, [pc, #264]	; (8002ac8 <HAL_DMA_Init+0x144>)
 80029be:	641a      	str	r2, [r3, #64]	; 0x40
 80029c0:	e00e      	b.n	80029e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	461a      	mov	r2, r3
 80029c8:	4b40      	ldr	r3, [pc, #256]	; (8002acc <HAL_DMA_Init+0x148>)
 80029ca:	4413      	add	r3, r2
 80029cc:	4a3d      	ldr	r2, [pc, #244]	; (8002ac4 <HAL_DMA_Init+0x140>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	091b      	lsrs	r3, r3, #4
 80029d4:	009a      	lsls	r2, r3, #2
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a3c      	ldr	r2, [pc, #240]	; (8002ad0 <HAL_DMA_Init+0x14c>)
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80029f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f9b6 	bl	8002da4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a40:	d102      	bne.n	8002a48 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a5c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d010      	beq.n	8002a88 <HAL_DMA_Init+0x104>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d80c      	bhi.n	8002a88 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f9d6 	bl	8002e20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	e008      	b.n	8002a9a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40020407 	.word	0x40020407
 8002ac0:	bffdfff8 	.word	0xbffdfff8
 8002ac4:	cccccccd 	.word	0xcccccccd
 8002ac8:	40020000 	.word	0x40020000
 8002acc:	bffdfbf8 	.word	0xbffdfbf8
 8002ad0:	40020400 	.word	0x40020400

08002ad4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
 8002ae0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_DMA_Start_IT+0x20>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e066      	b.n	8002bc2 <HAL_DMA_Start_IT+0xee>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d155      	bne.n	8002bb4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0201 	bic.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f8fb 	bl	8002d28 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d008      	beq.n	8002b4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 020e 	orr.w	r2, r2, #14
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	e00f      	b.n	8002b6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0204 	bic.w	r2, r2, #4
 8002b5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 020a 	orr.w	r2, r2, #10
 8002b6a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b88:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d007      	beq.n	8002ba2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ba0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0201 	orr.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	e005      	b.n	8002bc0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b084      	sub	sp, #16
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	2204      	movs	r2, #4
 8002bec:	409a      	lsls	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d026      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x7a>
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d021      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d107      	bne.n	8002c1e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0204 	bic.w	r2, r2, #4
 8002c1c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f003 021f 	and.w	r2, r3, #31
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	2104      	movs	r1, #4
 8002c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c30:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d071      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c42:	e06c      	b.n	8002d1e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c48:	f003 031f 	and.w	r3, r3, #31
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d02e      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d029      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10b      	bne.n	8002c88 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 020a 	bic.w	r2, r2, #10
 8002c7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8c:	f003 021f 	and.w	r2, r3, #31
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	2102      	movs	r1, #2
 8002c96:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d038      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002cb4:	e033      	b.n	8002d1e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	f003 031f 	and.w	r3, r3, #31
 8002cbe:	2208      	movs	r2, #8
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d02a      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d025      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 020e 	bic.w	r2, r2, #14
 8002ce2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce8:	f003 021f 	and.w	r2, r3, #31
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d004      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d1e:	bf00      	nop
 8002d20:	bf00      	nop
}
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d3e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d004      	beq.n	8002d52 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d50:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	f003 021f 	and.w	r2, r3, #31
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	2101      	movs	r1, #1
 8002d60:	fa01 f202 	lsl.w	r2, r1, r2
 8002d64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b10      	cmp	r3, #16
 8002d74:	d108      	bne.n	8002d88 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d86:	e007      	b.n	8002d98 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	60da      	str	r2, [r3, #12]
}
 8002d98:	bf00      	nop
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d802      	bhi.n	8002dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002db8:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	e001      	b.n	8002dc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002dbe:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002dc0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	3b08      	subs	r3, #8
 8002dce:	4a12      	ldr	r2, [pc, #72]	; (8002e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ddc:	089b      	lsrs	r3, r3, #2
 8002dde:	009a      	lsls	r2, r3, #2
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4413      	add	r3, r2
 8002de4:	461a      	mov	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a0b      	ldr	r2, [pc, #44]	; (8002e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002dee:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f003 031f 	and.w	r3, r3, #31
 8002df6:	2201      	movs	r2, #1
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002dfe:	bf00      	nop
 8002e00:	371c      	adds	r7, #28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40020407 	.word	0x40020407
 8002e10:	40020800 	.word	0x40020800
 8002e14:	40020820 	.word	0x40020820
 8002e18:	cccccccd 	.word	0xcccccccd
 8002e1c:	40020880 	.word	0x40020880

08002e20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	461a      	mov	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a08      	ldr	r2, [pc, #32]	; (8002e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e42:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	f003 031f 	and.w	r3, r3, #31
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	409a      	lsls	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	1000823f 	.word	0x1000823f
 8002e64:	40020940 	.word	0x40020940

08002e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e76:	e15a      	b.n	800312e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	fa01 f303 	lsl.w	r3, r1, r3
 8002e84:	4013      	ands	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 814c 	beq.w	8003128 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d005      	beq.n	8002ea8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d130      	bne.n	8002f0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ede:	2201      	movs	r2, #1
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4013      	ands	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	091b      	lsrs	r3, r3, #4
 8002ef4:	f003 0201 	and.w	r2, r3, #1
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d017      	beq.n	8002f46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	2203      	movs	r2, #3
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d123      	bne.n	8002f9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	08da      	lsrs	r2, r3, #3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3208      	adds	r2, #8
 8002f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	220f      	movs	r2, #15
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4013      	ands	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	08da      	lsrs	r2, r3, #3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3208      	adds	r2, #8
 8002f94:	6939      	ldr	r1, [r7, #16]
 8002f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 0203 	and.w	r2, r3, #3
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 80a6 	beq.w	8003128 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fdc:	4b5b      	ldr	r3, [pc, #364]	; (800314c <HAL_GPIO_Init+0x2e4>)
 8002fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe0:	4a5a      	ldr	r2, [pc, #360]	; (800314c <HAL_GPIO_Init+0x2e4>)
 8002fe2:	f043 0301 	orr.w	r3, r3, #1
 8002fe6:	6613      	str	r3, [r2, #96]	; 0x60
 8002fe8:	4b58      	ldr	r3, [pc, #352]	; (800314c <HAL_GPIO_Init+0x2e4>)
 8002fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ff4:	4a56      	ldr	r2, [pc, #344]	; (8003150 <HAL_GPIO_Init+0x2e8>)
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	089b      	lsrs	r3, r3, #2
 8002ffa:	3302      	adds	r3, #2
 8002ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003000:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	220f      	movs	r2, #15
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800301e:	d01f      	beq.n	8003060 <HAL_GPIO_Init+0x1f8>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a4c      	ldr	r2, [pc, #304]	; (8003154 <HAL_GPIO_Init+0x2ec>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d019      	beq.n	800305c <HAL_GPIO_Init+0x1f4>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a4b      	ldr	r2, [pc, #300]	; (8003158 <HAL_GPIO_Init+0x2f0>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d013      	beq.n	8003058 <HAL_GPIO_Init+0x1f0>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a4a      	ldr	r2, [pc, #296]	; (800315c <HAL_GPIO_Init+0x2f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00d      	beq.n	8003054 <HAL_GPIO_Init+0x1ec>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a49      	ldr	r2, [pc, #292]	; (8003160 <HAL_GPIO_Init+0x2f8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d007      	beq.n	8003050 <HAL_GPIO_Init+0x1e8>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a48      	ldr	r2, [pc, #288]	; (8003164 <HAL_GPIO_Init+0x2fc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d101      	bne.n	800304c <HAL_GPIO_Init+0x1e4>
 8003048:	2305      	movs	r3, #5
 800304a:	e00a      	b.n	8003062 <HAL_GPIO_Init+0x1fa>
 800304c:	2306      	movs	r3, #6
 800304e:	e008      	b.n	8003062 <HAL_GPIO_Init+0x1fa>
 8003050:	2304      	movs	r3, #4
 8003052:	e006      	b.n	8003062 <HAL_GPIO_Init+0x1fa>
 8003054:	2303      	movs	r3, #3
 8003056:	e004      	b.n	8003062 <HAL_GPIO_Init+0x1fa>
 8003058:	2302      	movs	r3, #2
 800305a:	e002      	b.n	8003062 <HAL_GPIO_Init+0x1fa>
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <HAL_GPIO_Init+0x1fa>
 8003060:	2300      	movs	r3, #0
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	f002 0203 	and.w	r2, r2, #3
 8003068:	0092      	lsls	r2, r2, #2
 800306a:	4093      	lsls	r3, r2
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003072:	4937      	ldr	r1, [pc, #220]	; (8003150 <HAL_GPIO_Init+0x2e8>)
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	089b      	lsrs	r3, r3, #2
 8003078:	3302      	adds	r3, #2
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003080:	4b39      	ldr	r3, [pc, #228]	; (8003168 <HAL_GPIO_Init+0x300>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	43db      	mvns	r3, r3
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4013      	ands	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030a4:	4a30      	ldr	r2, [pc, #192]	; (8003168 <HAL_GPIO_Init+0x300>)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030aa:	4b2f      	ldr	r3, [pc, #188]	; (8003168 <HAL_GPIO_Init+0x300>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4013      	ands	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030ce:	4a26      	ldr	r2, [pc, #152]	; (8003168 <HAL_GPIO_Init+0x300>)
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80030d4:	4b24      	ldr	r3, [pc, #144]	; (8003168 <HAL_GPIO_Init+0x300>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	43db      	mvns	r3, r3
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030f8:	4a1b      	ldr	r2, [pc, #108]	; (8003168 <HAL_GPIO_Init+0x300>)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030fe:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <HAL_GPIO_Init+0x300>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	43db      	mvns	r3, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003122:	4a11      	ldr	r2, [pc, #68]	; (8003168 <HAL_GPIO_Init+0x300>)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	3301      	adds	r3, #1
 800312c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	fa22 f303 	lsr.w	r3, r2, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	f47f ae9d 	bne.w	8002e78 <HAL_GPIO_Init+0x10>
  }
}
 800313e:	bf00      	nop
 8003140:	bf00      	nop
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	40021000 	.word	0x40021000
 8003150:	40010000 	.word	0x40010000
 8003154:	48000400 	.word	0x48000400
 8003158:	48000800 	.word	0x48000800
 800315c:	48000c00 	.word	0x48000c00
 8003160:	48001000 	.word	0x48001000
 8003164:	48001400 	.word	0x48001400
 8003168:	40010400 	.word	0x40010400

0800316c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	807b      	strh	r3, [r7, #2]
 8003178:	4613      	mov	r3, r2
 800317a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800317c:	787b      	ldrb	r3, [r7, #1]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003188:	e002      	b.n	8003190 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800318a:	887a      	ldrh	r2, [r7, #2]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031a6:	4b08      	ldr	r3, [pc, #32]	; (80031c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031a8:	695a      	ldr	r2, [r3, #20]
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d006      	beq.n	80031c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031b2:	4a05      	ldr	r2, [pc, #20]	; (80031c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031b4:	88fb      	ldrh	r3, [r7, #6]
 80031b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 f806 	bl	80031cc <HAL_GPIO_EXTI_Callback>
  }
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40010400 	.word	0x40010400

080031cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d141      	bne.n	8003276 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031f2:	4b4b      	ldr	r3, [pc, #300]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fe:	d131      	bne.n	8003264 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003200:	4b47      	ldr	r3, [pc, #284]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003206:	4a46      	ldr	r2, [pc, #280]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800320c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003210:	4b43      	ldr	r3, [pc, #268]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003218:	4a41      	ldr	r2, [pc, #260]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800321e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003220:	4b40      	ldr	r3, [pc, #256]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2232      	movs	r2, #50	; 0x32
 8003226:	fb02 f303 	mul.w	r3, r2, r3
 800322a:	4a3f      	ldr	r2, [pc, #252]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800322c:	fba2 2303 	umull	r2, r3, r2, r3
 8003230:	0c9b      	lsrs	r3, r3, #18
 8003232:	3301      	adds	r3, #1
 8003234:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003236:	e002      	b.n	800323e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3b01      	subs	r3, #1
 800323c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800323e:	4b38      	ldr	r3, [pc, #224]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324a:	d102      	bne.n	8003252 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f2      	bne.n	8003238 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003252:	4b33      	ldr	r3, [pc, #204]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800325e:	d158      	bne.n	8003312 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e057      	b.n	8003314 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003264:	4b2e      	ldr	r3, [pc, #184]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800326a:	4a2d      	ldr	r2, [pc, #180]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003270:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003274:	e04d      	b.n	8003312 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800327c:	d141      	bne.n	8003302 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800327e:	4b28      	ldr	r3, [pc, #160]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328a:	d131      	bne.n	80032f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800328c:	4b24      	ldr	r3, [pc, #144]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800328e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003292:	4a23      	ldr	r2, [pc, #140]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003298:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800329c:	4b20      	ldr	r3, [pc, #128]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032a4:	4a1e      	ldr	r2, [pc, #120]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032ac:	4b1d      	ldr	r3, [pc, #116]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2232      	movs	r2, #50	; 0x32
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	4a1c      	ldr	r2, [pc, #112]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	0c9b      	lsrs	r3, r3, #18
 80032be:	3301      	adds	r3, #1
 80032c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032c2:	e002      	b.n	80032ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ca:	4b15      	ldr	r3, [pc, #84]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d6:	d102      	bne.n	80032de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f2      	bne.n	80032c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032de:	4b10      	ldr	r3, [pc, #64]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ea:	d112      	bne.n	8003312 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e011      	b.n	8003314 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032f6:	4a0a      	ldr	r2, [pc, #40]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003300:	e007      	b.n	8003312 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003302:	4b07      	ldr	r3, [pc, #28]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800330a:	4a05      	ldr	r2, [pc, #20]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003310:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	40007000 	.word	0x40007000
 8003324:	20000004 	.word	0x20000004
 8003328:	431bde83 	.word	0x431bde83

0800332c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003330:	4b05      	ldr	r3, [pc, #20]	; (8003348 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	4a04      	ldr	r2, [pc, #16]	; (8003348 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003336:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800333a:	6093      	str	r3, [r2, #8]
}
 800333c:	bf00      	nop
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40007000 	.word	0x40007000

0800334c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e2fe      	b.n	800395c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d075      	beq.n	8003456 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800336a:	4b97      	ldr	r3, [pc, #604]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003374:	4b94      	ldr	r3, [pc, #592]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	2b0c      	cmp	r3, #12
 8003382:	d102      	bne.n	800338a <HAL_RCC_OscConfig+0x3e>
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2b03      	cmp	r3, #3
 8003388:	d002      	beq.n	8003390 <HAL_RCC_OscConfig+0x44>
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	2b08      	cmp	r3, #8
 800338e:	d10b      	bne.n	80033a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	4b8d      	ldr	r3, [pc, #564]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d05b      	beq.n	8003454 <HAL_RCC_OscConfig+0x108>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d157      	bne.n	8003454 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e2d9      	b.n	800395c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b0:	d106      	bne.n	80033c0 <HAL_RCC_OscConfig+0x74>
 80033b2:	4b85      	ldr	r3, [pc, #532]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a84      	ldr	r2, [pc, #528]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e01d      	b.n	80033fc <HAL_RCC_OscConfig+0xb0>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x98>
 80033ca:	4b7f      	ldr	r3, [pc, #508]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a7e      	ldr	r2, [pc, #504]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 80033d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	4b7c      	ldr	r3, [pc, #496]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a7b      	ldr	r2, [pc, #492]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e00b      	b.n	80033fc <HAL_RCC_OscConfig+0xb0>
 80033e4:	4b78      	ldr	r3, [pc, #480]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a77      	ldr	r2, [pc, #476]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 80033ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	4b75      	ldr	r3, [pc, #468]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a74      	ldr	r2, [pc, #464]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 80033f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d013      	beq.n	800342c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fd fe1c 	bl	8001040 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800340c:	f7fd fe18 	bl	8001040 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	; 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e29e      	b.n	800395c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800341e:	4b6a      	ldr	r3, [pc, #424]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0xc0>
 800342a:	e014      	b.n	8003456 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342c:	f7fd fe08 	bl	8001040 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003434:	f7fd fe04 	bl	8001040 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e28a      	b.n	800395c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003446:	4b60      	ldr	r3, [pc, #384]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0xe8>
 8003452:	e000      	b.n	8003456 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d075      	beq.n	800354e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003462:	4b59      	ldr	r3, [pc, #356]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800346c:	4b56      	ldr	r3, [pc, #344]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	2b0c      	cmp	r3, #12
 800347a:	d102      	bne.n	8003482 <HAL_RCC_OscConfig+0x136>
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d002      	beq.n	8003488 <HAL_RCC_OscConfig+0x13c>
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2b04      	cmp	r3, #4
 8003486:	d11f      	bne.n	80034c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003488:	4b4f      	ldr	r3, [pc, #316]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_RCC_OscConfig+0x154>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e25d      	b.n	800395c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a0:	4b49      	ldr	r3, [pc, #292]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	061b      	lsls	r3, r3, #24
 80034ae:	4946      	ldr	r1, [pc, #280]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034b4:	4b45      	ldr	r3, [pc, #276]	; (80035cc <HAL_RCC_OscConfig+0x280>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fd fd75 	bl	8000fa8 <HAL_InitTick>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d043      	beq.n	800354c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e249      	b.n	800395c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d023      	beq.n	8003518 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d0:	4b3d      	ldr	r3, [pc, #244]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a3c      	ldr	r2, [pc, #240]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 80034d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034dc:	f7fd fdb0 	bl	8001040 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e4:	f7fd fdac 	bl	8001040 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e232      	b.n	800395c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034f6:	4b34      	ldr	r3, [pc, #208]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003502:	4b31      	ldr	r3, [pc, #196]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	061b      	lsls	r3, r3, #24
 8003510:	492d      	ldr	r1, [pc, #180]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 8003512:	4313      	orrs	r3, r2
 8003514:	604b      	str	r3, [r1, #4]
 8003516:	e01a      	b.n	800354e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003518:	4b2b      	ldr	r3, [pc, #172]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a2a      	ldr	r2, [pc, #168]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 800351e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003524:	f7fd fd8c 	bl	8001040 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800352c:	f7fd fd88 	bl	8001040 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e20e      	b.n	800395c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800353e:	4b22      	ldr	r3, [pc, #136]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f0      	bne.n	800352c <HAL_RCC_OscConfig+0x1e0>
 800354a:	e000      	b.n	800354e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800354c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d041      	beq.n	80035de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d01c      	beq.n	800359c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003562:	4b19      	ldr	r3, [pc, #100]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 8003564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003568:	4a17      	ldr	r2, [pc, #92]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003572:	f7fd fd65 	bl	8001040 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800357a:	f7fd fd61 	bl	8001040 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e1e7      	b.n	800395c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800358c:	4b0e      	ldr	r3, [pc, #56]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 800358e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0ef      	beq.n	800357a <HAL_RCC_OscConfig+0x22e>
 800359a:	e020      	b.n	80035de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800359c:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 800359e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a2:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ac:	f7fd fd48 	bl	8001040 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035b2:	e00d      	b.n	80035d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b4:	f7fd fd44 	bl	8001040 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d906      	bls.n	80035d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e1ca      	b.n	800395c <HAL_RCC_OscConfig+0x610>
 80035c6:	bf00      	nop
 80035c8:	40021000 	.word	0x40021000
 80035cc:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035d0:	4b8c      	ldr	r3, [pc, #560]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 80035d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1ea      	bne.n	80035b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 80a6 	beq.w	8003738 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ec:	2300      	movs	r3, #0
 80035ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035f0:	4b84      	ldr	r3, [pc, #528]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 80035f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_RCC_OscConfig+0x2b4>
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <HAL_RCC_OscConfig+0x2b6>
 8003600:	2300      	movs	r3, #0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00d      	beq.n	8003622 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003606:	4b7f      	ldr	r3, [pc, #508]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 8003608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360a:	4a7e      	ldr	r2, [pc, #504]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 800360c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003610:	6593      	str	r3, [r2, #88]	; 0x58
 8003612:	4b7c      	ldr	r3, [pc, #496]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 8003614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800361e:	2301      	movs	r3, #1
 8003620:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003622:	4b79      	ldr	r3, [pc, #484]	; (8003808 <HAL_RCC_OscConfig+0x4bc>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d118      	bne.n	8003660 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800362e:	4b76      	ldr	r3, [pc, #472]	; (8003808 <HAL_RCC_OscConfig+0x4bc>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a75      	ldr	r2, [pc, #468]	; (8003808 <HAL_RCC_OscConfig+0x4bc>)
 8003634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363a:	f7fd fd01 	bl	8001040 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003642:	f7fd fcfd 	bl	8001040 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e183      	b.n	800395c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003654:	4b6c      	ldr	r3, [pc, #432]	; (8003808 <HAL_RCC_OscConfig+0x4bc>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d108      	bne.n	800367a <HAL_RCC_OscConfig+0x32e>
 8003668:	4b66      	ldr	r3, [pc, #408]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366e:	4a65      	ldr	r2, [pc, #404]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003678:	e024      	b.n	80036c4 <HAL_RCC_OscConfig+0x378>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2b05      	cmp	r3, #5
 8003680:	d110      	bne.n	80036a4 <HAL_RCC_OscConfig+0x358>
 8003682:	4b60      	ldr	r3, [pc, #384]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003688:	4a5e      	ldr	r2, [pc, #376]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 800368a:	f043 0304 	orr.w	r3, r3, #4
 800368e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003692:	4b5c      	ldr	r3, [pc, #368]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 8003694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003698:	4a5a      	ldr	r2, [pc, #360]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036a2:	e00f      	b.n	80036c4 <HAL_RCC_OscConfig+0x378>
 80036a4:	4b57      	ldr	r3, [pc, #348]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 80036a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036aa:	4a56      	ldr	r2, [pc, #344]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 80036ac:	f023 0301 	bic.w	r3, r3, #1
 80036b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036b4:	4b53      	ldr	r3, [pc, #332]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 80036b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ba:	4a52      	ldr	r2, [pc, #328]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 80036bc:	f023 0304 	bic.w	r3, r3, #4
 80036c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d016      	beq.n	80036fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036cc:	f7fd fcb8 	bl	8001040 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036d2:	e00a      	b.n	80036ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d4:	f7fd fcb4 	bl	8001040 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e138      	b.n	800395c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ea:	4b46      	ldr	r3, [pc, #280]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 80036ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0ed      	beq.n	80036d4 <HAL_RCC_OscConfig+0x388>
 80036f8:	e015      	b.n	8003726 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fa:	f7fd fca1 	bl	8001040 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003700:	e00a      	b.n	8003718 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003702:	f7fd fc9d 	bl	8001040 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003710:	4293      	cmp	r3, r2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e121      	b.n	800395c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003718:	4b3a      	ldr	r3, [pc, #232]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1ed      	bne.n	8003702 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003726:	7ffb      	ldrb	r3, [r7, #31]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d105      	bne.n	8003738 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372c:	4b35      	ldr	r3, [pc, #212]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 800372e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003730:	4a34      	ldr	r2, [pc, #208]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 8003732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003736:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b00      	cmp	r3, #0
 8003742:	d03c      	beq.n	80037be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d01c      	beq.n	8003786 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800374c:	4b2d      	ldr	r3, [pc, #180]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 800374e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003752:	4a2c      	ldr	r2, [pc, #176]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375c:	f7fd fc70 	bl	8001040 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003764:	f7fd fc6c 	bl	8001040 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e0f2      	b.n	800395c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003776:	4b23      	ldr	r3, [pc, #140]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 8003778:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0ef      	beq.n	8003764 <HAL_RCC_OscConfig+0x418>
 8003784:	e01b      	b.n	80037be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003786:	4b1f      	ldr	r3, [pc, #124]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 8003788:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800378c:	4a1d      	ldr	r2, [pc, #116]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 800378e:	f023 0301 	bic.w	r3, r3, #1
 8003792:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003796:	f7fd fc53 	bl	8001040 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800379e:	f7fd fc4f 	bl	8001040 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e0d5      	b.n	800395c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037b0:	4b14      	ldr	r3, [pc, #80]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 80037b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1ef      	bne.n	800379e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 80c9 	beq.w	800395a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037c8:	4b0e      	ldr	r3, [pc, #56]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 030c 	and.w	r3, r3, #12
 80037d0:	2b0c      	cmp	r3, #12
 80037d2:	f000 8083 	beq.w	80038dc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d15e      	bne.n	800389c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037de:	4b09      	ldr	r3, [pc, #36]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a08      	ldr	r2, [pc, #32]	; (8003804 <HAL_RCC_OscConfig+0x4b8>)
 80037e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ea:	f7fd fc29 	bl	8001040 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f0:	e00c      	b.n	800380c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f2:	f7fd fc25 	bl	8001040 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d905      	bls.n	800380c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e0ab      	b.n	800395c <HAL_RCC_OscConfig+0x610>
 8003804:	40021000 	.word	0x40021000
 8003808:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800380c:	4b55      	ldr	r3, [pc, #340]	; (8003964 <HAL_RCC_OscConfig+0x618>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1ec      	bne.n	80037f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003818:	4b52      	ldr	r3, [pc, #328]	; (8003964 <HAL_RCC_OscConfig+0x618>)
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	4b52      	ldr	r3, [pc, #328]	; (8003968 <HAL_RCC_OscConfig+0x61c>)
 800381e:	4013      	ands	r3, r2
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6a11      	ldr	r1, [r2, #32]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003828:	3a01      	subs	r2, #1
 800382a:	0112      	lsls	r2, r2, #4
 800382c:	4311      	orrs	r1, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003832:	0212      	lsls	r2, r2, #8
 8003834:	4311      	orrs	r1, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800383a:	0852      	lsrs	r2, r2, #1
 800383c:	3a01      	subs	r2, #1
 800383e:	0552      	lsls	r2, r2, #21
 8003840:	4311      	orrs	r1, r2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003846:	0852      	lsrs	r2, r2, #1
 8003848:	3a01      	subs	r2, #1
 800384a:	0652      	lsls	r2, r2, #25
 800384c:	4311      	orrs	r1, r2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003852:	06d2      	lsls	r2, r2, #27
 8003854:	430a      	orrs	r2, r1
 8003856:	4943      	ldr	r1, [pc, #268]	; (8003964 <HAL_RCC_OscConfig+0x618>)
 8003858:	4313      	orrs	r3, r2
 800385a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800385c:	4b41      	ldr	r3, [pc, #260]	; (8003964 <HAL_RCC_OscConfig+0x618>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a40      	ldr	r2, [pc, #256]	; (8003964 <HAL_RCC_OscConfig+0x618>)
 8003862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003866:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003868:	4b3e      	ldr	r3, [pc, #248]	; (8003964 <HAL_RCC_OscConfig+0x618>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	4a3d      	ldr	r2, [pc, #244]	; (8003964 <HAL_RCC_OscConfig+0x618>)
 800386e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003872:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fd fbe4 	bl	8001040 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387c:	f7fd fbe0 	bl	8001040 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e066      	b.n	800395c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800388e:	4b35      	ldr	r3, [pc, #212]	; (8003964 <HAL_RCC_OscConfig+0x618>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0x530>
 800389a:	e05e      	b.n	800395a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389c:	4b31      	ldr	r3, [pc, #196]	; (8003964 <HAL_RCC_OscConfig+0x618>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a30      	ldr	r2, [pc, #192]	; (8003964 <HAL_RCC_OscConfig+0x618>)
 80038a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a8:	f7fd fbca 	bl	8001040 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fd fbc6 	bl	8001040 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e04c      	b.n	800395c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038c2:	4b28      	ldr	r3, [pc, #160]	; (8003964 <HAL_RCC_OscConfig+0x618>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038ce:	4b25      	ldr	r3, [pc, #148]	; (8003964 <HAL_RCC_OscConfig+0x618>)
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	4924      	ldr	r1, [pc, #144]	; (8003964 <HAL_RCC_OscConfig+0x618>)
 80038d4:	4b25      	ldr	r3, [pc, #148]	; (800396c <HAL_RCC_OscConfig+0x620>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	60cb      	str	r3, [r1, #12]
 80038da:	e03e      	b.n	800395a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e039      	b.n	800395c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80038e8:	4b1e      	ldr	r3, [pc, #120]	; (8003964 <HAL_RCC_OscConfig+0x618>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f003 0203 	and.w	r2, r3, #3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d12c      	bne.n	8003956 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	3b01      	subs	r3, #1
 8003908:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800390a:	429a      	cmp	r2, r3
 800390c:	d123      	bne.n	8003956 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800391a:	429a      	cmp	r2, r3
 800391c:	d11b      	bne.n	8003956 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800392a:	429a      	cmp	r2, r3
 800392c:	d113      	bne.n	8003956 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003938:	085b      	lsrs	r3, r3, #1
 800393a:	3b01      	subs	r3, #1
 800393c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800393e:	429a      	cmp	r2, r3
 8003940:	d109      	bne.n	8003956 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394c:	085b      	lsrs	r3, r3, #1
 800394e:	3b01      	subs	r3, #1
 8003950:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003952:	429a      	cmp	r2, r3
 8003954:	d001      	beq.n	800395a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3720      	adds	r7, #32
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40021000 	.word	0x40021000
 8003968:	019f800c 	.word	0x019f800c
 800396c:	feeefffc 	.word	0xfeeefffc

08003970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800397a:	2300      	movs	r3, #0
 800397c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e11e      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003988:	4b91      	ldr	r3, [pc, #580]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d910      	bls.n	80039b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b8e      	ldr	r3, [pc, #568]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 020f 	bic.w	r2, r3, #15
 800399e:	498c      	ldr	r1, [pc, #560]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a6:	4b8a      	ldr	r3, [pc, #552]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d001      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e106      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d073      	beq.n	8003aac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d129      	bne.n	8003a20 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039cc:	4b81      	ldr	r3, [pc, #516]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0f4      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80039dc:	f000 f99e 	bl	8003d1c <RCC_GetSysClockFreqFromPLLSource>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4a7c      	ldr	r2, [pc, #496]	; (8003bd8 <HAL_RCC_ClockConfig+0x268>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d93f      	bls.n	8003a6a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039ea:	4b7a      	ldr	r3, [pc, #488]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d009      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d033      	beq.n	8003a6a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d12f      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a0a:	4b72      	ldr	r3, [pc, #456]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a12:	4a70      	ldr	r2, [pc, #448]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a1a:	2380      	movs	r3, #128	; 0x80
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	e024      	b.n	8003a6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d107      	bne.n	8003a38 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a28:	4b6a      	ldr	r3, [pc, #424]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d109      	bne.n	8003a48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0c6      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a38:	4b66      	ldr	r3, [pc, #408]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0be      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a48:	f000 f8ce 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8003a4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	4a61      	ldr	r2, [pc, #388]	; (8003bd8 <HAL_RCC_ClockConfig+0x268>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d909      	bls.n	8003a6a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a56:	4b5f      	ldr	r3, [pc, #380]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a5e:	4a5d      	ldr	r2, [pc, #372]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a66:	2380      	movs	r3, #128	; 0x80
 8003a68:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a6a:	4b5a      	ldr	r3, [pc, #360]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f023 0203 	bic.w	r2, r3, #3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	4957      	ldr	r1, [pc, #348]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a7c:	f7fd fae0 	bl	8001040 <HAL_GetTick>
 8003a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a82:	e00a      	b.n	8003a9a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a84:	f7fd fadc 	bl	8001040 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e095      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9a:	4b4e      	ldr	r3, [pc, #312]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 020c 	and.w	r2, r3, #12
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d1eb      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d023      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac4:	4b43      	ldr	r3, [pc, #268]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4a42      	ldr	r2, [pc, #264]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003aca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ace:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d007      	beq.n	8003aec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003adc:	4b3d      	ldr	r3, [pc, #244]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ae4:	4a3b      	ldr	r2, [pc, #236]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003ae6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003aea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aec:	4b39      	ldr	r3, [pc, #228]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	4936      	ldr	r1, [pc, #216]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2b80      	cmp	r3, #128	; 0x80
 8003b04:	d105      	bne.n	8003b12 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b06:	4b33      	ldr	r3, [pc, #204]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	4a32      	ldr	r2, [pc, #200]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003b0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b10:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b12:	4b2f      	ldr	r3, [pc, #188]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d21d      	bcs.n	8003b5c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b20:	4b2b      	ldr	r3, [pc, #172]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f023 020f 	bic.w	r2, r3, #15
 8003b28:	4929      	ldr	r1, [pc, #164]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b30:	f7fd fa86 	bl	8001040 <HAL_GetTick>
 8003b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	e00a      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b38:	f7fd fa82 	bl	8001040 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e03b      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4e:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d1ed      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b68:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4917      	ldr	r1, [pc, #92]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d009      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b86:	4b13      	ldr	r3, [pc, #76]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	490f      	ldr	r1, [pc, #60]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b9a:	f000 f825 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	091b      	lsrs	r3, r3, #4
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	490c      	ldr	r1, [pc, #48]	; (8003bdc <HAL_RCC_ClockConfig+0x26c>)
 8003bac:	5ccb      	ldrb	r3, [r1, r3]
 8003bae:	f003 031f 	and.w	r3, r3, #31
 8003bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb6:	4a0a      	ldr	r2, [pc, #40]	; (8003be0 <HAL_RCC_ClockConfig+0x270>)
 8003bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bba:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <HAL_RCC_ClockConfig+0x274>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fd f9f2 	bl	8000fa8 <HAL_InitTick>
 8003bc4:	4603      	mov	r3, r0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40022000 	.word	0x40022000
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	04c4b400 	.word	0x04c4b400
 8003bdc:	08005b84 	.word	0x08005b84
 8003be0:	20000004 	.word	0x20000004
 8003be4:	20000008 	.word	0x20000008

08003be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003bee:	4b2c      	ldr	r3, [pc, #176]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d102      	bne.n	8003c00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bfa:	4b2a      	ldr	r3, [pc, #168]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	e047      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c00:	4b27      	ldr	r3, [pc, #156]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 030c 	and.w	r3, r3, #12
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d102      	bne.n	8003c12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c0c:	4b26      	ldr	r3, [pc, #152]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	e03e      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c12:	4b23      	ldr	r3, [pc, #140]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b0c      	cmp	r3, #12
 8003c1c:	d136      	bne.n	8003c8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c1e:	4b20      	ldr	r3, [pc, #128]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c28:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	091b      	lsrs	r3, r3, #4
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	3301      	adds	r3, #1
 8003c34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d10c      	bne.n	8003c56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c3c:	4a1a      	ldr	r2, [pc, #104]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c44:	4a16      	ldr	r2, [pc, #88]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c46:	68d2      	ldr	r2, [r2, #12]
 8003c48:	0a12      	lsrs	r2, r2, #8
 8003c4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c4e:	fb02 f303 	mul.w	r3, r2, r3
 8003c52:	617b      	str	r3, [r7, #20]
      break;
 8003c54:	e00c      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c56:	4a13      	ldr	r2, [pc, #76]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5e:	4a10      	ldr	r2, [pc, #64]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c60:	68d2      	ldr	r2, [r2, #12]
 8003c62:	0a12      	lsrs	r2, r2, #8
 8003c64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c68:	fb02 f303 	mul.w	r3, r2, r3
 8003c6c:	617b      	str	r3, [r7, #20]
      break;
 8003c6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	0e5b      	lsrs	r3, r3, #25
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	e001      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c90:	693b      	ldr	r3, [r7, #16]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	371c      	adds	r7, #28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	00f42400 	.word	0x00f42400
 8003ca8:	016e3600 	.word	0x016e3600

08003cac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20000004 	.word	0x20000004

08003cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cc8:	f7ff fff0 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4904      	ldr	r1, [pc, #16]	; (8003cec <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	08005b94 	.word	0x08005b94

08003cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cf4:	f7ff ffda 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	0adb      	lsrs	r3, r3, #11
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4904      	ldr	r1, [pc, #16]	; (8003d18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d06:	5ccb      	ldrb	r3, [r1, r3]
 8003d08:	f003 031f 	and.w	r3, r3, #31
 8003d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40021000 	.word	0x40021000
 8003d18:	08005b94 	.word	0x08005b94

08003d1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d22:	4b1e      	ldr	r3, [pc, #120]	; (8003d9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d2c:	4b1b      	ldr	r3, [pc, #108]	; (8003d9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	3301      	adds	r3, #1
 8003d38:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d10c      	bne.n	8003d5a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d40:	4a17      	ldr	r2, [pc, #92]	; (8003da0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	4a14      	ldr	r2, [pc, #80]	; (8003d9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d4a:	68d2      	ldr	r2, [r2, #12]
 8003d4c:	0a12      	lsrs	r2, r2, #8
 8003d4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d52:	fb02 f303 	mul.w	r3, r2, r3
 8003d56:	617b      	str	r3, [r7, #20]
    break;
 8003d58:	e00c      	b.n	8003d74 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d5a:	4a12      	ldr	r2, [pc, #72]	; (8003da4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d62:	4a0e      	ldr	r2, [pc, #56]	; (8003d9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d64:	68d2      	ldr	r2, [r2, #12]
 8003d66:	0a12      	lsrs	r2, r2, #8
 8003d68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d6c:	fb02 f303 	mul.w	r3, r2, r3
 8003d70:	617b      	str	r3, [r7, #20]
    break;
 8003d72:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d74:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	0e5b      	lsrs	r3, r3, #25
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d8e:	687b      	ldr	r3, [r7, #4]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	371c      	adds	r7, #28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	016e3600 	.word	0x016e3600
 8003da4:	00f42400 	.word	0x00f42400

08003da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003db0:	2300      	movs	r3, #0
 8003db2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003db4:	2300      	movs	r3, #0
 8003db6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 8098 	beq.w	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dca:	4b43      	ldr	r3, [pc, #268]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10d      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd6:	4b40      	ldr	r3, [pc, #256]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dda:	4a3f      	ldr	r2, [pc, #252]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de0:	6593      	str	r3, [r2, #88]	; 0x58
 8003de2:	4b3d      	ldr	r3, [pc, #244]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dea:	60bb      	str	r3, [r7, #8]
 8003dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dee:	2301      	movs	r3, #1
 8003df0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003df2:	4b3a      	ldr	r3, [pc, #232]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a39      	ldr	r2, [pc, #228]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dfe:	f7fd f91f 	bl	8001040 <HAL_GetTick>
 8003e02:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e04:	e009      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e06:	f7fd f91b 	bl	8001040 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d902      	bls.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	74fb      	strb	r3, [r7, #19]
        break;
 8003e18:	e005      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e1a:	4b30      	ldr	r3, [pc, #192]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0ef      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e26:	7cfb      	ldrb	r3, [r7, #19]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d159      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e2c:	4b2a      	ldr	r3, [pc, #168]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e36:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d01e      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d019      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e48:	4b23      	ldr	r3, [pc, #140]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e54:	4b20      	ldr	r3, [pc, #128]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5a:	4a1f      	ldr	r2, [pc, #124]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e64:	4b1c      	ldr	r3, [pc, #112]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6a:	4a1b      	ldr	r2, [pc, #108]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e74:	4a18      	ldr	r2, [pc, #96]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d016      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e86:	f7fd f8db 	bl	8001040 <HAL_GetTick>
 8003e8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e8c:	e00b      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8e:	f7fd f8d7 	bl	8001040 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d902      	bls.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ea4:	e006      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ea6:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0ec      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003eb4:	7cfb      	ldrb	r3, [r7, #19]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10b      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eba:	4b07      	ldr	r3, [pc, #28]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec8:	4903      	ldr	r1, [pc, #12]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ed2:	7cfb      	ldrb	r3, [r7, #19]
 8003ed4:	74bb      	strb	r3, [r7, #18]
 8003ed6:	e005      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee0:	7cfb      	ldrb	r3, [r7, #19]
 8003ee2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ee4:	7c7b      	ldrb	r3, [r7, #17]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d105      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eea:	4ba7      	ldr	r3, [pc, #668]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eee:	4aa6      	ldr	r2, [pc, #664]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ef4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f02:	4ba1      	ldr	r3, [pc, #644]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f08:	f023 0203 	bic.w	r2, r3, #3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	499d      	ldr	r1, [pc, #628]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f24:	4b98      	ldr	r3, [pc, #608]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	f023 020c 	bic.w	r2, r3, #12
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	4995      	ldr	r1, [pc, #596]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f46:	4b90      	ldr	r3, [pc, #576]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	498c      	ldr	r1, [pc, #560]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f68:	4b87      	ldr	r3, [pc, #540]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	4984      	ldr	r1, [pc, #528]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f8a:	4b7f      	ldr	r3, [pc, #508]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	497b      	ldr	r1, [pc, #492]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fac:	4b76      	ldr	r3, [pc, #472]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	4973      	ldr	r1, [pc, #460]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fce:	4b6e      	ldr	r3, [pc, #440]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	496a      	ldr	r1, [pc, #424]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ff0:	4b65      	ldr	r3, [pc, #404]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	4962      	ldr	r1, [pc, #392]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004012:	4b5d      	ldr	r3, [pc, #372]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004018:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	4959      	ldr	r1, [pc, #356]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004034:	4b54      	ldr	r3, [pc, #336]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004036:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800403a:	f023 0203 	bic.w	r2, r3, #3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	4951      	ldr	r1, [pc, #324]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004056:	4b4c      	ldr	r3, [pc, #304]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	4948      	ldr	r1, [pc, #288]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004074:	2b00      	cmp	r3, #0
 8004076:	d015      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004078:	4b43      	ldr	r3, [pc, #268]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	4940      	ldr	r1, [pc, #256]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004096:	d105      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004098:	4b3b      	ldr	r3, [pc, #236]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	4a3a      	ldr	r2, [pc, #232]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d015      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040b0:	4b35      	ldr	r3, [pc, #212]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040be:	4932      	ldr	r1, [pc, #200]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ce:	d105      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040d0:	4b2d      	ldr	r3, [pc, #180]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	4a2c      	ldr	r2, [pc, #176]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040da:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d015      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040e8:	4b27      	ldr	r3, [pc, #156]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	4924      	ldr	r1, [pc, #144]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004106:	d105      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004108:	4b1f      	ldr	r3, [pc, #124]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4a1e      	ldr	r2, [pc, #120]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004112:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d015      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004120:	4b19      	ldr	r3, [pc, #100]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004126:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412e:	4916      	ldr	r1, [pc, #88]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800413e:	d105      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004140:	4b11      	ldr	r3, [pc, #68]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4a10      	ldr	r2, [pc, #64]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004146:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800414a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d019      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004158:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	4908      	ldr	r1, [pc, #32]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004176:	d109      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004178:	4b03      	ldr	r3, [pc, #12]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4a02      	ldr	r2, [pc, #8]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004182:	60d3      	str	r3, [r2, #12]
 8004184:	e002      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004186:	bf00      	nop
 8004188:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d015      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004198:	4b29      	ldr	r3, [pc, #164]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a6:	4926      	ldr	r1, [pc, #152]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041b6:	d105      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041b8:	4b21      	ldr	r3, [pc, #132]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	4a20      	ldr	r2, [pc, #128]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d015      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80041d0:	4b1b      	ldr	r3, [pc, #108]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041de:	4918      	ldr	r1, [pc, #96]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ee:	d105      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041f0:	4b13      	ldr	r3, [pc, #76]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	4a12      	ldr	r2, [pc, #72]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d015      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004208:	4b0d      	ldr	r3, [pc, #52]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800420a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800420e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004216:	490a      	ldr	r1, [pc, #40]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004222:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004226:	d105      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004228:	4b05      	ldr	r3, [pc, #20]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4a04      	ldr	r2, [pc, #16]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800422e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004232:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004234:	7cbb      	ldrb	r3, [r7, #18]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40021000 	.word	0x40021000

08004244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e049      	b.n	80042ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fc fdca 	bl	8000e04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3304      	adds	r3, #4
 8004280:	4619      	mov	r1, r3
 8004282:	4610      	mov	r0, r2
 8004284:	f000 fbac 	bl	80049e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	d001      	beq.n	800430c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e04c      	b.n	80043a6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a26      	ldr	r2, [pc, #152]	; (80043b4 <HAL_TIM_Base_Start+0xc0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d022      	beq.n	8004364 <HAL_TIM_Base_Start+0x70>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004326:	d01d      	beq.n	8004364 <HAL_TIM_Base_Start+0x70>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a22      	ldr	r2, [pc, #136]	; (80043b8 <HAL_TIM_Base_Start+0xc4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d018      	beq.n	8004364 <HAL_TIM_Base_Start+0x70>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a21      	ldr	r2, [pc, #132]	; (80043bc <HAL_TIM_Base_Start+0xc8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d013      	beq.n	8004364 <HAL_TIM_Base_Start+0x70>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a1f      	ldr	r2, [pc, #124]	; (80043c0 <HAL_TIM_Base_Start+0xcc>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d00e      	beq.n	8004364 <HAL_TIM_Base_Start+0x70>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a1e      	ldr	r2, [pc, #120]	; (80043c4 <HAL_TIM_Base_Start+0xd0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d009      	beq.n	8004364 <HAL_TIM_Base_Start+0x70>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a1c      	ldr	r2, [pc, #112]	; (80043c8 <HAL_TIM_Base_Start+0xd4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d004      	beq.n	8004364 <HAL_TIM_Base_Start+0x70>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a1b      	ldr	r2, [pc, #108]	; (80043cc <HAL_TIM_Base_Start+0xd8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d115      	bne.n	8004390 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	4b19      	ldr	r3, [pc, #100]	; (80043d0 <HAL_TIM_Base_Start+0xdc>)
 800436c:	4013      	ands	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b06      	cmp	r3, #6
 8004374:	d015      	beq.n	80043a2 <HAL_TIM_Base_Start+0xae>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800437c:	d011      	beq.n	80043a2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0201 	orr.w	r2, r2, #1
 800438c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800438e:	e008      	b.n	80043a2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0201 	orr.w	r2, r2, #1
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	e000      	b.n	80043a4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40012c00 	.word	0x40012c00
 80043b8:	40000400 	.word	0x40000400
 80043bc:	40000800 	.word	0x40000800
 80043c0:	40000c00 	.word	0x40000c00
 80043c4:	40013400 	.word	0x40013400
 80043c8:	40014000 	.word	0x40014000
 80043cc:	40015000 	.word	0x40015000
 80043d0:	00010007 	.word	0x00010007

080043d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d001      	beq.n	80043ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e054      	b.n	8004496 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a26      	ldr	r2, [pc, #152]	; (80044a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d022      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x80>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004416:	d01d      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x80>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a22      	ldr	r2, [pc, #136]	; (80044a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d018      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x80>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a21      	ldr	r2, [pc, #132]	; (80044ac <HAL_TIM_Base_Start_IT+0xd8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d013      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x80>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a1f      	ldr	r2, [pc, #124]	; (80044b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00e      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x80>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a1e      	ldr	r2, [pc, #120]	; (80044b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d009      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x80>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a1c      	ldr	r2, [pc, #112]	; (80044b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d004      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x80>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1b      	ldr	r2, [pc, #108]	; (80044bc <HAL_TIM_Base_Start_IT+0xe8>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d115      	bne.n	8004480 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	4b19      	ldr	r3, [pc, #100]	; (80044c0 <HAL_TIM_Base_Start_IT+0xec>)
 800445c:	4013      	ands	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b06      	cmp	r3, #6
 8004464:	d015      	beq.n	8004492 <HAL_TIM_Base_Start_IT+0xbe>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446c:	d011      	beq.n	8004492 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0201 	orr.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447e:	e008      	b.n	8004492 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0201 	orr.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	e000      	b.n	8004494 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004492:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40012c00 	.word	0x40012c00
 80044a8:	40000400 	.word	0x40000400
 80044ac:	40000800 	.word	0x40000800
 80044b0:	40000c00 	.word	0x40000c00
 80044b4:	40013400 	.word	0x40013400
 80044b8:	40014000 	.word	0x40014000
 80044bc:	40015000 	.word	0x40015000
 80044c0:	00010007 	.word	0x00010007

080044c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d020      	beq.n	8004528 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01b      	beq.n	8004528 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0202 	mvn.w	r2, #2
 80044f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fa48 	bl	80049a4 <HAL_TIM_IC_CaptureCallback>
 8004514:	e005      	b.n	8004522 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fa3a 	bl	8004990 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 fa4b 	bl	80049b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	d020      	beq.n	8004574 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01b      	beq.n	8004574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0204 	mvn.w	r2, #4
 8004544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2202      	movs	r2, #2
 800454a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fa22 	bl	80049a4 <HAL_TIM_IC_CaptureCallback>
 8004560:	e005      	b.n	800456e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fa14 	bl	8004990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fa25 	bl	80049b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d020      	beq.n	80045c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01b      	beq.n	80045c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0208 	mvn.w	r2, #8
 8004590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2204      	movs	r2, #4
 8004596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f9fc 	bl	80049a4 <HAL_TIM_IC_CaptureCallback>
 80045ac:	e005      	b.n	80045ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f9ee 	bl	8004990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f9ff 	bl	80049b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 0310 	and.w	r3, r3, #16
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d020      	beq.n	800460c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d01b      	beq.n	800460c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0210 	mvn.w	r2, #16
 80045dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2208      	movs	r2, #8
 80045e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f9d6 	bl	80049a4 <HAL_TIM_IC_CaptureCallback>
 80045f8:	e005      	b.n	8004606 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f9c8 	bl	8004990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f9d9 	bl	80049b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00c      	beq.n	8004630 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d007      	beq.n	8004630 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f06f 0201 	mvn.w	r2, #1
 8004628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fc fab4 	bl	8000b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004636:	2b00      	cmp	r3, #0
 8004638:	d104      	bne.n	8004644 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00c      	beq.n	800465e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464a:	2b00      	cmp	r3, #0
 800464c:	d007      	beq.n	800465e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fbb1 	bl	8004dc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00c      	beq.n	8004682 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466e:	2b00      	cmp	r3, #0
 8004670:	d007      	beq.n	8004682 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800467a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fba9 	bl	8004dd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00c      	beq.n	80046a6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004692:	2b00      	cmp	r3, #0
 8004694:	d007      	beq.n	80046a6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800469e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f993 	bl	80049cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f003 0320 	and.w	r3, r3, #32
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00c      	beq.n	80046ca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d007      	beq.n	80046ca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f06f 0220 	mvn.w	r2, #32
 80046c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fb71 	bl	8004dac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00c      	beq.n	80046ee <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d007      	beq.n	80046ee <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80046e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 fb7d 	bl	8004de8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00c      	beq.n	8004712 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800470a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fb75 	bl	8004dfc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00c      	beq.n	8004736 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800472e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 fb6d 	bl	8004e10 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00c      	beq.n	800475a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d007      	beq.n	800475a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 fb65 	bl	8004e24 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800475a:	bf00      	nop
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_TIM_ConfigClockSource+0x1c>
 800477c:	2302      	movs	r3, #2
 800477e:	e0f6      	b.n	800496e <HAL_TIM_ConfigClockSource+0x20a>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800479e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a6f      	ldr	r2, [pc, #444]	; (8004978 <HAL_TIM_ConfigClockSource+0x214>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	f000 80c1 	beq.w	8004942 <HAL_TIM_ConfigClockSource+0x1de>
 80047c0:	4a6d      	ldr	r2, [pc, #436]	; (8004978 <HAL_TIM_ConfigClockSource+0x214>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	f200 80c6 	bhi.w	8004954 <HAL_TIM_ConfigClockSource+0x1f0>
 80047c8:	4a6c      	ldr	r2, [pc, #432]	; (800497c <HAL_TIM_ConfigClockSource+0x218>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	f000 80b9 	beq.w	8004942 <HAL_TIM_ConfigClockSource+0x1de>
 80047d0:	4a6a      	ldr	r2, [pc, #424]	; (800497c <HAL_TIM_ConfigClockSource+0x218>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	f200 80be 	bhi.w	8004954 <HAL_TIM_ConfigClockSource+0x1f0>
 80047d8:	4a69      	ldr	r2, [pc, #420]	; (8004980 <HAL_TIM_ConfigClockSource+0x21c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	f000 80b1 	beq.w	8004942 <HAL_TIM_ConfigClockSource+0x1de>
 80047e0:	4a67      	ldr	r2, [pc, #412]	; (8004980 <HAL_TIM_ConfigClockSource+0x21c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	f200 80b6 	bhi.w	8004954 <HAL_TIM_ConfigClockSource+0x1f0>
 80047e8:	4a66      	ldr	r2, [pc, #408]	; (8004984 <HAL_TIM_ConfigClockSource+0x220>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	f000 80a9 	beq.w	8004942 <HAL_TIM_ConfigClockSource+0x1de>
 80047f0:	4a64      	ldr	r2, [pc, #400]	; (8004984 <HAL_TIM_ConfigClockSource+0x220>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	f200 80ae 	bhi.w	8004954 <HAL_TIM_ConfigClockSource+0x1f0>
 80047f8:	4a63      	ldr	r2, [pc, #396]	; (8004988 <HAL_TIM_ConfigClockSource+0x224>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	f000 80a1 	beq.w	8004942 <HAL_TIM_ConfigClockSource+0x1de>
 8004800:	4a61      	ldr	r2, [pc, #388]	; (8004988 <HAL_TIM_ConfigClockSource+0x224>)
 8004802:	4293      	cmp	r3, r2
 8004804:	f200 80a6 	bhi.w	8004954 <HAL_TIM_ConfigClockSource+0x1f0>
 8004808:	4a60      	ldr	r2, [pc, #384]	; (800498c <HAL_TIM_ConfigClockSource+0x228>)
 800480a:	4293      	cmp	r3, r2
 800480c:	f000 8099 	beq.w	8004942 <HAL_TIM_ConfigClockSource+0x1de>
 8004810:	4a5e      	ldr	r2, [pc, #376]	; (800498c <HAL_TIM_ConfigClockSource+0x228>)
 8004812:	4293      	cmp	r3, r2
 8004814:	f200 809e 	bhi.w	8004954 <HAL_TIM_ConfigClockSource+0x1f0>
 8004818:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800481c:	f000 8091 	beq.w	8004942 <HAL_TIM_ConfigClockSource+0x1de>
 8004820:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004824:	f200 8096 	bhi.w	8004954 <HAL_TIM_ConfigClockSource+0x1f0>
 8004828:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800482c:	f000 8089 	beq.w	8004942 <HAL_TIM_ConfigClockSource+0x1de>
 8004830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004834:	f200 808e 	bhi.w	8004954 <HAL_TIM_ConfigClockSource+0x1f0>
 8004838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800483c:	d03e      	beq.n	80048bc <HAL_TIM_ConfigClockSource+0x158>
 800483e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004842:	f200 8087 	bhi.w	8004954 <HAL_TIM_ConfigClockSource+0x1f0>
 8004846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484a:	f000 8086 	beq.w	800495a <HAL_TIM_ConfigClockSource+0x1f6>
 800484e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004852:	d87f      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x1f0>
 8004854:	2b70      	cmp	r3, #112	; 0x70
 8004856:	d01a      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x12a>
 8004858:	2b70      	cmp	r3, #112	; 0x70
 800485a:	d87b      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x1f0>
 800485c:	2b60      	cmp	r3, #96	; 0x60
 800485e:	d050      	beq.n	8004902 <HAL_TIM_ConfigClockSource+0x19e>
 8004860:	2b60      	cmp	r3, #96	; 0x60
 8004862:	d877      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x1f0>
 8004864:	2b50      	cmp	r3, #80	; 0x50
 8004866:	d03c      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0x17e>
 8004868:	2b50      	cmp	r3, #80	; 0x50
 800486a:	d873      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x1f0>
 800486c:	2b40      	cmp	r3, #64	; 0x40
 800486e:	d058      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0x1be>
 8004870:	2b40      	cmp	r3, #64	; 0x40
 8004872:	d86f      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x1f0>
 8004874:	2b30      	cmp	r3, #48	; 0x30
 8004876:	d064      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x1de>
 8004878:	2b30      	cmp	r3, #48	; 0x30
 800487a:	d86b      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x1f0>
 800487c:	2b20      	cmp	r3, #32
 800487e:	d060      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x1de>
 8004880:	2b20      	cmp	r3, #32
 8004882:	d867      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x1f0>
 8004884:	2b00      	cmp	r3, #0
 8004886:	d05c      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x1de>
 8004888:	2b10      	cmp	r3, #16
 800488a:	d05a      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x1de>
 800488c:	e062      	b.n	8004954 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800489e:	f000 f9cf 	bl	8004c40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	609a      	str	r2, [r3, #8]
      break;
 80048ba:	e04f      	b.n	800495c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048cc:	f000 f9b8 	bl	8004c40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048de:	609a      	str	r2, [r3, #8]
      break;
 80048e0:	e03c      	b.n	800495c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ee:	461a      	mov	r2, r3
 80048f0:	f000 f92a 	bl	8004b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2150      	movs	r1, #80	; 0x50
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 f983 	bl	8004c06 <TIM_ITRx_SetConfig>
      break;
 8004900:	e02c      	b.n	800495c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800490e:	461a      	mov	r2, r3
 8004910:	f000 f949 	bl	8004ba6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2160      	movs	r1, #96	; 0x60
 800491a:	4618      	mov	r0, r3
 800491c:	f000 f973 	bl	8004c06 <TIM_ITRx_SetConfig>
      break;
 8004920:	e01c      	b.n	800495c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800492e:	461a      	mov	r2, r3
 8004930:	f000 f90a 	bl	8004b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2140      	movs	r1, #64	; 0x40
 800493a:	4618      	mov	r0, r3
 800493c:	f000 f963 	bl	8004c06 <TIM_ITRx_SetConfig>
      break;
 8004940:	e00c      	b.n	800495c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4619      	mov	r1, r3
 800494c:	4610      	mov	r0, r2
 800494e:	f000 f95a 	bl	8004c06 <TIM_ITRx_SetConfig>
      break;
 8004952:	e003      	b.n	800495c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	73fb      	strb	r3, [r7, #15]
      break;
 8004958:	e000      	b.n	800495c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800495a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800496c:	7bfb      	ldrb	r3, [r7, #15]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	00100070 	.word	0x00100070
 800497c:	00100060 	.word	0x00100060
 8004980:	00100050 	.word	0x00100050
 8004984:	00100040 	.word	0x00100040
 8004988:	00100030 	.word	0x00100030
 800498c:	00100020 	.word	0x00100020

08004990 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a4c      	ldr	r2, [pc, #304]	; (8004b24 <TIM_Base_SetConfig+0x144>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d017      	beq.n	8004a28 <TIM_Base_SetConfig+0x48>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fe:	d013      	beq.n	8004a28 <TIM_Base_SetConfig+0x48>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a49      	ldr	r2, [pc, #292]	; (8004b28 <TIM_Base_SetConfig+0x148>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d00f      	beq.n	8004a28 <TIM_Base_SetConfig+0x48>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a48      	ldr	r2, [pc, #288]	; (8004b2c <TIM_Base_SetConfig+0x14c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00b      	beq.n	8004a28 <TIM_Base_SetConfig+0x48>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a47      	ldr	r2, [pc, #284]	; (8004b30 <TIM_Base_SetConfig+0x150>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d007      	beq.n	8004a28 <TIM_Base_SetConfig+0x48>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a46      	ldr	r2, [pc, #280]	; (8004b34 <TIM_Base_SetConfig+0x154>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d003      	beq.n	8004a28 <TIM_Base_SetConfig+0x48>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a45      	ldr	r2, [pc, #276]	; (8004b38 <TIM_Base_SetConfig+0x158>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d108      	bne.n	8004a3a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a39      	ldr	r2, [pc, #228]	; (8004b24 <TIM_Base_SetConfig+0x144>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d023      	beq.n	8004a8a <TIM_Base_SetConfig+0xaa>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a48:	d01f      	beq.n	8004a8a <TIM_Base_SetConfig+0xaa>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a36      	ldr	r2, [pc, #216]	; (8004b28 <TIM_Base_SetConfig+0x148>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d01b      	beq.n	8004a8a <TIM_Base_SetConfig+0xaa>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a35      	ldr	r2, [pc, #212]	; (8004b2c <TIM_Base_SetConfig+0x14c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d017      	beq.n	8004a8a <TIM_Base_SetConfig+0xaa>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a34      	ldr	r2, [pc, #208]	; (8004b30 <TIM_Base_SetConfig+0x150>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d013      	beq.n	8004a8a <TIM_Base_SetConfig+0xaa>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a33      	ldr	r2, [pc, #204]	; (8004b34 <TIM_Base_SetConfig+0x154>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00f      	beq.n	8004a8a <TIM_Base_SetConfig+0xaa>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a33      	ldr	r2, [pc, #204]	; (8004b3c <TIM_Base_SetConfig+0x15c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00b      	beq.n	8004a8a <TIM_Base_SetConfig+0xaa>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a32      	ldr	r2, [pc, #200]	; (8004b40 <TIM_Base_SetConfig+0x160>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d007      	beq.n	8004a8a <TIM_Base_SetConfig+0xaa>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a31      	ldr	r2, [pc, #196]	; (8004b44 <TIM_Base_SetConfig+0x164>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d003      	beq.n	8004a8a <TIM_Base_SetConfig+0xaa>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a2c      	ldr	r2, [pc, #176]	; (8004b38 <TIM_Base_SetConfig+0x158>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d108      	bne.n	8004a9c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a18      	ldr	r2, [pc, #96]	; (8004b24 <TIM_Base_SetConfig+0x144>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d013      	beq.n	8004af0 <TIM_Base_SetConfig+0x110>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a1a      	ldr	r2, [pc, #104]	; (8004b34 <TIM_Base_SetConfig+0x154>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d00f      	beq.n	8004af0 <TIM_Base_SetConfig+0x110>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a1a      	ldr	r2, [pc, #104]	; (8004b3c <TIM_Base_SetConfig+0x15c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00b      	beq.n	8004af0 <TIM_Base_SetConfig+0x110>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a19      	ldr	r2, [pc, #100]	; (8004b40 <TIM_Base_SetConfig+0x160>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d007      	beq.n	8004af0 <TIM_Base_SetConfig+0x110>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a18      	ldr	r2, [pc, #96]	; (8004b44 <TIM_Base_SetConfig+0x164>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d003      	beq.n	8004af0 <TIM_Base_SetConfig+0x110>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a13      	ldr	r2, [pc, #76]	; (8004b38 <TIM_Base_SetConfig+0x158>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d103      	bne.n	8004af8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d105      	bne.n	8004b16 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f023 0201 	bic.w	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	611a      	str	r2, [r3, #16]
  }
}
 8004b16:	bf00      	nop
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40012c00 	.word	0x40012c00
 8004b28:	40000400 	.word	0x40000400
 8004b2c:	40000800 	.word	0x40000800
 8004b30:	40000c00 	.word	0x40000c00
 8004b34:	40013400 	.word	0x40013400
 8004b38:	40015000 	.word	0x40015000
 8004b3c:	40014000 	.word	0x40014000
 8004b40:	40014400 	.word	0x40014400
 8004b44:	40014800 	.word	0x40014800

08004b48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	f023 0201 	bic.w	r2, r3, #1
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f023 030a 	bic.w	r3, r3, #10
 8004b84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	621a      	str	r2, [r3, #32]
}
 8004b9a:	bf00      	nop
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b087      	sub	sp, #28
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	f023 0210 	bic.w	r2, r3, #16
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	031b      	lsls	r3, r3, #12
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004be2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	621a      	str	r2, [r3, #32]
}
 8004bfa:	bf00      	nop
 8004bfc:	371c      	adds	r7, #28
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b085      	sub	sp, #20
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f043 0307 	orr.w	r3, r3, #7
 8004c2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	609a      	str	r2, [r3, #8]
}
 8004c34:	bf00      	nop
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	021a      	lsls	r2, r3, #8
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	609a      	str	r2, [r3, #8]
}
 8004c74:	bf00      	nop
 8004c76:	371c      	adds	r7, #28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e074      	b.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a34      	ldr	r2, [pc, #208]	; (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d009      	beq.n	8004cd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a33      	ldr	r2, [pc, #204]	; (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d004      	beq.n	8004cd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a31      	ldr	r2, [pc, #196]	; (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d108      	bne.n	8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004cdc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a21      	ldr	r2, [pc, #132]	; (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d022      	beq.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d18:	d01d      	beq.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1f      	ldr	r2, [pc, #124]	; (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d018      	beq.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a1d      	ldr	r2, [pc, #116]	; (8004da0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d013      	beq.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a1c      	ldr	r2, [pc, #112]	; (8004da4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00e      	beq.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a15      	ldr	r2, [pc, #84]	; (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d009      	beq.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a18      	ldr	r2, [pc, #96]	; (8004da8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d004      	beq.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a11      	ldr	r2, [pc, #68]	; (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d10c      	bne.n	8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40012c00 	.word	0x40012c00
 8004d94:	40013400 	.word	0x40013400
 8004d98:	40015000 	.word	0x40015000
 8004d9c:	40000400 	.word	0x40000400
 8004da0:	40000800 	.word	0x40000800
 8004da4:	40000c00 	.word	0x40000c00
 8004da8:	40014000 	.word	0x40014000

08004dac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e042      	b.n	8004ed0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d106      	bne.n	8004e62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7fb ff79 	bl	8000d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2224      	movs	r2, #36	; 0x24
 8004e66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0201 	bic.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fb24 	bl	80054d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f825 	bl	8004ed8 <UART_SetConfig>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d101      	bne.n	8004e98 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e01b      	b.n	8004ed0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ea6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004eb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fba3 	bl	8005614 <UART_CheckIdleState>
 8004ece:	4603      	mov	r3, r0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004edc:	b08c      	sub	sp, #48	; 0x30
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	4baa      	ldr	r3, [pc, #680]	; (80051b0 <UART_SetConfig+0x2d8>)
 8004f08:	4013      	ands	r3, r2
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	6812      	ldr	r2, [r2, #0]
 8004f0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f10:	430b      	orrs	r3, r1
 8004f12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a9f      	ldr	r2, [pc, #636]	; (80051b4 <UART_SetConfig+0x2dc>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d004      	beq.n	8004f44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f40:	4313      	orrs	r3, r2
 8004f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004f4e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	6812      	ldr	r2, [r2, #0]
 8004f56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f62:	f023 010f 	bic.w	r1, r3, #15
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a90      	ldr	r2, [pc, #576]	; (80051b8 <UART_SetConfig+0x2e0>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d125      	bne.n	8004fc8 <UART_SetConfig+0xf0>
 8004f7c:	4b8f      	ldr	r3, [pc, #572]	; (80051bc <UART_SetConfig+0x2e4>)
 8004f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d81a      	bhi.n	8004fc0 <UART_SetConfig+0xe8>
 8004f8a:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <UART_SetConfig+0xb8>)
 8004f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f90:	08004fa1 	.word	0x08004fa1
 8004f94:	08004fb1 	.word	0x08004fb1
 8004f98:	08004fa9 	.word	0x08004fa9
 8004f9c:	08004fb9 	.word	0x08004fb9
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fa6:	e116      	b.n	80051d6 <UART_SetConfig+0x2fe>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fae:	e112      	b.n	80051d6 <UART_SetConfig+0x2fe>
 8004fb0:	2304      	movs	r3, #4
 8004fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fb6:	e10e      	b.n	80051d6 <UART_SetConfig+0x2fe>
 8004fb8:	2308      	movs	r3, #8
 8004fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fbe:	e10a      	b.n	80051d6 <UART_SetConfig+0x2fe>
 8004fc0:	2310      	movs	r3, #16
 8004fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fc6:	e106      	b.n	80051d6 <UART_SetConfig+0x2fe>
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a7c      	ldr	r2, [pc, #496]	; (80051c0 <UART_SetConfig+0x2e8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d138      	bne.n	8005044 <UART_SetConfig+0x16c>
 8004fd2:	4b7a      	ldr	r3, [pc, #488]	; (80051bc <UART_SetConfig+0x2e4>)
 8004fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd8:	f003 030c 	and.w	r3, r3, #12
 8004fdc:	2b0c      	cmp	r3, #12
 8004fde:	d82d      	bhi.n	800503c <UART_SetConfig+0x164>
 8004fe0:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <UART_SetConfig+0x110>)
 8004fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe6:	bf00      	nop
 8004fe8:	0800501d 	.word	0x0800501d
 8004fec:	0800503d 	.word	0x0800503d
 8004ff0:	0800503d 	.word	0x0800503d
 8004ff4:	0800503d 	.word	0x0800503d
 8004ff8:	0800502d 	.word	0x0800502d
 8004ffc:	0800503d 	.word	0x0800503d
 8005000:	0800503d 	.word	0x0800503d
 8005004:	0800503d 	.word	0x0800503d
 8005008:	08005025 	.word	0x08005025
 800500c:	0800503d 	.word	0x0800503d
 8005010:	0800503d 	.word	0x0800503d
 8005014:	0800503d 	.word	0x0800503d
 8005018:	08005035 	.word	0x08005035
 800501c:	2300      	movs	r3, #0
 800501e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005022:	e0d8      	b.n	80051d6 <UART_SetConfig+0x2fe>
 8005024:	2302      	movs	r3, #2
 8005026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800502a:	e0d4      	b.n	80051d6 <UART_SetConfig+0x2fe>
 800502c:	2304      	movs	r3, #4
 800502e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005032:	e0d0      	b.n	80051d6 <UART_SetConfig+0x2fe>
 8005034:	2308      	movs	r3, #8
 8005036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800503a:	e0cc      	b.n	80051d6 <UART_SetConfig+0x2fe>
 800503c:	2310      	movs	r3, #16
 800503e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005042:	e0c8      	b.n	80051d6 <UART_SetConfig+0x2fe>
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a5e      	ldr	r2, [pc, #376]	; (80051c4 <UART_SetConfig+0x2ec>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d125      	bne.n	800509a <UART_SetConfig+0x1c2>
 800504e:	4b5b      	ldr	r3, [pc, #364]	; (80051bc <UART_SetConfig+0x2e4>)
 8005050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005054:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005058:	2b30      	cmp	r3, #48	; 0x30
 800505a:	d016      	beq.n	800508a <UART_SetConfig+0x1b2>
 800505c:	2b30      	cmp	r3, #48	; 0x30
 800505e:	d818      	bhi.n	8005092 <UART_SetConfig+0x1ba>
 8005060:	2b20      	cmp	r3, #32
 8005062:	d00a      	beq.n	800507a <UART_SetConfig+0x1a2>
 8005064:	2b20      	cmp	r3, #32
 8005066:	d814      	bhi.n	8005092 <UART_SetConfig+0x1ba>
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <UART_SetConfig+0x19a>
 800506c:	2b10      	cmp	r3, #16
 800506e:	d008      	beq.n	8005082 <UART_SetConfig+0x1aa>
 8005070:	e00f      	b.n	8005092 <UART_SetConfig+0x1ba>
 8005072:	2300      	movs	r3, #0
 8005074:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005078:	e0ad      	b.n	80051d6 <UART_SetConfig+0x2fe>
 800507a:	2302      	movs	r3, #2
 800507c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005080:	e0a9      	b.n	80051d6 <UART_SetConfig+0x2fe>
 8005082:	2304      	movs	r3, #4
 8005084:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005088:	e0a5      	b.n	80051d6 <UART_SetConfig+0x2fe>
 800508a:	2308      	movs	r3, #8
 800508c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005090:	e0a1      	b.n	80051d6 <UART_SetConfig+0x2fe>
 8005092:	2310      	movs	r3, #16
 8005094:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005098:	e09d      	b.n	80051d6 <UART_SetConfig+0x2fe>
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a4a      	ldr	r2, [pc, #296]	; (80051c8 <UART_SetConfig+0x2f0>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d125      	bne.n	80050f0 <UART_SetConfig+0x218>
 80050a4:	4b45      	ldr	r3, [pc, #276]	; (80051bc <UART_SetConfig+0x2e4>)
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050ae:	2bc0      	cmp	r3, #192	; 0xc0
 80050b0:	d016      	beq.n	80050e0 <UART_SetConfig+0x208>
 80050b2:	2bc0      	cmp	r3, #192	; 0xc0
 80050b4:	d818      	bhi.n	80050e8 <UART_SetConfig+0x210>
 80050b6:	2b80      	cmp	r3, #128	; 0x80
 80050b8:	d00a      	beq.n	80050d0 <UART_SetConfig+0x1f8>
 80050ba:	2b80      	cmp	r3, #128	; 0x80
 80050bc:	d814      	bhi.n	80050e8 <UART_SetConfig+0x210>
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <UART_SetConfig+0x1f0>
 80050c2:	2b40      	cmp	r3, #64	; 0x40
 80050c4:	d008      	beq.n	80050d8 <UART_SetConfig+0x200>
 80050c6:	e00f      	b.n	80050e8 <UART_SetConfig+0x210>
 80050c8:	2300      	movs	r3, #0
 80050ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ce:	e082      	b.n	80051d6 <UART_SetConfig+0x2fe>
 80050d0:	2302      	movs	r3, #2
 80050d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050d6:	e07e      	b.n	80051d6 <UART_SetConfig+0x2fe>
 80050d8:	2304      	movs	r3, #4
 80050da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050de:	e07a      	b.n	80051d6 <UART_SetConfig+0x2fe>
 80050e0:	2308      	movs	r3, #8
 80050e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050e6:	e076      	b.n	80051d6 <UART_SetConfig+0x2fe>
 80050e8:	2310      	movs	r3, #16
 80050ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ee:	e072      	b.n	80051d6 <UART_SetConfig+0x2fe>
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a35      	ldr	r2, [pc, #212]	; (80051cc <UART_SetConfig+0x2f4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d12a      	bne.n	8005150 <UART_SetConfig+0x278>
 80050fa:	4b30      	ldr	r3, [pc, #192]	; (80051bc <UART_SetConfig+0x2e4>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005104:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005108:	d01a      	beq.n	8005140 <UART_SetConfig+0x268>
 800510a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800510e:	d81b      	bhi.n	8005148 <UART_SetConfig+0x270>
 8005110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005114:	d00c      	beq.n	8005130 <UART_SetConfig+0x258>
 8005116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800511a:	d815      	bhi.n	8005148 <UART_SetConfig+0x270>
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <UART_SetConfig+0x250>
 8005120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005124:	d008      	beq.n	8005138 <UART_SetConfig+0x260>
 8005126:	e00f      	b.n	8005148 <UART_SetConfig+0x270>
 8005128:	2300      	movs	r3, #0
 800512a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800512e:	e052      	b.n	80051d6 <UART_SetConfig+0x2fe>
 8005130:	2302      	movs	r3, #2
 8005132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005136:	e04e      	b.n	80051d6 <UART_SetConfig+0x2fe>
 8005138:	2304      	movs	r3, #4
 800513a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800513e:	e04a      	b.n	80051d6 <UART_SetConfig+0x2fe>
 8005140:	2308      	movs	r3, #8
 8005142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005146:	e046      	b.n	80051d6 <UART_SetConfig+0x2fe>
 8005148:	2310      	movs	r3, #16
 800514a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800514e:	e042      	b.n	80051d6 <UART_SetConfig+0x2fe>
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a17      	ldr	r2, [pc, #92]	; (80051b4 <UART_SetConfig+0x2dc>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d13a      	bne.n	80051d0 <UART_SetConfig+0x2f8>
 800515a:	4b18      	ldr	r3, [pc, #96]	; (80051bc <UART_SetConfig+0x2e4>)
 800515c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005160:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005164:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005168:	d01a      	beq.n	80051a0 <UART_SetConfig+0x2c8>
 800516a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800516e:	d81b      	bhi.n	80051a8 <UART_SetConfig+0x2d0>
 8005170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005174:	d00c      	beq.n	8005190 <UART_SetConfig+0x2b8>
 8005176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800517a:	d815      	bhi.n	80051a8 <UART_SetConfig+0x2d0>
 800517c:	2b00      	cmp	r3, #0
 800517e:	d003      	beq.n	8005188 <UART_SetConfig+0x2b0>
 8005180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005184:	d008      	beq.n	8005198 <UART_SetConfig+0x2c0>
 8005186:	e00f      	b.n	80051a8 <UART_SetConfig+0x2d0>
 8005188:	2300      	movs	r3, #0
 800518a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800518e:	e022      	b.n	80051d6 <UART_SetConfig+0x2fe>
 8005190:	2302      	movs	r3, #2
 8005192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005196:	e01e      	b.n	80051d6 <UART_SetConfig+0x2fe>
 8005198:	2304      	movs	r3, #4
 800519a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800519e:	e01a      	b.n	80051d6 <UART_SetConfig+0x2fe>
 80051a0:	2308      	movs	r3, #8
 80051a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051a6:	e016      	b.n	80051d6 <UART_SetConfig+0x2fe>
 80051a8:	2310      	movs	r3, #16
 80051aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ae:	e012      	b.n	80051d6 <UART_SetConfig+0x2fe>
 80051b0:	cfff69f3 	.word	0xcfff69f3
 80051b4:	40008000 	.word	0x40008000
 80051b8:	40013800 	.word	0x40013800
 80051bc:	40021000 	.word	0x40021000
 80051c0:	40004400 	.word	0x40004400
 80051c4:	40004800 	.word	0x40004800
 80051c8:	40004c00 	.word	0x40004c00
 80051cc:	40005000 	.word	0x40005000
 80051d0:	2310      	movs	r3, #16
 80051d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4aae      	ldr	r2, [pc, #696]	; (8005494 <UART_SetConfig+0x5bc>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	f040 8097 	bne.w	8005310 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051e6:	2b08      	cmp	r3, #8
 80051e8:	d823      	bhi.n	8005232 <UART_SetConfig+0x35a>
 80051ea:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <UART_SetConfig+0x318>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005215 	.word	0x08005215
 80051f4:	08005233 	.word	0x08005233
 80051f8:	0800521d 	.word	0x0800521d
 80051fc:	08005233 	.word	0x08005233
 8005200:	08005223 	.word	0x08005223
 8005204:	08005233 	.word	0x08005233
 8005208:	08005233 	.word	0x08005233
 800520c:	08005233 	.word	0x08005233
 8005210:	0800522b 	.word	0x0800522b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005214:	f7fe fd56 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 8005218:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800521a:	e010      	b.n	800523e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800521c:	4b9e      	ldr	r3, [pc, #632]	; (8005498 <UART_SetConfig+0x5c0>)
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005220:	e00d      	b.n	800523e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005222:	f7fe fce1 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8005226:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005228:	e009      	b.n	800523e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800522a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005230:	e005      	b.n	800523e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800523c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 8130 	beq.w	80054a6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	4a94      	ldr	r2, [pc, #592]	; (800549c <UART_SetConfig+0x5c4>)
 800524c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005250:	461a      	mov	r2, r3
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	fbb3 f3f2 	udiv	r3, r3, r2
 8005258:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	4613      	mov	r3, r2
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	4413      	add	r3, r2
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	429a      	cmp	r2, r3
 8005268:	d305      	bcc.n	8005276 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	429a      	cmp	r2, r3
 8005274:	d903      	bls.n	800527e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800527c:	e113      	b.n	80054a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	2200      	movs	r2, #0
 8005282:	60bb      	str	r3, [r7, #8]
 8005284:	60fa      	str	r2, [r7, #12]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	4a84      	ldr	r2, [pc, #528]	; (800549c <UART_SetConfig+0x5c4>)
 800528c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005290:	b29b      	uxth	r3, r3
 8005292:	2200      	movs	r2, #0
 8005294:	603b      	str	r3, [r7, #0]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800529c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052a0:	f7fa ffba 	bl	8000218 <__aeabi_uldivmod>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4610      	mov	r0, r2
 80052aa:	4619      	mov	r1, r3
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	020b      	lsls	r3, r1, #8
 80052b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80052ba:	0202      	lsls	r2, r0, #8
 80052bc:	6979      	ldr	r1, [r7, #20]
 80052be:	6849      	ldr	r1, [r1, #4]
 80052c0:	0849      	lsrs	r1, r1, #1
 80052c2:	2000      	movs	r0, #0
 80052c4:	460c      	mov	r4, r1
 80052c6:	4605      	mov	r5, r0
 80052c8:	eb12 0804 	adds.w	r8, r2, r4
 80052cc:	eb43 0905 	adc.w	r9, r3, r5
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	469a      	mov	sl, r3
 80052d8:	4693      	mov	fp, r2
 80052da:	4652      	mov	r2, sl
 80052dc:	465b      	mov	r3, fp
 80052de:	4640      	mov	r0, r8
 80052e0:	4649      	mov	r1, r9
 80052e2:	f7fa ff99 	bl	8000218 <__aeabi_uldivmod>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4613      	mov	r3, r2
 80052ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052f4:	d308      	bcc.n	8005308 <UART_SetConfig+0x430>
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052fc:	d204      	bcs.n	8005308 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6a3a      	ldr	r2, [r7, #32]
 8005304:	60da      	str	r2, [r3, #12]
 8005306:	e0ce      	b.n	80054a6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800530e:	e0ca      	b.n	80054a6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005318:	d166      	bne.n	80053e8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800531a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800531e:	2b08      	cmp	r3, #8
 8005320:	d827      	bhi.n	8005372 <UART_SetConfig+0x49a>
 8005322:	a201      	add	r2, pc, #4	; (adr r2, 8005328 <UART_SetConfig+0x450>)
 8005324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005328:	0800534d 	.word	0x0800534d
 800532c:	08005355 	.word	0x08005355
 8005330:	0800535d 	.word	0x0800535d
 8005334:	08005373 	.word	0x08005373
 8005338:	08005363 	.word	0x08005363
 800533c:	08005373 	.word	0x08005373
 8005340:	08005373 	.word	0x08005373
 8005344:	08005373 	.word	0x08005373
 8005348:	0800536b 	.word	0x0800536b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800534c:	f7fe fcba 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 8005350:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005352:	e014      	b.n	800537e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005354:	f7fe fccc 	bl	8003cf0 <HAL_RCC_GetPCLK2Freq>
 8005358:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800535a:	e010      	b.n	800537e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800535c:	4b4e      	ldr	r3, [pc, #312]	; (8005498 <UART_SetConfig+0x5c0>)
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005360:	e00d      	b.n	800537e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005362:	f7fe fc41 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8005366:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005368:	e009      	b.n	800537e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800536a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800536e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005370:	e005      	b.n	800537e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800537c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 8090 	beq.w	80054a6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	4a44      	ldr	r2, [pc, #272]	; (800549c <UART_SetConfig+0x5c4>)
 800538c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005390:	461a      	mov	r2, r3
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	fbb3 f3f2 	udiv	r3, r3, r2
 8005398:	005a      	lsls	r2, r3, #1
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	085b      	lsrs	r3, r3, #1
 80053a0:	441a      	add	r2, r3
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	2b0f      	cmp	r3, #15
 80053b0:	d916      	bls.n	80053e0 <UART_SetConfig+0x508>
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b8:	d212      	bcs.n	80053e0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	b29b      	uxth	r3, r3
 80053be:	f023 030f 	bic.w	r3, r3, #15
 80053c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	085b      	lsrs	r3, r3, #1
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	8bfb      	ldrh	r3, [r7, #30]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	8bfa      	ldrh	r2, [r7, #30]
 80053dc:	60da      	str	r2, [r3, #12]
 80053de:	e062      	b.n	80054a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80053e6:	e05e      	b.n	80054a6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d828      	bhi.n	8005442 <UART_SetConfig+0x56a>
 80053f0:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <UART_SetConfig+0x520>)
 80053f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f6:	bf00      	nop
 80053f8:	0800541d 	.word	0x0800541d
 80053fc:	08005425 	.word	0x08005425
 8005400:	0800542d 	.word	0x0800542d
 8005404:	08005443 	.word	0x08005443
 8005408:	08005433 	.word	0x08005433
 800540c:	08005443 	.word	0x08005443
 8005410:	08005443 	.word	0x08005443
 8005414:	08005443 	.word	0x08005443
 8005418:	0800543b 	.word	0x0800543b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800541c:	f7fe fc52 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 8005420:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005422:	e014      	b.n	800544e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005424:	f7fe fc64 	bl	8003cf0 <HAL_RCC_GetPCLK2Freq>
 8005428:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800542a:	e010      	b.n	800544e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800542c:	4b1a      	ldr	r3, [pc, #104]	; (8005498 <UART_SetConfig+0x5c0>)
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005430:	e00d      	b.n	800544e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005432:	f7fe fbd9 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8005436:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005438:	e009      	b.n	800544e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800543a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800543e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005440:	e005      	b.n	800544e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800544c:	bf00      	nop
    }

    if (pclk != 0U)
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	2b00      	cmp	r3, #0
 8005452:	d028      	beq.n	80054a6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	4a10      	ldr	r2, [pc, #64]	; (800549c <UART_SetConfig+0x5c4>)
 800545a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800545e:	461a      	mov	r2, r3
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	fbb3 f2f2 	udiv	r2, r3, r2
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	085b      	lsrs	r3, r3, #1
 800546c:	441a      	add	r2, r3
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	fbb2 f3f3 	udiv	r3, r2, r3
 8005476:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	2b0f      	cmp	r3, #15
 800547c:	d910      	bls.n	80054a0 <UART_SetConfig+0x5c8>
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005484:	d20c      	bcs.n	80054a0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	b29a      	uxth	r2, r3
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	60da      	str	r2, [r3, #12]
 8005490:	e009      	b.n	80054a6 <UART_SetConfig+0x5ce>
 8005492:	bf00      	nop
 8005494:	40008000 	.word	0x40008000
 8005498:	00f42400 	.word	0x00f42400
 800549c:	08005b9c 	.word	0x08005b9c
      }
      else
      {
        ret = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2200      	movs	r2, #0
 80054ba:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2200      	movs	r2, #0
 80054c0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80054c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3730      	adds	r7, #48	; 0x30
 80054ca:	46bd      	mov	sp, r7
 80054cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080054d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005542:	f003 0304 	and.w	r3, r3, #4
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005564:	f003 0310 	and.w	r3, r3, #16
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d01a      	beq.n	80055e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ce:	d10a      	bne.n	80055e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	605a      	str	r2, [r3, #4]
  }
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b098      	sub	sp, #96	; 0x60
 8005618:	af02      	add	r7, sp, #8
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005624:	f7fb fd0c 	bl	8001040 <HAL_GetTick>
 8005628:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b08      	cmp	r3, #8
 8005636:	d12f      	bne.n	8005698 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005638:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005640:	2200      	movs	r2, #0
 8005642:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f88e 	bl	8005768 <UART_WaitOnFlagUntilTimeout>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d022      	beq.n	8005698 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565a:	e853 3f00 	ldrex	r3, [r3]
 800565e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005666:	653b      	str	r3, [r7, #80]	; 0x50
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	461a      	mov	r2, r3
 800566e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005670:	647b      	str	r3, [r7, #68]	; 0x44
 8005672:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005674:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005676:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005678:	e841 2300 	strex	r3, r2, [r1]
 800567c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800567e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1e6      	bne.n	8005652 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2220      	movs	r2, #32
 8005688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e063      	b.n	8005760 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0304 	and.w	r3, r3, #4
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d149      	bne.n	800573a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056ae:	2200      	movs	r2, #0
 80056b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f857 	bl	8005768 <UART_WaitOnFlagUntilTimeout>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d03c      	beq.n	800573a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	e853 3f00 	ldrex	r3, [r3]
 80056cc:	623b      	str	r3, [r7, #32]
   return(result);
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	461a      	mov	r2, r3
 80056dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056de:	633b      	str	r3, [r7, #48]	; 0x30
 80056e0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056e6:	e841 2300 	strex	r3, r2, [r1]
 80056ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1e6      	bne.n	80056c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3308      	adds	r3, #8
 80056f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	e853 3f00 	ldrex	r3, [r3]
 8005700:	60fb      	str	r3, [r7, #12]
   return(result);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f023 0301 	bic.w	r3, r3, #1
 8005708:	64bb      	str	r3, [r7, #72]	; 0x48
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	3308      	adds	r3, #8
 8005710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005712:	61fa      	str	r2, [r7, #28]
 8005714:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005716:	69b9      	ldr	r1, [r7, #24]
 8005718:	69fa      	ldr	r2, [r7, #28]
 800571a:	e841 2300 	strex	r3, r2, [r1]
 800571e:	617b      	str	r3, [r7, #20]
   return(result);
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1e5      	bne.n	80056f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2220      	movs	r2, #32
 800572a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e012      	b.n	8005760 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2220      	movs	r2, #32
 800573e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2220      	movs	r2, #32
 8005746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3758      	adds	r7, #88	; 0x58
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	603b      	str	r3, [r7, #0]
 8005774:	4613      	mov	r3, r2
 8005776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005778:	e04f      	b.n	800581a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005780:	d04b      	beq.n	800581a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005782:	f7fb fc5d 	bl	8001040 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	429a      	cmp	r2, r3
 8005790:	d302      	bcc.n	8005798 <UART_WaitOnFlagUntilTimeout+0x30>
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e04e      	b.n	800583a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0304 	and.w	r3, r3, #4
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d037      	beq.n	800581a <UART_WaitOnFlagUntilTimeout+0xb2>
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b80      	cmp	r3, #128	; 0x80
 80057ae:	d034      	beq.n	800581a <UART_WaitOnFlagUntilTimeout+0xb2>
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b40      	cmp	r3, #64	; 0x40
 80057b4:	d031      	beq.n	800581a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	f003 0308 	and.w	r3, r3, #8
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d110      	bne.n	80057e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2208      	movs	r2, #8
 80057ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 f838 	bl	8005842 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2208      	movs	r2, #8
 80057d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e029      	b.n	800583a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057f4:	d111      	bne.n	800581a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 f81e 	bl	8005842 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2220      	movs	r2, #32
 800580a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e00f      	b.n	800583a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	69da      	ldr	r2, [r3, #28]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4013      	ands	r3, r2
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	429a      	cmp	r2, r3
 8005828:	bf0c      	ite	eq
 800582a:	2301      	moveq	r3, #1
 800582c:	2300      	movne	r3, #0
 800582e:	b2db      	uxtb	r3, r3
 8005830:	461a      	mov	r2, r3
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	429a      	cmp	r2, r3
 8005836:	d0a0      	beq.n	800577a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005842:	b480      	push	{r7}
 8005844:	b095      	sub	sp, #84	; 0x54
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005852:	e853 3f00 	ldrex	r3, [r3]
 8005856:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800585e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	461a      	mov	r2, r3
 8005866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005868:	643b      	str	r3, [r7, #64]	; 0x40
 800586a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800586e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e6      	bne.n	800584a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3308      	adds	r3, #8
 8005882:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	e853 3f00 	ldrex	r3, [r3]
 800588a:	61fb      	str	r3, [r7, #28]
   return(result);
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005892:	f023 0301 	bic.w	r3, r3, #1
 8005896:	64bb      	str	r3, [r7, #72]	; 0x48
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3308      	adds	r3, #8
 800589e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058a8:	e841 2300 	strex	r3, r2, [r1]
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e3      	bne.n	800587c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d118      	bne.n	80058ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	e853 3f00 	ldrex	r3, [r3]
 80058c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	f023 0310 	bic.w	r3, r3, #16
 80058d0:	647b      	str	r3, [r7, #68]	; 0x44
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058da:	61bb      	str	r3, [r7, #24]
 80058dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058de:	6979      	ldr	r1, [r7, #20]
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	613b      	str	r3, [r7, #16]
   return(result);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e6      	bne.n	80058bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005902:	bf00      	nop
 8005904:	3754      	adds	r7, #84	; 0x54
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800590e:	b480      	push	{r7}
 8005910:	b085      	sub	sp, #20
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800591c:	2b01      	cmp	r3, #1
 800591e:	d101      	bne.n	8005924 <HAL_UARTEx_DisableFifoMode+0x16>
 8005920:	2302      	movs	r3, #2
 8005922:	e027      	b.n	8005974 <HAL_UARTEx_DisableFifoMode+0x66>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2224      	movs	r2, #36	; 0x24
 8005930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0201 	bic.w	r2, r2, #1
 800594a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005952:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2220      	movs	r2, #32
 8005966:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005990:	2b01      	cmp	r3, #1
 8005992:	d101      	bne.n	8005998 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005994:	2302      	movs	r3, #2
 8005996:	e02d      	b.n	80059f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2224      	movs	r2, #36	; 0x24
 80059a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0201 	bic.w	r2, r2, #1
 80059be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f84f 	bl	8005a78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e02d      	b.n	8005a70 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2224      	movs	r2, #36	; 0x24
 8005a20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0201 	bic.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f811 	bl	8005a78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d108      	bne.n	8005a9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a98:	e031      	b.n	8005afe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a9a:	2308      	movs	r3, #8
 8005a9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a9e:	2308      	movs	r3, #8
 8005aa0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	0e5b      	lsrs	r3, r3, #25
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	0f5b      	lsrs	r3, r3, #29
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	f003 0307 	and.w	r3, r3, #7
 8005ac0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ac2:	7bbb      	ldrb	r3, [r7, #14]
 8005ac4:	7b3a      	ldrb	r2, [r7, #12]
 8005ac6:	4911      	ldr	r1, [pc, #68]	; (8005b0c <UARTEx_SetNbDataToProcess+0x94>)
 8005ac8:	5c8a      	ldrb	r2, [r1, r2]
 8005aca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ace:	7b3a      	ldrb	r2, [r7, #12]
 8005ad0:	490f      	ldr	r1, [pc, #60]	; (8005b10 <UARTEx_SetNbDataToProcess+0x98>)
 8005ad2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ad4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
 8005ae2:	7b7a      	ldrb	r2, [r7, #13]
 8005ae4:	4909      	ldr	r1, [pc, #36]	; (8005b0c <UARTEx_SetNbDataToProcess+0x94>)
 8005ae6:	5c8a      	ldrb	r2, [r1, r2]
 8005ae8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005aec:	7b7a      	ldrb	r2, [r7, #13]
 8005aee:	4908      	ldr	r1, [pc, #32]	; (8005b10 <UARTEx_SetNbDataToProcess+0x98>)
 8005af0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005af2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005afe:	bf00      	nop
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	08005bb4 	.word	0x08005bb4
 8005b10:	08005bbc 	.word	0x08005bbc

08005b14 <memset>:
 8005b14:	4402      	add	r2, r0
 8005b16:	4603      	mov	r3, r0
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d100      	bne.n	8005b1e <memset+0xa>
 8005b1c:	4770      	bx	lr
 8005b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b22:	e7f9      	b.n	8005b18 <memset+0x4>

08005b24 <__libc_init_array>:
 8005b24:	b570      	push	{r4, r5, r6, lr}
 8005b26:	4d0d      	ldr	r5, [pc, #52]	; (8005b5c <__libc_init_array+0x38>)
 8005b28:	4c0d      	ldr	r4, [pc, #52]	; (8005b60 <__libc_init_array+0x3c>)
 8005b2a:	1b64      	subs	r4, r4, r5
 8005b2c:	10a4      	asrs	r4, r4, #2
 8005b2e:	2600      	movs	r6, #0
 8005b30:	42a6      	cmp	r6, r4
 8005b32:	d109      	bne.n	8005b48 <__libc_init_array+0x24>
 8005b34:	4d0b      	ldr	r5, [pc, #44]	; (8005b64 <__libc_init_array+0x40>)
 8005b36:	4c0c      	ldr	r4, [pc, #48]	; (8005b68 <__libc_init_array+0x44>)
 8005b38:	f000 f818 	bl	8005b6c <_init>
 8005b3c:	1b64      	subs	r4, r4, r5
 8005b3e:	10a4      	asrs	r4, r4, #2
 8005b40:	2600      	movs	r6, #0
 8005b42:	42a6      	cmp	r6, r4
 8005b44:	d105      	bne.n	8005b52 <__libc_init_array+0x2e>
 8005b46:	bd70      	pop	{r4, r5, r6, pc}
 8005b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b4c:	4798      	blx	r3
 8005b4e:	3601      	adds	r6, #1
 8005b50:	e7ee      	b.n	8005b30 <__libc_init_array+0xc>
 8005b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b56:	4798      	blx	r3
 8005b58:	3601      	adds	r6, #1
 8005b5a:	e7f2      	b.n	8005b42 <__libc_init_array+0x1e>
 8005b5c:	08005bcc 	.word	0x08005bcc
 8005b60:	08005bcc 	.word	0x08005bcc
 8005b64:	08005bcc 	.word	0x08005bcc
 8005b68:	08005bd0 	.word	0x08005bd0

08005b6c <_init>:
 8005b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6e:	bf00      	nop
 8005b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b72:	bc08      	pop	{r3}
 8005b74:	469e      	mov	lr, r3
 8005b76:	4770      	bx	lr

08005b78 <_fini>:
 8005b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7a:	bf00      	nop
 8005b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7e:	bc08      	pop	{r3}
 8005b80:	469e      	mov	lr, r3
 8005b82:	4770      	bx	lr
