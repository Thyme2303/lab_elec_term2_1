
lab1_elec_36.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003690  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038a8  080038a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080038a8  080038a8  000138a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038b0  080038b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038b0  080038b0  000138b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038b4  080038b4  000138b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  080038c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080038c4  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011d73  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021c4  00000000  00000000  00031df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  00033fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c3a  00000000  00000000  00034f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002567d  00000000  00000000  00035b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000119cb  00000000  00000000  0005b207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7b6b  00000000  00000000  0006cbd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004280  00000000  00000000  00164740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001689c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003850 	.word	0x08003850

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003850 	.word	0x08003850

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fa77 	bl	8000a0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f807 	bl	800052e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f8e8 	bl	80006f4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f84e 	bl	80005c4 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8000528:	f000 f896 	bl	8000658 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052c:	e7fe      	b.n	800052c <main+0x18>

0800052e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b094      	sub	sp, #80	; 0x50
 8000532:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000534:	f107 0318 	add.w	r3, r7, #24
 8000538:	2238      	movs	r2, #56	; 0x38
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f003 f95b 	bl	80037f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000550:	2000      	movs	r0, #0
 8000552:	f000 fd99 	bl	8001088 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000556:	2302      	movs	r3, #2
 8000558:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800055e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000560:	2340      	movs	r3, #64	; 0x40
 8000562:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000564:	2302      	movs	r3, #2
 8000566:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000568:	2302      	movs	r3, #2
 800056a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800056c:	2304      	movs	r3, #4
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000570:	2355      	movs	r3, #85	; 0x55
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800057c:	2302      	movs	r3, #2
 800057e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0318 	add.w	r3, r7, #24
 8000584:	4618      	mov	r0, r3
 8000586:	f000 fe33 	bl	80011f0 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000590:	f000 f91e 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2303      	movs	r3, #3
 800059a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2104      	movs	r1, #4
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 f931 	bl	8001814 <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005b8:	f000 f90a 	bl	80007d0 <Error_Handler>
  }
}
 80005bc:	bf00      	nop
 80005be:	3750      	adds	r7, #80	; 0x50
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <MX_LPUART1_UART_Init+0x8c>)
 80005ca:	4a22      	ldr	r2, [pc, #136]	; (8000654 <MX_LPUART1_UART_Init+0x90>)
 80005cc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005ce:	4b20      	ldr	r3, [pc, #128]	; (8000650 <MX_LPUART1_UART_Init+0x8c>)
 80005d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005d4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <MX_LPUART1_UART_Init+0x8c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <MX_LPUART1_UART_Init+0x8c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80005e2:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_LPUART1_UART_Init+0x8c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80005e8:	4b19      	ldr	r3, [pc, #100]	; (8000650 <MX_LPUART1_UART_Init+0x8c>)
 80005ea:	220c      	movs	r2, #12
 80005ec:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_LPUART1_UART_Init+0x8c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_LPUART1_UART_Init+0x8c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_LPUART1_UART_Init+0x8c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_LPUART1_UART_Init+0x8c>)
 8000602:	2200      	movs	r2, #0
 8000604:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000606:	4812      	ldr	r0, [pc, #72]	; (8000650 <MX_LPUART1_UART_Init+0x8c>)
 8000608:	f002 fa88 	bl	8002b1c <HAL_UART_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000612:	f000 f8dd 	bl	80007d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000616:	2100      	movs	r1, #0
 8000618:	480d      	ldr	r0, [pc, #52]	; (8000650 <MX_LPUART1_UART_Init+0x8c>)
 800061a:	f003 f823 	bl	8003664 <HAL_UARTEx_SetTxFifoThreshold>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000624:	f000 f8d4 	bl	80007d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000628:	2100      	movs	r1, #0
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <MX_LPUART1_UART_Init+0x8c>)
 800062c:	f003 f858 	bl	80036e0 <HAL_UARTEx_SetRxFifoThreshold>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000636:	f000 f8cb 	bl	80007d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_LPUART1_UART_Init+0x8c>)
 800063c:	f002 ffd9 	bl	80035f2 <HAL_UARTEx_DisableFifoMode>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000646:	f000 f8c3 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000028 	.word	0x20000028
 8000654:	40008000 	.word	0x40008000

08000658 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800065e:	f107 0310 	add.w	r3, r7, #16
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000676:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <MX_TIM2_Init+0x98>)
 8000678:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800067c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MX_TIM2_Init+0x98>)
 8000680:	22a9      	movs	r2, #169	; 0xa9
 8000682:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <MX_TIM2_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_TIM2_Init+0x98>)
 800068c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000690:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_TIM2_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_TIM2_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800069e:	4814      	ldr	r0, [pc, #80]	; (80006f0 <MX_TIM2_Init+0x98>)
 80006a0:	f001 fd22 	bl	80020e8 <HAL_TIM_Base_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80006aa:	f000 f891 	bl	80007d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	4619      	mov	r1, r3
 80006ba:	480d      	ldr	r0, [pc, #52]	; (80006f0 <MX_TIM2_Init+0x98>)
 80006bc:	f001 feba 	bl	8002434 <HAL_TIM_ConfigClockSource>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80006c6:	f000 f883 	bl	80007d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4619      	mov	r1, r3
 80006d6:	4806      	ldr	r0, [pc, #24]	; (80006f0 <MX_TIM2_Init+0x98>)
 80006d8:	f002 f944 	bl	8002964 <HAL_TIMEx_MasterConfigSynchronization>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006e2:	f000 f875 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	3720      	adds	r7, #32
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000bc 	.word	0x200000bc

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	4b2f      	ldr	r3, [pc, #188]	; (80007c8 <MX_GPIO_Init+0xd4>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4a2e      	ldr	r2, [pc, #184]	; (80007c8 <MX_GPIO_Init+0xd4>)
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4b2c      	ldr	r3, [pc, #176]	; (80007c8 <MX_GPIO_Init+0xd4>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f003 0304 	and.w	r3, r3, #4
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000722:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <MX_GPIO_Init+0xd4>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	4a28      	ldr	r2, [pc, #160]	; (80007c8 <MX_GPIO_Init+0xd4>)
 8000728:	f043 0320 	orr.w	r3, r3, #32
 800072c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072e:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <MX_GPIO_Init+0xd4>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	f003 0320 	and.w	r3, r3, #32
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <MX_GPIO_Init+0xd4>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	4a22      	ldr	r2, [pc, #136]	; (80007c8 <MX_GPIO_Init+0xd4>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000746:	4b20      	ldr	r3, [pc, #128]	; (80007c8 <MX_GPIO_Init+0xd4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <MX_GPIO_Init+0xd4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4a1c      	ldr	r2, [pc, #112]	; (80007c8 <MX_GPIO_Init+0xd4>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_GPIO_Init+0xd4>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2120      	movs	r1, #32
 800076e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000772:	f000 fc4d 	bl	8001010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800077c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	480f      	ldr	r0, [pc, #60]	; (80007cc <MX_GPIO_Init+0xd8>)
 800078e:	f000 fabd 	bl	8000d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000792:	2320      	movs	r3, #32
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ac:	f000 faae 	bl	8000d0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2100      	movs	r1, #0
 80007b4:	2028      	movs	r0, #40	; 0x28
 80007b6:	f000 fa74 	bl	8000ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007ba:	2028      	movs	r0, #40	; 0x28
 80007bc:	f000 fa8b 	bl	8000cd6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c0:	bf00      	nop
 80007c2:	3728      	adds	r7, #40	; 0x28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40021000 	.word	0x40021000
 80007cc:	48000800 	.word	0x48000800

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <Error_Handler+0x8>
	...

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_MspInit+0x44>)
 80007e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <HAL_MspInit+0x44>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6613      	str	r3, [r2, #96]	; 0x60
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <HAL_MspInit+0x44>)
 80007f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <HAL_MspInit+0x44>)
 80007fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <HAL_MspInit+0x44>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000804:	6593      	str	r3, [r2, #88]	; 0x58
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_MspInit+0x44>)
 8000808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000812:	f000 fcdd 	bl	80011d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40021000 	.word	0x40021000

08000824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b09e      	sub	sp, #120	; 0x78
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	2254      	movs	r2, #84	; 0x54
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f002 ffd7 	bl	80037f8 <memset>
  if(huart->Instance==LPUART1)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a1f      	ldr	r2, [pc, #124]	; (80008cc <HAL_UART_MspInit+0xa8>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d136      	bne.n	80008c2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000854:	2320      	movs	r3, #32
 8000856:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4618      	mov	r0, r3
 8000862:	f001 f9f3 	bl	8001c4c <HAL_RCCEx_PeriphCLKConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800086c:	f7ff ffb0 	bl	80007d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <HAL_UART_MspInit+0xac>)
 8000872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000874:	4a16      	ldr	r2, [pc, #88]	; (80008d0 <HAL_UART_MspInit+0xac>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <HAL_UART_MspInit+0xac>)
 800087e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_UART_MspInit+0xac>)
 800088a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088c:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <HAL_UART_MspInit+0xac>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_UART_MspInit+0xac>)
 8000896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80008a0:	230c      	movs	r3, #12
 80008a2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80008b0:	230c      	movs	r3, #12
 80008b2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008b8:	4619      	mov	r1, r3
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008be:	f000 fa25 	bl	8000d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80008c2:	bf00      	nop
 80008c4:	3778      	adds	r7, #120	; 0x78
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40008000 	.word	0x40008000
 80008d0:	40021000 	.word	0x40021000

080008d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008e4:	d113      	bne.n	800090e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_TIM_Base_MspInit+0x44>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <HAL_TIM_Base_MspInit+0x44>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6593      	str	r3, [r2, #88]	; 0x58
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_TIM_Base_MspInit+0x44>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	201c      	movs	r0, #28
 8000904:	f000 f9cd 	bl	8000ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000908:	201c      	movs	r0, #28
 800090a:	f000 f9e4 	bl	8000cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler+0x4>

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler+0x4>

0800092e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler+0x4>

0800093a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000968:	f000 f8a2 	bl	8000ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <TIM2_IRQHandler+0x10>)
 8000976:	f001 fc0e 	bl	8002196 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000bc 	.word	0x200000bc

08000984 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000988:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800098c:	f000 fb58 	bl	8001040 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}

08000994 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <SystemInit+0x20>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <SystemInit+0x20>)
 80009a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009bc:	f7ff ffea 	bl	8000994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009c2:	490d      	ldr	r1, [pc, #52]	; (80009f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c4:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <LoopForever+0xe>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d8:	4c0a      	ldr	r4, [pc, #40]	; (8000a04 <LoopForever+0x16>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e6:	f002 ff0f 	bl	8003808 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ea:	f7ff fd93 	bl	8000514 <main>

080009ee <LoopForever>:

LoopForever:
    b LoopForever
 80009ee:	e7fe      	b.n	80009ee <LoopForever>
  ldr   r0, =_estack
 80009f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009fc:	080038b8 	.word	0x080038b8
  ldr r2, =_sbss
 8000a00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a04:	2000010c 	.word	0x2000010c

08000a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC1_2_IRQHandler>

08000a0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a10:	2300      	movs	r3, #0
 8000a12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 f939 	bl	8000c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f000 f80e 	bl	8000a3c <HAL_InitTick>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d002      	beq.n	8000a2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	71fb      	strb	r3, [r7, #7]
 8000a2a:	e001      	b.n	8000a30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a2c:	f7ff fed6 	bl	80007dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a30:	79fb      	ldrb	r3, [r7, #7]

}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a44:	2300      	movs	r3, #0
 8000a46:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <HAL_InitTick+0x68>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d022      	beq.n	8000a96 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_InitTick+0x6c>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <HAL_InitTick+0x68>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 f944 	bl	8000cf2 <HAL_SYSTICK_Config>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d10f      	bne.n	8000a90 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b0f      	cmp	r3, #15
 8000a74:	d809      	bhi.n	8000a8a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a76:	2200      	movs	r2, #0
 8000a78:	6879      	ldr	r1, [r7, #4]
 8000a7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a7e:	f000 f910 	bl	8000ca2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <HAL_InitTick+0x70>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6013      	str	r3, [r2, #0]
 8000a88:	e007      	b.n	8000a9a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	73fb      	strb	r3, [r7, #15]
 8000a8e:	e004      	b.n	8000a9a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	73fb      	strb	r3, [r7, #15]
 8000a94:	e001      	b.n	8000a9a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000004 	.word	0x20000004

08000ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_IncTick+0x1c>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_IncTick+0x20>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4413      	add	r3, r2
 8000abe:	4a03      	ldr	r2, [pc, #12]	; (8000acc <HAL_IncTick+0x1c>)
 8000ac0:	6013      	str	r3, [r2, #0]
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	20000108 	.word	0x20000108
 8000ad0:	20000008 	.word	0x20000008

08000ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <HAL_GetTick+0x14>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000108 	.word	0x20000108

08000aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1e:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	60d3      	str	r3, [r2, #12]
}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <__NVIC_GetPriorityGrouping+0x18>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	f003 0307 	and.w	r3, r3, #7
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	db0b      	blt.n	8000b7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	f003 021f 	and.w	r2, r3, #31
 8000b68:	4907      	ldr	r1, [pc, #28]	; (8000b88 <__NVIC_EnableIRQ+0x38>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	095b      	lsrs	r3, r3, #5
 8000b70:	2001      	movs	r0, #1
 8000b72:	fa00 f202 	lsl.w	r2, r0, r2
 8000b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000e100 	.word	0xe000e100

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db0a      	blt.n	8000bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <__NVIC_SetPriority+0x4c>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	0112      	lsls	r2, r2, #4
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	440b      	add	r3, r1
 8000bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb4:	e00a      	b.n	8000bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4908      	ldr	r1, [pc, #32]	; (8000bdc <__NVIC_SetPriority+0x50>)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	0112      	lsls	r2, r2, #4
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	440b      	add	r3, r1
 8000bca:	761a      	strb	r2, [r3, #24]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	f1c3 0307 	rsb	r3, r3, #7
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	bf28      	it	cs
 8000bfe:	2304      	movcs	r3, #4
 8000c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3304      	adds	r3, #4
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d902      	bls.n	8000c10 <NVIC_EncodePriority+0x30>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3b03      	subs	r3, #3
 8000c0e:	e000      	b.n	8000c12 <NVIC_EncodePriority+0x32>
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43d9      	mvns	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	4313      	orrs	r3, r2
         );
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3724      	adds	r7, #36	; 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c58:	d301      	bcc.n	8000c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00f      	b.n	8000c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <SysTick_Config+0x40>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c66:	210f      	movs	r1, #15
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f7ff ff8e 	bl	8000b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <SysTick_Config+0x40>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <SysTick_Config+0x40>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	e000e010 	.word	0xe000e010

08000c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff29 	bl	8000aec <__NVIC_SetPriorityGrouping>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb0:	f7ff ff40 	bl	8000b34 <__NVIC_GetPriorityGrouping>
 8000cb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	68b9      	ldr	r1, [r7, #8]
 8000cba:	6978      	ldr	r0, [r7, #20]
 8000cbc:	f7ff ff90 	bl	8000be0 <NVIC_EncodePriority>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff5f 	bl	8000b8c <__NVIC_SetPriority>
}
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff33 	bl	8000b50 <__NVIC_EnableIRQ>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff ffa4 	bl	8000c48 <SysTick_Config>
 8000d00:	4603      	mov	r3, r0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b087      	sub	sp, #28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d1a:	e15a      	b.n	8000fd2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	2101      	movs	r1, #1
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	fa01 f303 	lsl.w	r3, r1, r3
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f000 814c 	beq.w	8000fcc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d005      	beq.n	8000d4c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d130      	bne.n	8000dae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	2203      	movs	r2, #3
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68da      	ldr	r2, [r3, #12]
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d82:	2201      	movs	r2, #1
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	091b      	lsrs	r3, r3, #4
 8000d98:	f003 0201 	and.w	r2, r3, #1
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	d017      	beq.n	8000dea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d123      	bne.n	8000e3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	08da      	lsrs	r2, r3, #3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3208      	adds	r2, #8
 8000dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	220f      	movs	r2, #15
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	691a      	ldr	r2, [r3, #16]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	f003 0307 	and.w	r3, r3, #7
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	08da      	lsrs	r2, r3, #3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3208      	adds	r2, #8
 8000e38:	6939      	ldr	r1, [r7, #16]
 8000e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	2203      	movs	r2, #3
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0203 	and.w	r2, r3, #3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 80a6 	beq.w	8000fcc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e80:	4b5b      	ldr	r3, [pc, #364]	; (8000ff0 <HAL_GPIO_Init+0x2e4>)
 8000e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e84:	4a5a      	ldr	r2, [pc, #360]	; (8000ff0 <HAL_GPIO_Init+0x2e4>)
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	6613      	str	r3, [r2, #96]	; 0x60
 8000e8c:	4b58      	ldr	r3, [pc, #352]	; (8000ff0 <HAL_GPIO_Init+0x2e4>)
 8000e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e98:	4a56      	ldr	r2, [pc, #344]	; (8000ff4 <HAL_GPIO_Init+0x2e8>)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	089b      	lsrs	r3, r3, #2
 8000e9e:	3302      	adds	r3, #2
 8000ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	220f      	movs	r2, #15
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ec2:	d01f      	beq.n	8000f04 <HAL_GPIO_Init+0x1f8>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a4c      	ldr	r2, [pc, #304]	; (8000ff8 <HAL_GPIO_Init+0x2ec>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d019      	beq.n	8000f00 <HAL_GPIO_Init+0x1f4>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a4b      	ldr	r2, [pc, #300]	; (8000ffc <HAL_GPIO_Init+0x2f0>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d013      	beq.n	8000efc <HAL_GPIO_Init+0x1f0>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a4a      	ldr	r2, [pc, #296]	; (8001000 <HAL_GPIO_Init+0x2f4>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d00d      	beq.n	8000ef8 <HAL_GPIO_Init+0x1ec>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a49      	ldr	r2, [pc, #292]	; (8001004 <HAL_GPIO_Init+0x2f8>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d007      	beq.n	8000ef4 <HAL_GPIO_Init+0x1e8>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a48      	ldr	r2, [pc, #288]	; (8001008 <HAL_GPIO_Init+0x2fc>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d101      	bne.n	8000ef0 <HAL_GPIO_Init+0x1e4>
 8000eec:	2305      	movs	r3, #5
 8000eee:	e00a      	b.n	8000f06 <HAL_GPIO_Init+0x1fa>
 8000ef0:	2306      	movs	r3, #6
 8000ef2:	e008      	b.n	8000f06 <HAL_GPIO_Init+0x1fa>
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	e006      	b.n	8000f06 <HAL_GPIO_Init+0x1fa>
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e004      	b.n	8000f06 <HAL_GPIO_Init+0x1fa>
 8000efc:	2302      	movs	r3, #2
 8000efe:	e002      	b.n	8000f06 <HAL_GPIO_Init+0x1fa>
 8000f00:	2301      	movs	r3, #1
 8000f02:	e000      	b.n	8000f06 <HAL_GPIO_Init+0x1fa>
 8000f04:	2300      	movs	r3, #0
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	f002 0203 	and.w	r2, r2, #3
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	4093      	lsls	r3, r2
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f16:	4937      	ldr	r1, [pc, #220]	; (8000ff4 <HAL_GPIO_Init+0x2e8>)
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f24:	4b39      	ldr	r3, [pc, #228]	; (800100c <HAL_GPIO_Init+0x300>)
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f48:	4a30      	ldr	r2, [pc, #192]	; (800100c <HAL_GPIO_Init+0x300>)
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f4e:	4b2f      	ldr	r3, [pc, #188]	; (800100c <HAL_GPIO_Init+0x300>)
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f72:	4a26      	ldr	r2, [pc, #152]	; (800100c <HAL_GPIO_Init+0x300>)
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f78:	4b24      	ldr	r3, [pc, #144]	; (800100c <HAL_GPIO_Init+0x300>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f9c:	4a1b      	ldr	r2, [pc, #108]	; (800100c <HAL_GPIO_Init+0x300>)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <HAL_GPIO_Init+0x300>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fc6:	4a11      	ldr	r2, [pc, #68]	; (800100c <HAL_GPIO_Init+0x300>)
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f47f ae9d 	bne.w	8000d1c <HAL_GPIO_Init+0x10>
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
 8000fe6:	371c      	adds	r7, #28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010000 	.word	0x40010000
 8000ff8:	48000400 	.word	0x48000400
 8000ffc:	48000800 	.word	0x48000800
 8001000:	48000c00 	.word	0x48000c00
 8001004:	48001000 	.word	0x48001000
 8001008:	48001400 	.word	0x48001400
 800100c:	40010400 	.word	0x40010400

08001010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]
 800101c:	4613      	mov	r3, r2
 800101e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001020:	787b      	ldrb	r3, [r7, #1]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001026:	887a      	ldrh	r2, [r7, #2]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800102c:	e002      	b.n	8001034 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800102e:	887a      	ldrh	r2, [r7, #2]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800104c:	695a      	ldr	r2, [r3, #20]
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	4013      	ands	r3, r2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d006      	beq.n	8001064 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	4618      	mov	r0, r3
 8001060:	f000 f806 	bl	8001070 <HAL_GPIO_EXTI_Callback>
  }
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40010400 	.word	0x40010400

08001070 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d141      	bne.n	800111a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001096:	4b4b      	ldr	r3, [pc, #300]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800109e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010a2:	d131      	bne.n	8001108 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010a4:	4b47      	ldr	r3, [pc, #284]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010aa:	4a46      	ldr	r2, [pc, #280]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b4:	4b43      	ldr	r3, [pc, #268]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010bc:	4a41      	ldr	r2, [pc, #260]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010c4:	4b40      	ldr	r3, [pc, #256]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2232      	movs	r2, #50	; 0x32
 80010ca:	fb02 f303 	mul.w	r3, r2, r3
 80010ce:	4a3f      	ldr	r2, [pc, #252]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010d0:	fba2 2303 	umull	r2, r3, r2, r3
 80010d4:	0c9b      	lsrs	r3, r3, #18
 80010d6:	3301      	adds	r3, #1
 80010d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010da:	e002      	b.n	80010e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	3b01      	subs	r3, #1
 80010e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010e2:	4b38      	ldr	r3, [pc, #224]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ee:	d102      	bne.n	80010f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f2      	bne.n	80010dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010f6:	4b33      	ldr	r3, [pc, #204]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001102:	d158      	bne.n	80011b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e057      	b.n	80011b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001108:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800110a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800110e:	4a2d      	ldr	r2, [pc, #180]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001114:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001118:	e04d      	b.n	80011b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001120:	d141      	bne.n	80011a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001122:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800112a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800112e:	d131      	bne.n	8001194 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001130:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001136:	4a23      	ldr	r2, [pc, #140]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800113c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001140:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001148:	4a1e      	ldr	r2, [pc, #120]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800114a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800114e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2232      	movs	r2, #50	; 0x32
 8001156:	fb02 f303 	mul.w	r3, r2, r3
 800115a:	4a1c      	ldr	r2, [pc, #112]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800115c:	fba2 2303 	umull	r2, r3, r2, r3
 8001160:	0c9b      	lsrs	r3, r3, #18
 8001162:	3301      	adds	r3, #1
 8001164:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001166:	e002      	b.n	800116e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3b01      	subs	r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800117a:	d102      	bne.n	8001182 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f2      	bne.n	8001168 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800118a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800118e:	d112      	bne.n	80011b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e011      	b.n	80011b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800119c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80011a4:	e007      	b.n	80011b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	40007000 	.word	0x40007000
 80011c8:	20000000 	.word	0x20000000
 80011cc:	431bde83 	.word	0x431bde83

080011d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	4a04      	ldr	r2, [pc, #16]	; (80011ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80011da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011de:	6093      	str	r3, [r2, #8]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40007000 	.word	0x40007000

080011f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e2fe      	b.n	8001800 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d075      	beq.n	80012fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800120e:	4b97      	ldr	r3, [pc, #604]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 030c 	and.w	r3, r3, #12
 8001216:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001218:	4b94      	ldr	r3, [pc, #592]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	2b0c      	cmp	r3, #12
 8001226:	d102      	bne.n	800122e <HAL_RCC_OscConfig+0x3e>
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	2b03      	cmp	r3, #3
 800122c:	d002      	beq.n	8001234 <HAL_RCC_OscConfig+0x44>
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	2b08      	cmp	r3, #8
 8001232:	d10b      	bne.n	800124c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001234:	4b8d      	ldr	r3, [pc, #564]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d05b      	beq.n	80012f8 <HAL_RCC_OscConfig+0x108>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d157      	bne.n	80012f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e2d9      	b.n	8001800 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001254:	d106      	bne.n	8001264 <HAL_RCC_OscConfig+0x74>
 8001256:	4b85      	ldr	r3, [pc, #532]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a84      	ldr	r2, [pc, #528]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 800125c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e01d      	b.n	80012a0 <HAL_RCC_OscConfig+0xb0>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800126c:	d10c      	bne.n	8001288 <HAL_RCC_OscConfig+0x98>
 800126e:	4b7f      	ldr	r3, [pc, #508]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a7e      	ldr	r2, [pc, #504]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 8001274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	4b7c      	ldr	r3, [pc, #496]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a7b      	ldr	r2, [pc, #492]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 8001280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e00b      	b.n	80012a0 <HAL_RCC_OscConfig+0xb0>
 8001288:	4b78      	ldr	r3, [pc, #480]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a77      	ldr	r2, [pc, #476]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 800128e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b75      	ldr	r3, [pc, #468]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a74      	ldr	r2, [pc, #464]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 800129a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800129e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d013      	beq.n	80012d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a8:	f7ff fc14 	bl	8000ad4 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b0:	f7ff fc10 	bl	8000ad4 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b64      	cmp	r3, #100	; 0x64
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e29e      	b.n	8001800 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012c2:	4b6a      	ldr	r3, [pc, #424]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0xc0>
 80012ce:	e014      	b.n	80012fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d0:	f7ff fc00 	bl	8000ad4 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d8:	f7ff fbfc 	bl	8000ad4 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b64      	cmp	r3, #100	; 0x64
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e28a      	b.n	8001800 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012ea:	4b60      	ldr	r3, [pc, #384]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f0      	bne.n	80012d8 <HAL_RCC_OscConfig+0xe8>
 80012f6:	e000      	b.n	80012fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d075      	beq.n	80013f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001306:	4b59      	ldr	r3, [pc, #356]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001310:	4b56      	ldr	r3, [pc, #344]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	2b0c      	cmp	r3, #12
 800131e:	d102      	bne.n	8001326 <HAL_RCC_OscConfig+0x136>
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d002      	beq.n	800132c <HAL_RCC_OscConfig+0x13c>
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2b04      	cmp	r3, #4
 800132a:	d11f      	bne.n	800136c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800132c:	4b4f      	ldr	r3, [pc, #316]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001334:	2b00      	cmp	r3, #0
 8001336:	d005      	beq.n	8001344 <HAL_RCC_OscConfig+0x154>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e25d      	b.n	8001800 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001344:	4b49      	ldr	r3, [pc, #292]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	061b      	lsls	r3, r3, #24
 8001352:	4946      	ldr	r1, [pc, #280]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001358:	4b45      	ldr	r3, [pc, #276]	; (8001470 <HAL_RCC_OscConfig+0x280>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fb6d 	bl	8000a3c <HAL_InitTick>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d043      	beq.n	80013f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e249      	b.n	8001800 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d023      	beq.n	80013bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001374:	4b3d      	ldr	r3, [pc, #244]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a3c      	ldr	r2, [pc, #240]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 800137a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001380:	f7ff fba8 	bl	8000ad4 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001388:	f7ff fba4 	bl	8000ad4 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e232      	b.n	8001800 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800139a:	4b34      	ldr	r3, [pc, #208]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a6:	4b31      	ldr	r3, [pc, #196]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	061b      	lsls	r3, r3, #24
 80013b4:	492d      	ldr	r1, [pc, #180]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	604b      	str	r3, [r1, #4]
 80013ba:	e01a      	b.n	80013f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013bc:	4b2b      	ldr	r3, [pc, #172]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a2a      	ldr	r2, [pc, #168]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 80013c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c8:	f7ff fb84 	bl	8000ad4 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d0:	f7ff fb80 	bl	8000ad4 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e20e      	b.n	8001800 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013e2:	4b22      	ldr	r3, [pc, #136]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0x1e0>
 80013ee:	e000      	b.n	80013f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d041      	beq.n	8001482 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d01c      	beq.n	8001440 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 8001408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800140c:	4a17      	ldr	r2, [pc, #92]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001416:	f7ff fb5d 	bl	8000ad4 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800141e:	f7ff fb59 	bl	8000ad4 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e1e7      	b.n	8001800 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001430:	4b0e      	ldr	r3, [pc, #56]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 8001432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0ef      	beq.n	800141e <HAL_RCC_OscConfig+0x22e>
 800143e:	e020      	b.n	8001482 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 8001442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001446:	4a09      	ldr	r2, [pc, #36]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 8001448:	f023 0301 	bic.w	r3, r3, #1
 800144c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001450:	f7ff fb40 	bl	8000ad4 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001456:	e00d      	b.n	8001474 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001458:	f7ff fb3c 	bl	8000ad4 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d906      	bls.n	8001474 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e1ca      	b.n	8001800 <HAL_RCC_OscConfig+0x610>
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000
 8001470:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001474:	4b8c      	ldr	r3, [pc, #560]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 8001476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1ea      	bne.n	8001458 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 80a6 	beq.w	80015dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001490:	2300      	movs	r3, #0
 8001492:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001494:	4b84      	ldr	r3, [pc, #528]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 8001496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_OscConfig+0x2b4>
 80014a0:	2301      	movs	r3, #1
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x2b6>
 80014a4:	2300      	movs	r3, #0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00d      	beq.n	80014c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	4b7f      	ldr	r3, [pc, #508]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 80014ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ae:	4a7e      	ldr	r2, [pc, #504]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	6593      	str	r3, [r2, #88]	; 0x58
 80014b6:	4b7c      	ldr	r3, [pc, #496]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 80014b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014c2:	2301      	movs	r3, #1
 80014c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c6:	4b79      	ldr	r3, [pc, #484]	; (80016ac <HAL_RCC_OscConfig+0x4bc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d118      	bne.n	8001504 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014d2:	4b76      	ldr	r3, [pc, #472]	; (80016ac <HAL_RCC_OscConfig+0x4bc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a75      	ldr	r2, [pc, #468]	; (80016ac <HAL_RCC_OscConfig+0x4bc>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014de:	f7ff faf9 	bl	8000ad4 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e6:	f7ff faf5 	bl	8000ad4 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e183      	b.n	8001800 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f8:	4b6c      	ldr	r3, [pc, #432]	; (80016ac <HAL_RCC_OscConfig+0x4bc>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d108      	bne.n	800151e <HAL_RCC_OscConfig+0x32e>
 800150c:	4b66      	ldr	r3, [pc, #408]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 800150e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001512:	4a65      	ldr	r2, [pc, #404]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800151c:	e024      	b.n	8001568 <HAL_RCC_OscConfig+0x378>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b05      	cmp	r3, #5
 8001524:	d110      	bne.n	8001548 <HAL_RCC_OscConfig+0x358>
 8001526:	4b60      	ldr	r3, [pc, #384]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 8001528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800152c:	4a5e      	ldr	r2, [pc, #376]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001536:	4b5c      	ldr	r3, [pc, #368]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 8001538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153c:	4a5a      	ldr	r2, [pc, #360]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001546:	e00f      	b.n	8001568 <HAL_RCC_OscConfig+0x378>
 8001548:	4b57      	ldr	r3, [pc, #348]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 800154a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800154e:	4a56      	ldr	r2, [pc, #344]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 8001550:	f023 0301 	bic.w	r3, r3, #1
 8001554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001558:	4b53      	ldr	r3, [pc, #332]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 800155a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800155e:	4a52      	ldr	r2, [pc, #328]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 8001560:	f023 0304 	bic.w	r3, r3, #4
 8001564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d016      	beq.n	800159e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001570:	f7ff fab0 	bl	8000ad4 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001576:	e00a      	b.n	800158e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001578:	f7ff faac 	bl	8000ad4 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	f241 3288 	movw	r2, #5000	; 0x1388
 8001586:	4293      	cmp	r3, r2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e138      	b.n	8001800 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800158e:	4b46      	ldr	r3, [pc, #280]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 8001590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0ed      	beq.n	8001578 <HAL_RCC_OscConfig+0x388>
 800159c:	e015      	b.n	80015ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159e:	f7ff fa99 	bl	8000ad4 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015a4:	e00a      	b.n	80015bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a6:	f7ff fa95 	bl	8000ad4 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e121      	b.n	8001800 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015bc:	4b3a      	ldr	r3, [pc, #232]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 80015be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1ed      	bne.n	80015a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015ca:	7ffb      	ldrb	r3, [r7, #31]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d105      	bne.n	80015dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d0:	4b35      	ldr	r3, [pc, #212]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 80015d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d4:	4a34      	ldr	r2, [pc, #208]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 80015d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0320 	and.w	r3, r3, #32
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d03c      	beq.n	8001662 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d01c      	beq.n	800162a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015f0:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 80015f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015f6:	4a2c      	ldr	r2, [pc, #176]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001600:	f7ff fa68 	bl	8000ad4 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001608:	f7ff fa64 	bl	8000ad4 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e0f2      	b.n	8001800 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800161a:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 800161c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0ef      	beq.n	8001608 <HAL_RCC_OscConfig+0x418>
 8001628:	e01b      	b.n	8001662 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800162a:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 800162c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001630:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 8001632:	f023 0301 	bic.w	r3, r3, #1
 8001636:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163a:	f7ff fa4b 	bl	8000ad4 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001642:	f7ff fa47 	bl	8000ad4 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e0d5      	b.n	8001800 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 8001656:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1ef      	bne.n	8001642 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 80c9 	beq.w	80017fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b0c      	cmp	r3, #12
 8001676:	f000 8083 	beq.w	8001780 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d15e      	bne.n	8001740 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <HAL_RCC_OscConfig+0x4b8>)
 8001688:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800168c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7ff fa21 	bl	8000ad4 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001694:	e00c      	b.n	80016b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001696:	f7ff fa1d 	bl	8000ad4 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d905      	bls.n	80016b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e0ab      	b.n	8001800 <HAL_RCC_OscConfig+0x610>
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b0:	4b55      	ldr	r3, [pc, #340]	; (8001808 <HAL_RCC_OscConfig+0x618>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1ec      	bne.n	8001696 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016bc:	4b52      	ldr	r3, [pc, #328]	; (8001808 <HAL_RCC_OscConfig+0x618>)
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	4b52      	ldr	r3, [pc, #328]	; (800180c <HAL_RCC_OscConfig+0x61c>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6a11      	ldr	r1, [r2, #32]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016cc:	3a01      	subs	r2, #1
 80016ce:	0112      	lsls	r2, r2, #4
 80016d0:	4311      	orrs	r1, r2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80016d6:	0212      	lsls	r2, r2, #8
 80016d8:	4311      	orrs	r1, r2
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016de:	0852      	lsrs	r2, r2, #1
 80016e0:	3a01      	subs	r2, #1
 80016e2:	0552      	lsls	r2, r2, #21
 80016e4:	4311      	orrs	r1, r2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016ea:	0852      	lsrs	r2, r2, #1
 80016ec:	3a01      	subs	r2, #1
 80016ee:	0652      	lsls	r2, r2, #25
 80016f0:	4311      	orrs	r1, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016f6:	06d2      	lsls	r2, r2, #27
 80016f8:	430a      	orrs	r2, r1
 80016fa:	4943      	ldr	r1, [pc, #268]	; (8001808 <HAL_RCC_OscConfig+0x618>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001700:	4b41      	ldr	r3, [pc, #260]	; (8001808 <HAL_RCC_OscConfig+0x618>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a40      	ldr	r2, [pc, #256]	; (8001808 <HAL_RCC_OscConfig+0x618>)
 8001706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800170a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800170c:	4b3e      	ldr	r3, [pc, #248]	; (8001808 <HAL_RCC_OscConfig+0x618>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	4a3d      	ldr	r2, [pc, #244]	; (8001808 <HAL_RCC_OscConfig+0x618>)
 8001712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001716:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001718:	f7ff f9dc 	bl	8000ad4 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001720:	f7ff f9d8 	bl	8000ad4 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e066      	b.n	8001800 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001732:	4b35      	ldr	r3, [pc, #212]	; (8001808 <HAL_RCC_OscConfig+0x618>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0x530>
 800173e:	e05e      	b.n	80017fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001740:	4b31      	ldr	r3, [pc, #196]	; (8001808 <HAL_RCC_OscConfig+0x618>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a30      	ldr	r2, [pc, #192]	; (8001808 <HAL_RCC_OscConfig+0x618>)
 8001746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800174a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff f9c2 	bl	8000ad4 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001754:	f7ff f9be 	bl	8000ad4 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e04c      	b.n	8001800 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001766:	4b28      	ldr	r3, [pc, #160]	; (8001808 <HAL_RCC_OscConfig+0x618>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001772:	4b25      	ldr	r3, [pc, #148]	; (8001808 <HAL_RCC_OscConfig+0x618>)
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	4924      	ldr	r1, [pc, #144]	; (8001808 <HAL_RCC_OscConfig+0x618>)
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <HAL_RCC_OscConfig+0x620>)
 800177a:	4013      	ands	r3, r2
 800177c:	60cb      	str	r3, [r1, #12]
 800177e:	e03e      	b.n	80017fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d101      	bne.n	800178c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e039      	b.n	8001800 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800178c:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <HAL_RCC_OscConfig+0x618>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f003 0203 	and.w	r2, r3, #3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	429a      	cmp	r2, r3
 800179e:	d12c      	bne.n	80017fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	3b01      	subs	r3, #1
 80017ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d123      	bne.n	80017fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017be:	429a      	cmp	r2, r3
 80017c0:	d11b      	bne.n	80017fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d113      	bne.n	80017fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	085b      	lsrs	r3, r3, #1
 80017de:	3b01      	subs	r3, #1
 80017e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d109      	bne.n	80017fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f0:	085b      	lsrs	r3, r3, #1
 80017f2:	3b01      	subs	r3, #1
 80017f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d001      	beq.n	80017fe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3720      	adds	r7, #32
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40021000 	.word	0x40021000
 800180c:	019f800c 	.word	0x019f800c
 8001810:	feeefffc 	.word	0xfeeefffc

08001814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e11e      	b.n	8001a6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800182c:	4b91      	ldr	r3, [pc, #580]	; (8001a74 <HAL_RCC_ClockConfig+0x260>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 030f 	and.w	r3, r3, #15
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d910      	bls.n	800185c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183a:	4b8e      	ldr	r3, [pc, #568]	; (8001a74 <HAL_RCC_ClockConfig+0x260>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f023 020f 	bic.w	r2, r3, #15
 8001842:	498c      	ldr	r1, [pc, #560]	; (8001a74 <HAL_RCC_ClockConfig+0x260>)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	4313      	orrs	r3, r2
 8001848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800184a:	4b8a      	ldr	r3, [pc, #552]	; (8001a74 <HAL_RCC_ClockConfig+0x260>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d001      	beq.n	800185c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e106      	b.n	8001a6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d073      	beq.n	8001950 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b03      	cmp	r3, #3
 800186e:	d129      	bne.n	80018c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001870:	4b81      	ldr	r3, [pc, #516]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0f4      	b.n	8001a6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001880:	f000 f99e 	bl	8001bc0 <RCC_GetSysClockFreqFromPLLSource>
 8001884:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4a7c      	ldr	r2, [pc, #496]	; (8001a7c <HAL_RCC_ClockConfig+0x268>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d93f      	bls.n	800190e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800188e:	4b7a      	ldr	r3, [pc, #488]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d033      	beq.n	800190e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d12f      	bne.n	800190e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018ae:	4b72      	ldr	r3, [pc, #456]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018b6:	4a70      	ldr	r2, [pc, #448]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 80018b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	e024      	b.n	800190e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d107      	bne.n	80018dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018cc:	4b6a      	ldr	r3, [pc, #424]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d109      	bne.n	80018ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0c6      	b.n	8001a6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018dc:	4b66      	ldr	r3, [pc, #408]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0be      	b.n	8001a6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80018ec:	f000 f8ce 	bl	8001a8c <HAL_RCC_GetSysClockFreq>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4a61      	ldr	r2, [pc, #388]	; (8001a7c <HAL_RCC_ClockConfig+0x268>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d909      	bls.n	800190e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018fa:	4b5f      	ldr	r3, [pc, #380]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001902:	4a5d      	ldr	r2, [pc, #372]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 8001904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001908:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800190e:	4b5a      	ldr	r3, [pc, #360]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f023 0203 	bic.w	r2, r3, #3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	4957      	ldr	r1, [pc, #348]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 800191c:	4313      	orrs	r3, r2
 800191e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001920:	f7ff f8d8 	bl	8000ad4 <HAL_GetTick>
 8001924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001926:	e00a      	b.n	800193e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001928:	f7ff f8d4 	bl	8000ad4 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	; 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e095      	b.n	8001a6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193e:	4b4e      	ldr	r3, [pc, #312]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 020c 	and.w	r2, r3, #12
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	429a      	cmp	r2, r3
 800194e:	d1eb      	bne.n	8001928 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d023      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001968:	4b43      	ldr	r3, [pc, #268]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4a42      	ldr	r2, [pc, #264]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 800196e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001972:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d007      	beq.n	8001990 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001980:	4b3d      	ldr	r3, [pc, #244]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001988:	4a3b      	ldr	r2, [pc, #236]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 800198a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800198e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001990:	4b39      	ldr	r3, [pc, #228]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4936      	ldr	r1, [pc, #216]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	2b80      	cmp	r3, #128	; 0x80
 80019a8:	d105      	bne.n	80019b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80019aa:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	4a32      	ldr	r2, [pc, #200]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 80019b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019b6:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <HAL_RCC_ClockConfig+0x260>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d21d      	bcs.n	8001a00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c4:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <HAL_RCC_ClockConfig+0x260>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f023 020f 	bic.w	r2, r3, #15
 80019cc:	4929      	ldr	r1, [pc, #164]	; (8001a74 <HAL_RCC_ClockConfig+0x260>)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019d4:	f7ff f87e 	bl	8000ad4 <HAL_GetTick>
 80019d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019dc:	f7ff f87a 	bl	8000ad4 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e03b      	b.n	8001a6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <HAL_RCC_ClockConfig+0x260>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d1ed      	bne.n	80019dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d008      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	4917      	ldr	r1, [pc, #92]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d009      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a2a:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	490f      	ldr	r1, [pc, #60]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a3e:	f000 f825 	bl	8001a8c <HAL_RCC_GetSysClockFreq>
 8001a42:	4602      	mov	r2, r0
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <HAL_RCC_ClockConfig+0x264>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	091b      	lsrs	r3, r3, #4
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	490c      	ldr	r1, [pc, #48]	; (8001a80 <HAL_RCC_ClockConfig+0x26c>)
 8001a50:	5ccb      	ldrb	r3, [r1, r3]
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_RCC_ClockConfig+0x270>)
 8001a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_RCC_ClockConfig+0x274>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe ffea 	bl	8000a3c <HAL_InitTick>
 8001a68:	4603      	mov	r3, r0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40022000 	.word	0x40022000
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	04c4b400 	.word	0x04c4b400
 8001a80:	08003868 	.word	0x08003868
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000004 	.word	0x20000004

08001a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a92:	4b2c      	ldr	r3, [pc, #176]	; (8001b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d102      	bne.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a9e:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	e047      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001aa4:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d102      	bne.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ab0:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	e03e      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ab6:	4b23      	ldr	r3, [pc, #140]	; (8001b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b0c      	cmp	r3, #12
 8001ac0:	d136      	bne.n	8001b30 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ac2:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001acc:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	091b      	lsrs	r3, r3, #4
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d10c      	bne.n	8001afa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ae0:	4a1a      	ldr	r2, [pc, #104]	; (8001b4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae8:	4a16      	ldr	r2, [pc, #88]	; (8001b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aea:	68d2      	ldr	r2, [r2, #12]
 8001aec:	0a12      	lsrs	r2, r2, #8
 8001aee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001af2:	fb02 f303 	mul.w	r3, r2, r3
 8001af6:	617b      	str	r3, [r7, #20]
      break;
 8001af8:	e00c      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001afa:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	4a10      	ldr	r2, [pc, #64]	; (8001b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b04:	68d2      	ldr	r2, [r2, #12]
 8001b06:	0a12      	lsrs	r2, r2, #8
 8001b08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b0c:	fb02 f303 	mul.w	r3, r2, r3
 8001b10:	617b      	str	r3, [r7, #20]
      break;
 8001b12:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	0e5b      	lsrs	r3, r3, #25
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	3301      	adds	r3, #1
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	e001      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b34:	693b      	ldr	r3, [r7, #16]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	371c      	adds	r7, #28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000
 8001b48:	00f42400 	.word	0x00f42400
 8001b4c:	016e3600 	.word	0x016e3600

08001b50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000000 	.word	0x20000000

08001b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b6c:	f7ff fff0 	bl	8001b50 <HAL_RCC_GetHCLKFreq>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	0a1b      	lsrs	r3, r3, #8
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	4904      	ldr	r1, [pc, #16]	; (8001b90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b7e:	5ccb      	ldrb	r3, [r1, r3]
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	08003878 	.word	0x08003878

08001b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b98:	f7ff ffda 	bl	8001b50 <HAL_RCC_GetHCLKFreq>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	0adb      	lsrs	r3, r3, #11
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	4904      	ldr	r1, [pc, #16]	; (8001bbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001baa:	5ccb      	ldrb	r3, [r1, r3]
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	08003878 	.word	0x08003878

08001bc0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	091b      	lsrs	r3, r3, #4
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3301      	adds	r3, #1
 8001bdc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d10c      	bne.n	8001bfe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001be4:	4a17      	ldr	r2, [pc, #92]	; (8001c44 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bec:	4a14      	ldr	r2, [pc, #80]	; (8001c40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bee:	68d2      	ldr	r2, [r2, #12]
 8001bf0:	0a12      	lsrs	r2, r2, #8
 8001bf2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bf6:	fb02 f303 	mul.w	r3, r2, r3
 8001bfa:	617b      	str	r3, [r7, #20]
    break;
 8001bfc:	e00c      	b.n	8001c18 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	4a0e      	ldr	r2, [pc, #56]	; (8001c40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c08:	68d2      	ldr	r2, [r2, #12]
 8001c0a:	0a12      	lsrs	r2, r2, #8
 8001c0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c10:	fb02 f303 	mul.w	r3, r2, r3
 8001c14:	617b      	str	r3, [r7, #20]
    break;
 8001c16:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	0e5b      	lsrs	r3, r3, #25
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	3301      	adds	r3, #1
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c30:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001c32:	687b      	ldr	r3, [r7, #4]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	371c      	adds	r7, #28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	40021000 	.word	0x40021000
 8001c44:	016e3600 	.word	0x016e3600
 8001c48:	00f42400 	.word	0x00f42400

08001c4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c54:	2300      	movs	r3, #0
 8001c56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c58:	2300      	movs	r3, #0
 8001c5a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 8098 	beq.w	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c6e:	4b43      	ldr	r3, [pc, #268]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10d      	bne.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	4b40      	ldr	r3, [pc, #256]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7e:	4a3f      	ldr	r2, [pc, #252]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c84:	6593      	str	r3, [r2, #88]	; 0x58
 8001c86:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c92:	2301      	movs	r3, #1
 8001c94:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c96:	4b3a      	ldr	r3, [pc, #232]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a39      	ldr	r2, [pc, #228]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ca2:	f7fe ff17 	bl	8000ad4 <HAL_GetTick>
 8001ca6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ca8:	e009      	b.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001caa:	f7fe ff13 	bl	8000ad4 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d902      	bls.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	74fb      	strb	r3, [r7, #19]
        break;
 8001cbc:	e005      	b.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cbe:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0ef      	beq.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001cca:	7cfb      	ldrb	r3, [r7, #19]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d159      	bne.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001cd0:	4b2a      	ldr	r3, [pc, #168]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cda:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d01e      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d019      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001cec:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cf6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cf8:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cfe:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d08:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0e:	4a1b      	ldr	r2, [pc, #108]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d18:	4a18      	ldr	r2, [pc, #96]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d016      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2a:	f7fe fed3 	bl	8000ad4 <HAL_GetTick>
 8001d2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d30:	e00b      	b.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7fe fecf 	bl	8000ad4 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d902      	bls.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	74fb      	strb	r3, [r7, #19]
            break;
 8001d48:	e006      	b.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0ec      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001d58:	7cfb      	ldrb	r3, [r7, #19]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10b      	bne.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d5e:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d6c:	4903      	ldr	r1, [pc, #12]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001d74:	e008      	b.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d76:	7cfb      	ldrb	r3, [r7, #19]
 8001d78:	74bb      	strb	r3, [r7, #18]
 8001d7a:	e005      	b.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d84:	7cfb      	ldrb	r3, [r7, #19]
 8001d86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d88:	7c7b      	ldrb	r3, [r7, #17]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d105      	bne.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d8e:	4ba7      	ldr	r3, [pc, #668]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	4aa6      	ldr	r2, [pc, #664]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00a      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001da6:	4ba1      	ldr	r3, [pc, #644]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dac:	f023 0203 	bic.w	r2, r3, #3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	499d      	ldr	r1, [pc, #628]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00a      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dc8:	4b98      	ldr	r3, [pc, #608]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dce:	f023 020c 	bic.w	r2, r3, #12
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	4995      	ldr	r1, [pc, #596]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00a      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001dea:	4b90      	ldr	r3, [pc, #576]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	498c      	ldr	r1, [pc, #560]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00a      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e0c:	4b87      	ldr	r3, [pc, #540]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	4984      	ldr	r1, [pc, #528]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00a      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e2e:	4b7f      	ldr	r3, [pc, #508]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	497b      	ldr	r1, [pc, #492]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00a      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e50:	4b76      	ldr	r3, [pc, #472]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	4973      	ldr	r1, [pc, #460]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00a      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e72:	4b6e      	ldr	r3, [pc, #440]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	496a      	ldr	r1, [pc, #424]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00a      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e94:	4b65      	ldr	r3, [pc, #404]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	4962      	ldr	r1, [pc, #392]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00a      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001eb6:	4b5d      	ldr	r3, [pc, #372]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	4959      	ldr	r1, [pc, #356]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00a      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001ed8:	4b54      	ldr	r3, [pc, #336]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ede:	f023 0203 	bic.w	r2, r3, #3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee6:	4951      	ldr	r1, [pc, #324]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00a      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001efa:	4b4c      	ldr	r3, [pc, #304]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f08:	4948      	ldr	r1, [pc, #288]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d015      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f1c:	4b43      	ldr	r3, [pc, #268]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4940      	ldr	r1, [pc, #256]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f3a:	d105      	bne.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f3c:	4b3b      	ldr	r3, [pc, #236]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4a3a      	ldr	r2, [pc, #232]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d015      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f54:	4b35      	ldr	r3, [pc, #212]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f62:	4932      	ldr	r1, [pc, #200]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f72:	d105      	bne.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f74:	4b2d      	ldr	r3, [pc, #180]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	4a2c      	ldr	r2, [pc, #176]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f7e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d015      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001f8c:	4b27      	ldr	r3, [pc, #156]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f92:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9a:	4924      	ldr	r1, [pc, #144]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001faa:	d105      	bne.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fac:	4b1f      	ldr	r3, [pc, #124]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4a1e      	ldr	r2, [pc, #120]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fb6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d015      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fc4:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd2:	4916      	ldr	r1, [pc, #88]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fe2:	d105      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4a10      	ldr	r2, [pc, #64]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d019      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002002:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	4908      	ldr	r1, [pc, #32]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800201a:	d109      	bne.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	4a02      	ldr	r2, [pc, #8]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002026:	60d3      	str	r3, [r2, #12]
 8002028:	e002      	b.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d015      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800203c:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002042:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	4926      	ldr	r1, [pc, #152]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800205a:	d105      	bne.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4a20      	ldr	r2, [pc, #128]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002066:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d015      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002074:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002082:	4918      	ldr	r1, [pc, #96]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002092:	d105      	bne.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002094:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4a12      	ldr	r2, [pc, #72]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800209a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d015      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80020ac:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	490a      	ldr	r1, [pc, #40]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020ca:	d105      	bne.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80020d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000

080020e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e049      	b.n	800218e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d106      	bne.n	8002114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7fe fbe0 	bl	80008d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2202      	movs	r2, #2
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3304      	adds	r3, #4
 8002124:	4619      	mov	r1, r3
 8002126:	4610      	mov	r0, r2
 8002128:	f000 facc 	bl	80026c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d020      	beq.n	80021fa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d01b      	beq.n	80021fa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f06f 0202 	mvn.w	r2, #2
 80021ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 fa51 	bl	8002688 <HAL_TIM_IC_CaptureCallback>
 80021e6:	e005      	b.n	80021f4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 fa43 	bl	8002674 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 fa54 	bl	800269c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d020      	beq.n	8002246 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b00      	cmp	r3, #0
 800220c:	d01b      	beq.n	8002246 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f06f 0204 	mvn.w	r2, #4
 8002216:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2202      	movs	r2, #2
 800221c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 fa2b 	bl	8002688 <HAL_TIM_IC_CaptureCallback>
 8002232:	e005      	b.n	8002240 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 fa1d 	bl	8002674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 fa2e 	bl	800269c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b00      	cmp	r3, #0
 800224e:	d020      	beq.n	8002292 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d01b      	beq.n	8002292 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f06f 0208 	mvn.w	r2, #8
 8002262:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2204      	movs	r2, #4
 8002268:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 fa05 	bl	8002688 <HAL_TIM_IC_CaptureCallback>
 800227e:	e005      	b.n	800228c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f9f7 	bl	8002674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 fa08 	bl	800269c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f003 0310 	and.w	r3, r3, #16
 8002298:	2b00      	cmp	r3, #0
 800229a:	d020      	beq.n	80022de <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d01b      	beq.n	80022de <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f06f 0210 	mvn.w	r2, #16
 80022ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2208      	movs	r2, #8
 80022b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f9df 	bl	8002688 <HAL_TIM_IC_CaptureCallback>
 80022ca:	e005      	b.n	80022d8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f9d1 	bl	8002674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f9e2 	bl	800269c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00c      	beq.n	8002302 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d007      	beq.n	8002302 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f06f 0201 	mvn.w	r2, #1
 80022fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f9af 	bl	8002660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002308:	2b00      	cmp	r3, #0
 800230a:	d104      	bne.n	8002316 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00c      	beq.n	8002330 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231c:	2b00      	cmp	r3, #0
 800231e:	d007      	beq.n	8002330 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8002328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 fbba 	bl	8002aa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00c      	beq.n	8002354 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002340:	2b00      	cmp	r3, #0
 8002342:	d007      	beq.n	8002354 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800234c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 fbb2 	bl	8002ab8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00c      	beq.n	8002378 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002364:	2b00      	cmp	r3, #0
 8002366:	d007      	beq.n	8002378 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f99c 	bl	80026b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00c      	beq.n	800239c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f003 0320 	and.w	r3, r3, #32
 8002388:	2b00      	cmp	r3, #0
 800238a:	d007      	beq.n	800239c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0220 	mvn.w	r2, #32
 8002394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fb7a 	bl	8002a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00c      	beq.n	80023c0 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d007      	beq.n	80023c0 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80023b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 fb86 	bl	8002acc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00c      	beq.n	80023e4 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d007      	beq.n	80023e4 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80023dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fb7e 	bl	8002ae0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00c      	beq.n	8002408 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d007      	beq.n	8002408 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 fb76 	bl	8002af4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00c      	beq.n	800242c <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d007      	beq.n	800242c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 fb6e 	bl	8002b08 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800242c:	bf00      	nop
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_TIM_ConfigClockSource+0x1c>
 800244c:	2302      	movs	r3, #2
 800244e:	e0f6      	b.n	800263e <HAL_TIM_ConfigClockSource+0x20a>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800246e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800247a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a6f      	ldr	r2, [pc, #444]	; (8002648 <HAL_TIM_ConfigClockSource+0x214>)
 800248a:	4293      	cmp	r3, r2
 800248c:	f000 80c1 	beq.w	8002612 <HAL_TIM_ConfigClockSource+0x1de>
 8002490:	4a6d      	ldr	r2, [pc, #436]	; (8002648 <HAL_TIM_ConfigClockSource+0x214>)
 8002492:	4293      	cmp	r3, r2
 8002494:	f200 80c6 	bhi.w	8002624 <HAL_TIM_ConfigClockSource+0x1f0>
 8002498:	4a6c      	ldr	r2, [pc, #432]	; (800264c <HAL_TIM_ConfigClockSource+0x218>)
 800249a:	4293      	cmp	r3, r2
 800249c:	f000 80b9 	beq.w	8002612 <HAL_TIM_ConfigClockSource+0x1de>
 80024a0:	4a6a      	ldr	r2, [pc, #424]	; (800264c <HAL_TIM_ConfigClockSource+0x218>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	f200 80be 	bhi.w	8002624 <HAL_TIM_ConfigClockSource+0x1f0>
 80024a8:	4a69      	ldr	r2, [pc, #420]	; (8002650 <HAL_TIM_ConfigClockSource+0x21c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	f000 80b1 	beq.w	8002612 <HAL_TIM_ConfigClockSource+0x1de>
 80024b0:	4a67      	ldr	r2, [pc, #412]	; (8002650 <HAL_TIM_ConfigClockSource+0x21c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	f200 80b6 	bhi.w	8002624 <HAL_TIM_ConfigClockSource+0x1f0>
 80024b8:	4a66      	ldr	r2, [pc, #408]	; (8002654 <HAL_TIM_ConfigClockSource+0x220>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	f000 80a9 	beq.w	8002612 <HAL_TIM_ConfigClockSource+0x1de>
 80024c0:	4a64      	ldr	r2, [pc, #400]	; (8002654 <HAL_TIM_ConfigClockSource+0x220>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	f200 80ae 	bhi.w	8002624 <HAL_TIM_ConfigClockSource+0x1f0>
 80024c8:	4a63      	ldr	r2, [pc, #396]	; (8002658 <HAL_TIM_ConfigClockSource+0x224>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	f000 80a1 	beq.w	8002612 <HAL_TIM_ConfigClockSource+0x1de>
 80024d0:	4a61      	ldr	r2, [pc, #388]	; (8002658 <HAL_TIM_ConfigClockSource+0x224>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	f200 80a6 	bhi.w	8002624 <HAL_TIM_ConfigClockSource+0x1f0>
 80024d8:	4a60      	ldr	r2, [pc, #384]	; (800265c <HAL_TIM_ConfigClockSource+0x228>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	f000 8099 	beq.w	8002612 <HAL_TIM_ConfigClockSource+0x1de>
 80024e0:	4a5e      	ldr	r2, [pc, #376]	; (800265c <HAL_TIM_ConfigClockSource+0x228>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	f200 809e 	bhi.w	8002624 <HAL_TIM_ConfigClockSource+0x1f0>
 80024e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80024ec:	f000 8091 	beq.w	8002612 <HAL_TIM_ConfigClockSource+0x1de>
 80024f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80024f4:	f200 8096 	bhi.w	8002624 <HAL_TIM_ConfigClockSource+0x1f0>
 80024f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024fc:	f000 8089 	beq.w	8002612 <HAL_TIM_ConfigClockSource+0x1de>
 8002500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002504:	f200 808e 	bhi.w	8002624 <HAL_TIM_ConfigClockSource+0x1f0>
 8002508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800250c:	d03e      	beq.n	800258c <HAL_TIM_ConfigClockSource+0x158>
 800250e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002512:	f200 8087 	bhi.w	8002624 <HAL_TIM_ConfigClockSource+0x1f0>
 8002516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251a:	f000 8086 	beq.w	800262a <HAL_TIM_ConfigClockSource+0x1f6>
 800251e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002522:	d87f      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x1f0>
 8002524:	2b70      	cmp	r3, #112	; 0x70
 8002526:	d01a      	beq.n	800255e <HAL_TIM_ConfigClockSource+0x12a>
 8002528:	2b70      	cmp	r3, #112	; 0x70
 800252a:	d87b      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x1f0>
 800252c:	2b60      	cmp	r3, #96	; 0x60
 800252e:	d050      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x19e>
 8002530:	2b60      	cmp	r3, #96	; 0x60
 8002532:	d877      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x1f0>
 8002534:	2b50      	cmp	r3, #80	; 0x50
 8002536:	d03c      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0x17e>
 8002538:	2b50      	cmp	r3, #80	; 0x50
 800253a:	d873      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x1f0>
 800253c:	2b40      	cmp	r3, #64	; 0x40
 800253e:	d058      	beq.n	80025f2 <HAL_TIM_ConfigClockSource+0x1be>
 8002540:	2b40      	cmp	r3, #64	; 0x40
 8002542:	d86f      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x1f0>
 8002544:	2b30      	cmp	r3, #48	; 0x30
 8002546:	d064      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x1de>
 8002548:	2b30      	cmp	r3, #48	; 0x30
 800254a:	d86b      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x1f0>
 800254c:	2b20      	cmp	r3, #32
 800254e:	d060      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x1de>
 8002550:	2b20      	cmp	r3, #32
 8002552:	d867      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x1f0>
 8002554:	2b00      	cmp	r3, #0
 8002556:	d05c      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x1de>
 8002558:	2b10      	cmp	r3, #16
 800255a:	d05a      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x1de>
 800255c:	e062      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800256e:	f000 f9d9 	bl	8002924 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002580:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	609a      	str	r2, [r3, #8]
      break;
 800258a:	e04f      	b.n	800262c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800259c:	f000 f9c2 	bl	8002924 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ae:	609a      	str	r2, [r3, #8]
      break;
 80025b0:	e03c      	b.n	800262c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025be:	461a      	mov	r2, r3
 80025c0:	f000 f934 	bl	800282c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2150      	movs	r1, #80	; 0x50
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f98d 	bl	80028ea <TIM_ITRx_SetConfig>
      break;
 80025d0:	e02c      	b.n	800262c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025de:	461a      	mov	r2, r3
 80025e0:	f000 f953 	bl	800288a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2160      	movs	r1, #96	; 0x60
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 f97d 	bl	80028ea <TIM_ITRx_SetConfig>
      break;
 80025f0:	e01c      	b.n	800262c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025fe:	461a      	mov	r2, r3
 8002600:	f000 f914 	bl	800282c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2140      	movs	r1, #64	; 0x40
 800260a:	4618      	mov	r0, r3
 800260c:	f000 f96d 	bl	80028ea <TIM_ITRx_SetConfig>
      break;
 8002610:	e00c      	b.n	800262c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4619      	mov	r1, r3
 800261c:	4610      	mov	r0, r2
 800261e:	f000 f964 	bl	80028ea <TIM_ITRx_SetConfig>
      break;
 8002622:	e003      	b.n	800262c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
      break;
 8002628:	e000      	b.n	800262c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800262a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800263c:	7bfb      	ldrb	r3, [r7, #15]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	00100070 	.word	0x00100070
 800264c:	00100060 	.word	0x00100060
 8002650:	00100050 	.word	0x00100050
 8002654:	00100040 	.word	0x00100040
 8002658:	00100030 	.word	0x00100030
 800265c:	00100020 	.word	0x00100020

08002660 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a4c      	ldr	r2, [pc, #304]	; (8002808 <TIM_Base_SetConfig+0x144>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d017      	beq.n	800270c <TIM_Base_SetConfig+0x48>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e2:	d013      	beq.n	800270c <TIM_Base_SetConfig+0x48>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a49      	ldr	r2, [pc, #292]	; (800280c <TIM_Base_SetConfig+0x148>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d00f      	beq.n	800270c <TIM_Base_SetConfig+0x48>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a48      	ldr	r2, [pc, #288]	; (8002810 <TIM_Base_SetConfig+0x14c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d00b      	beq.n	800270c <TIM_Base_SetConfig+0x48>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a47      	ldr	r2, [pc, #284]	; (8002814 <TIM_Base_SetConfig+0x150>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d007      	beq.n	800270c <TIM_Base_SetConfig+0x48>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a46      	ldr	r2, [pc, #280]	; (8002818 <TIM_Base_SetConfig+0x154>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d003      	beq.n	800270c <TIM_Base_SetConfig+0x48>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a45      	ldr	r2, [pc, #276]	; (800281c <TIM_Base_SetConfig+0x158>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d108      	bne.n	800271e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a39      	ldr	r2, [pc, #228]	; (8002808 <TIM_Base_SetConfig+0x144>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d023      	beq.n	800276e <TIM_Base_SetConfig+0xaa>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272c:	d01f      	beq.n	800276e <TIM_Base_SetConfig+0xaa>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a36      	ldr	r2, [pc, #216]	; (800280c <TIM_Base_SetConfig+0x148>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d01b      	beq.n	800276e <TIM_Base_SetConfig+0xaa>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a35      	ldr	r2, [pc, #212]	; (8002810 <TIM_Base_SetConfig+0x14c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d017      	beq.n	800276e <TIM_Base_SetConfig+0xaa>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a34      	ldr	r2, [pc, #208]	; (8002814 <TIM_Base_SetConfig+0x150>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d013      	beq.n	800276e <TIM_Base_SetConfig+0xaa>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a33      	ldr	r2, [pc, #204]	; (8002818 <TIM_Base_SetConfig+0x154>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00f      	beq.n	800276e <TIM_Base_SetConfig+0xaa>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a33      	ldr	r2, [pc, #204]	; (8002820 <TIM_Base_SetConfig+0x15c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00b      	beq.n	800276e <TIM_Base_SetConfig+0xaa>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a32      	ldr	r2, [pc, #200]	; (8002824 <TIM_Base_SetConfig+0x160>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d007      	beq.n	800276e <TIM_Base_SetConfig+0xaa>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a31      	ldr	r2, [pc, #196]	; (8002828 <TIM_Base_SetConfig+0x164>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d003      	beq.n	800276e <TIM_Base_SetConfig+0xaa>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a2c      	ldr	r2, [pc, #176]	; (800281c <TIM_Base_SetConfig+0x158>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d108      	bne.n	8002780 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a18      	ldr	r2, [pc, #96]	; (8002808 <TIM_Base_SetConfig+0x144>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d013      	beq.n	80027d4 <TIM_Base_SetConfig+0x110>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a1a      	ldr	r2, [pc, #104]	; (8002818 <TIM_Base_SetConfig+0x154>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d00f      	beq.n	80027d4 <TIM_Base_SetConfig+0x110>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a1a      	ldr	r2, [pc, #104]	; (8002820 <TIM_Base_SetConfig+0x15c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d00b      	beq.n	80027d4 <TIM_Base_SetConfig+0x110>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a19      	ldr	r2, [pc, #100]	; (8002824 <TIM_Base_SetConfig+0x160>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d007      	beq.n	80027d4 <TIM_Base_SetConfig+0x110>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a18      	ldr	r2, [pc, #96]	; (8002828 <TIM_Base_SetConfig+0x164>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d003      	beq.n	80027d4 <TIM_Base_SetConfig+0x110>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a13      	ldr	r2, [pc, #76]	; (800281c <TIM_Base_SetConfig+0x158>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d103      	bne.n	80027dc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d105      	bne.n	80027fa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f023 0201 	bic.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	611a      	str	r2, [r3, #16]
  }
}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40012c00 	.word	0x40012c00
 800280c:	40000400 	.word	0x40000400
 8002810:	40000800 	.word	0x40000800
 8002814:	40000c00 	.word	0x40000c00
 8002818:	40013400 	.word	0x40013400
 800281c:	40015000 	.word	0x40015000
 8002820:	40014000 	.word	0x40014000
 8002824:	40014400 	.word	0x40014400
 8002828:	40014800 	.word	0x40014800

0800282c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	f023 0201 	bic.w	r2, r3, #1
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f023 030a 	bic.w	r3, r3, #10
 8002868:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4313      	orrs	r3, r2
 8002870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	621a      	str	r2, [r3, #32]
}
 800287e:	bf00      	nop
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800288a:	b480      	push	{r7}
 800288c:	b087      	sub	sp, #28
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f023 0210 	bic.w	r2, r3, #16
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	031b      	lsls	r3, r3, #12
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	621a      	str	r2, [r3, #32]
}
 80028de:	bf00      	nop
 80028e0:	371c      	adds	r7, #28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b085      	sub	sp, #20
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
 80028f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002904:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	f043 0307 	orr.w	r3, r3, #7
 8002910:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	609a      	str	r2, [r3, #8]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800293e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	021a      	lsls	r2, r3, #8
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	431a      	orrs	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	4313      	orrs	r3, r2
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	609a      	str	r2, [r3, #8]
}
 8002958:	bf00      	nop
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002978:	2302      	movs	r3, #2
 800297a:	e074      	b.n	8002a66 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a34      	ldr	r2, [pc, #208]	; (8002a74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d009      	beq.n	80029ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a33      	ldr	r2, [pc, #204]	; (8002a78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d004      	beq.n	80029ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a31      	ldr	r2, [pc, #196]	; (8002a7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d108      	bne.n	80029cc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80029c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80029d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a21      	ldr	r2, [pc, #132]	; (8002a74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d022      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fc:	d01d      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a1f      	ldr	r2, [pc, #124]	; (8002a80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d018      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1d      	ldr	r2, [pc, #116]	; (8002a84 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d013      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a1c      	ldr	r2, [pc, #112]	; (8002a88 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00e      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a15      	ldr	r2, [pc, #84]	; (8002a78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d009      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a18      	ldr	r2, [pc, #96]	; (8002a8c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d004      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a11      	ldr	r2, [pc, #68]	; (8002a7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d10c      	bne.n	8002a54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40012c00 	.word	0x40012c00
 8002a78:	40013400 	.word	0x40013400
 8002a7c:	40015000 	.word	0x40015000
 8002a80:	40000400 	.word	0x40000400
 8002a84:	40000800 	.word	0x40000800
 8002a88:	40000c00 	.word	0x40000c00
 8002a8c:	40014000 	.word	0x40014000

08002a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e042      	b.n	8002bb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d106      	bne.n	8002b46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7fd fe6f 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2224      	movs	r2, #36	; 0x24
 8002b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0201 	bic.w	r2, r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 fb24 	bl	80031b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f825 	bl	8002bbc <UART_SetConfig>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e01b      	b.n	8002bb4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 fba3 	bl	80032f8 <UART_CheckIdleState>
 8002bb2:	4603      	mov	r3, r0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bc0:	b08c      	sub	sp, #48	; 0x30
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	4baa      	ldr	r3, [pc, #680]	; (8002e94 <UART_SetConfig+0x2d8>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a9f      	ldr	r2, [pc, #636]	; (8002e98 <UART_SetConfig+0x2dc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d004      	beq.n	8002c28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c24:	4313      	orrs	r3, r2
 8002c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002c32:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	f023 010f 	bic.w	r1, r3, #15
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a90      	ldr	r2, [pc, #576]	; (8002e9c <UART_SetConfig+0x2e0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d125      	bne.n	8002cac <UART_SetConfig+0xf0>
 8002c60:	4b8f      	ldr	r3, [pc, #572]	; (8002ea0 <UART_SetConfig+0x2e4>)
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d81a      	bhi.n	8002ca4 <UART_SetConfig+0xe8>
 8002c6e:	a201      	add	r2, pc, #4	; (adr r2, 8002c74 <UART_SetConfig+0xb8>)
 8002c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c74:	08002c85 	.word	0x08002c85
 8002c78:	08002c95 	.word	0x08002c95
 8002c7c:	08002c8d 	.word	0x08002c8d
 8002c80:	08002c9d 	.word	0x08002c9d
 8002c84:	2301      	movs	r3, #1
 8002c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c8a:	e116      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c92:	e112      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002c94:	2304      	movs	r3, #4
 8002c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c9a:	e10e      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002c9c:	2308      	movs	r3, #8
 8002c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ca2:	e10a      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002ca4:	2310      	movs	r3, #16
 8002ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002caa:	e106      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a7c      	ldr	r2, [pc, #496]	; (8002ea4 <UART_SetConfig+0x2e8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d138      	bne.n	8002d28 <UART_SetConfig+0x16c>
 8002cb6:	4b7a      	ldr	r3, [pc, #488]	; (8002ea0 <UART_SetConfig+0x2e4>)
 8002cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbc:	f003 030c 	and.w	r3, r3, #12
 8002cc0:	2b0c      	cmp	r3, #12
 8002cc2:	d82d      	bhi.n	8002d20 <UART_SetConfig+0x164>
 8002cc4:	a201      	add	r2, pc, #4	; (adr r2, 8002ccc <UART_SetConfig+0x110>)
 8002cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cca:	bf00      	nop
 8002ccc:	08002d01 	.word	0x08002d01
 8002cd0:	08002d21 	.word	0x08002d21
 8002cd4:	08002d21 	.word	0x08002d21
 8002cd8:	08002d21 	.word	0x08002d21
 8002cdc:	08002d11 	.word	0x08002d11
 8002ce0:	08002d21 	.word	0x08002d21
 8002ce4:	08002d21 	.word	0x08002d21
 8002ce8:	08002d21 	.word	0x08002d21
 8002cec:	08002d09 	.word	0x08002d09
 8002cf0:	08002d21 	.word	0x08002d21
 8002cf4:	08002d21 	.word	0x08002d21
 8002cf8:	08002d21 	.word	0x08002d21
 8002cfc:	08002d19 	.word	0x08002d19
 8002d00:	2300      	movs	r3, #0
 8002d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d06:	e0d8      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d0e:	e0d4      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002d10:	2304      	movs	r3, #4
 8002d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d16:	e0d0      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002d18:	2308      	movs	r3, #8
 8002d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d1e:	e0cc      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002d20:	2310      	movs	r3, #16
 8002d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d26:	e0c8      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a5e      	ldr	r2, [pc, #376]	; (8002ea8 <UART_SetConfig+0x2ec>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d125      	bne.n	8002d7e <UART_SetConfig+0x1c2>
 8002d32:	4b5b      	ldr	r3, [pc, #364]	; (8002ea0 <UART_SetConfig+0x2e4>)
 8002d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d3c:	2b30      	cmp	r3, #48	; 0x30
 8002d3e:	d016      	beq.n	8002d6e <UART_SetConfig+0x1b2>
 8002d40:	2b30      	cmp	r3, #48	; 0x30
 8002d42:	d818      	bhi.n	8002d76 <UART_SetConfig+0x1ba>
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d00a      	beq.n	8002d5e <UART_SetConfig+0x1a2>
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d814      	bhi.n	8002d76 <UART_SetConfig+0x1ba>
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <UART_SetConfig+0x19a>
 8002d50:	2b10      	cmp	r3, #16
 8002d52:	d008      	beq.n	8002d66 <UART_SetConfig+0x1aa>
 8002d54:	e00f      	b.n	8002d76 <UART_SetConfig+0x1ba>
 8002d56:	2300      	movs	r3, #0
 8002d58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d5c:	e0ad      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d64:	e0a9      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002d66:	2304      	movs	r3, #4
 8002d68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d6c:	e0a5      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002d6e:	2308      	movs	r3, #8
 8002d70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d74:	e0a1      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002d76:	2310      	movs	r3, #16
 8002d78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d7c:	e09d      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a4a      	ldr	r2, [pc, #296]	; (8002eac <UART_SetConfig+0x2f0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d125      	bne.n	8002dd4 <UART_SetConfig+0x218>
 8002d88:	4b45      	ldr	r3, [pc, #276]	; (8002ea0 <UART_SetConfig+0x2e4>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002d92:	2bc0      	cmp	r3, #192	; 0xc0
 8002d94:	d016      	beq.n	8002dc4 <UART_SetConfig+0x208>
 8002d96:	2bc0      	cmp	r3, #192	; 0xc0
 8002d98:	d818      	bhi.n	8002dcc <UART_SetConfig+0x210>
 8002d9a:	2b80      	cmp	r3, #128	; 0x80
 8002d9c:	d00a      	beq.n	8002db4 <UART_SetConfig+0x1f8>
 8002d9e:	2b80      	cmp	r3, #128	; 0x80
 8002da0:	d814      	bhi.n	8002dcc <UART_SetConfig+0x210>
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <UART_SetConfig+0x1f0>
 8002da6:	2b40      	cmp	r3, #64	; 0x40
 8002da8:	d008      	beq.n	8002dbc <UART_SetConfig+0x200>
 8002daa:	e00f      	b.n	8002dcc <UART_SetConfig+0x210>
 8002dac:	2300      	movs	r3, #0
 8002dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002db2:	e082      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002db4:	2302      	movs	r3, #2
 8002db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dba:	e07e      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dc2:	e07a      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002dc4:	2308      	movs	r3, #8
 8002dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dca:	e076      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002dcc:	2310      	movs	r3, #16
 8002dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dd2:	e072      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a35      	ldr	r2, [pc, #212]	; (8002eb0 <UART_SetConfig+0x2f4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d12a      	bne.n	8002e34 <UART_SetConfig+0x278>
 8002dde:	4b30      	ldr	r3, [pc, #192]	; (8002ea0 <UART_SetConfig+0x2e4>)
 8002de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dec:	d01a      	beq.n	8002e24 <UART_SetConfig+0x268>
 8002dee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002df2:	d81b      	bhi.n	8002e2c <UART_SetConfig+0x270>
 8002df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df8:	d00c      	beq.n	8002e14 <UART_SetConfig+0x258>
 8002dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dfe:	d815      	bhi.n	8002e2c <UART_SetConfig+0x270>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <UART_SetConfig+0x250>
 8002e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e08:	d008      	beq.n	8002e1c <UART_SetConfig+0x260>
 8002e0a:	e00f      	b.n	8002e2c <UART_SetConfig+0x270>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e12:	e052      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002e14:	2302      	movs	r3, #2
 8002e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e1a:	e04e      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e22:	e04a      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002e24:	2308      	movs	r3, #8
 8002e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e2a:	e046      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002e2c:	2310      	movs	r3, #16
 8002e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e32:	e042      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a17      	ldr	r2, [pc, #92]	; (8002e98 <UART_SetConfig+0x2dc>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d13a      	bne.n	8002eb4 <UART_SetConfig+0x2f8>
 8002e3e:	4b18      	ldr	r3, [pc, #96]	; (8002ea0 <UART_SetConfig+0x2e4>)
 8002e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e4c:	d01a      	beq.n	8002e84 <UART_SetConfig+0x2c8>
 8002e4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e52:	d81b      	bhi.n	8002e8c <UART_SetConfig+0x2d0>
 8002e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e58:	d00c      	beq.n	8002e74 <UART_SetConfig+0x2b8>
 8002e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e5e:	d815      	bhi.n	8002e8c <UART_SetConfig+0x2d0>
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <UART_SetConfig+0x2b0>
 8002e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e68:	d008      	beq.n	8002e7c <UART_SetConfig+0x2c0>
 8002e6a:	e00f      	b.n	8002e8c <UART_SetConfig+0x2d0>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e72:	e022      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002e74:	2302      	movs	r3, #2
 8002e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e7a:	e01e      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e82:	e01a      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002e84:	2308      	movs	r3, #8
 8002e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e8a:	e016      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002e8c:	2310      	movs	r3, #16
 8002e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e92:	e012      	b.n	8002eba <UART_SetConfig+0x2fe>
 8002e94:	cfff69f3 	.word	0xcfff69f3
 8002e98:	40008000 	.word	0x40008000
 8002e9c:	40013800 	.word	0x40013800
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	40004400 	.word	0x40004400
 8002ea8:	40004800 	.word	0x40004800
 8002eac:	40004c00 	.word	0x40004c00
 8002eb0:	40005000 	.word	0x40005000
 8002eb4:	2310      	movs	r3, #16
 8002eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4aae      	ldr	r2, [pc, #696]	; (8003178 <UART_SetConfig+0x5bc>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	f040 8097 	bne.w	8002ff4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ec6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d823      	bhi.n	8002f16 <UART_SetConfig+0x35a>
 8002ece:	a201      	add	r2, pc, #4	; (adr r2, 8002ed4 <UART_SetConfig+0x318>)
 8002ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed4:	08002ef9 	.word	0x08002ef9
 8002ed8:	08002f17 	.word	0x08002f17
 8002edc:	08002f01 	.word	0x08002f01
 8002ee0:	08002f17 	.word	0x08002f17
 8002ee4:	08002f07 	.word	0x08002f07
 8002ee8:	08002f17 	.word	0x08002f17
 8002eec:	08002f17 	.word	0x08002f17
 8002ef0:	08002f17 	.word	0x08002f17
 8002ef4:	08002f0f 	.word	0x08002f0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ef8:	f7fe fe36 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 8002efc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002efe:	e010      	b.n	8002f22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f00:	4b9e      	ldr	r3, [pc, #632]	; (800317c <UART_SetConfig+0x5c0>)
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f04:	e00d      	b.n	8002f22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f06:	f7fe fdc1 	bl	8001a8c <HAL_RCC_GetSysClockFreq>
 8002f0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f0c:	e009      	b.n	8002f22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f14:	e005      	b.n	8002f22 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002f20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8130 	beq.w	800318a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	4a94      	ldr	r2, [pc, #592]	; (8003180 <UART_SetConfig+0x5c4>)
 8002f30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f34:	461a      	mov	r2, r3
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	4413      	add	r3, r2
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d305      	bcc.n	8002f5a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d903      	bls.n	8002f62 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002f60:	e113      	b.n	800318a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	2200      	movs	r2, #0
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	60fa      	str	r2, [r7, #12]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	4a84      	ldr	r2, [pc, #528]	; (8003180 <UART_SetConfig+0x5c4>)
 8002f70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2200      	movs	r2, #0
 8002f78:	603b      	str	r3, [r7, #0]
 8002f7a:	607a      	str	r2, [r7, #4]
 8002f7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f84:	f7fd f948 	bl	8000218 <__aeabi_uldivmod>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	020b      	lsls	r3, r1, #8
 8002f9a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002f9e:	0202      	lsls	r2, r0, #8
 8002fa0:	6979      	ldr	r1, [r7, #20]
 8002fa2:	6849      	ldr	r1, [r1, #4]
 8002fa4:	0849      	lsrs	r1, r1, #1
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	460c      	mov	r4, r1
 8002faa:	4605      	mov	r5, r0
 8002fac:	eb12 0804 	adds.w	r8, r2, r4
 8002fb0:	eb43 0905 	adc.w	r9, r3, r5
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	469a      	mov	sl, r3
 8002fbc:	4693      	mov	fp, r2
 8002fbe:	4652      	mov	r2, sl
 8002fc0:	465b      	mov	r3, fp
 8002fc2:	4640      	mov	r0, r8
 8002fc4:	4649      	mov	r1, r9
 8002fc6:	f7fd f927 	bl	8000218 <__aeabi_uldivmod>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4613      	mov	r3, r2
 8002fd0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fd8:	d308      	bcc.n	8002fec <UART_SetConfig+0x430>
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fe0:	d204      	bcs.n	8002fec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6a3a      	ldr	r2, [r7, #32]
 8002fe8:	60da      	str	r2, [r3, #12]
 8002fea:	e0ce      	b.n	800318a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002ff2:	e0ca      	b.n	800318a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ffc:	d166      	bne.n	80030cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8002ffe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003002:	2b08      	cmp	r3, #8
 8003004:	d827      	bhi.n	8003056 <UART_SetConfig+0x49a>
 8003006:	a201      	add	r2, pc, #4	; (adr r2, 800300c <UART_SetConfig+0x450>)
 8003008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300c:	08003031 	.word	0x08003031
 8003010:	08003039 	.word	0x08003039
 8003014:	08003041 	.word	0x08003041
 8003018:	08003057 	.word	0x08003057
 800301c:	08003047 	.word	0x08003047
 8003020:	08003057 	.word	0x08003057
 8003024:	08003057 	.word	0x08003057
 8003028:	08003057 	.word	0x08003057
 800302c:	0800304f 	.word	0x0800304f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003030:	f7fe fd9a 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 8003034:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003036:	e014      	b.n	8003062 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003038:	f7fe fdac 	bl	8001b94 <HAL_RCC_GetPCLK2Freq>
 800303c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800303e:	e010      	b.n	8003062 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003040:	4b4e      	ldr	r3, [pc, #312]	; (800317c <UART_SetConfig+0x5c0>)
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003044:	e00d      	b.n	8003062 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003046:	f7fe fd21 	bl	8001a8c <HAL_RCC_GetSysClockFreq>
 800304a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800304c:	e009      	b.n	8003062 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800304e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003054:	e005      	b.n	8003062 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003060:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 8090 	beq.w	800318a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	4a44      	ldr	r2, [pc, #272]	; (8003180 <UART_SetConfig+0x5c4>)
 8003070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003074:	461a      	mov	r2, r3
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	fbb3 f3f2 	udiv	r3, r3, r2
 800307c:	005a      	lsls	r2, r3, #1
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	085b      	lsrs	r3, r3, #1
 8003084:	441a      	add	r2, r3
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	fbb2 f3f3 	udiv	r3, r2, r3
 800308e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	2b0f      	cmp	r3, #15
 8003094:	d916      	bls.n	80030c4 <UART_SetConfig+0x508>
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309c:	d212      	bcs.n	80030c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	f023 030f 	bic.w	r3, r3, #15
 80030a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	085b      	lsrs	r3, r3, #1
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	8bfb      	ldrh	r3, [r7, #30]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	8bfa      	ldrh	r2, [r7, #30]
 80030c0:	60da      	str	r2, [r3, #12]
 80030c2:	e062      	b.n	800318a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80030ca:	e05e      	b.n	800318a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d828      	bhi.n	8003126 <UART_SetConfig+0x56a>
 80030d4:	a201      	add	r2, pc, #4	; (adr r2, 80030dc <UART_SetConfig+0x520>)
 80030d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030da:	bf00      	nop
 80030dc:	08003101 	.word	0x08003101
 80030e0:	08003109 	.word	0x08003109
 80030e4:	08003111 	.word	0x08003111
 80030e8:	08003127 	.word	0x08003127
 80030ec:	08003117 	.word	0x08003117
 80030f0:	08003127 	.word	0x08003127
 80030f4:	08003127 	.word	0x08003127
 80030f8:	08003127 	.word	0x08003127
 80030fc:	0800311f 	.word	0x0800311f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003100:	f7fe fd32 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 8003104:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003106:	e014      	b.n	8003132 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003108:	f7fe fd44 	bl	8001b94 <HAL_RCC_GetPCLK2Freq>
 800310c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800310e:	e010      	b.n	8003132 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003110:	4b1a      	ldr	r3, [pc, #104]	; (800317c <UART_SetConfig+0x5c0>)
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003114:	e00d      	b.n	8003132 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003116:	f7fe fcb9 	bl	8001a8c <HAL_RCC_GetSysClockFreq>
 800311a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800311c:	e009      	b.n	8003132 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800311e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003124:	e005      	b.n	8003132 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003130:	bf00      	nop
    }

    if (pclk != 0U)
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	2b00      	cmp	r3, #0
 8003136:	d028      	beq.n	800318a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	4a10      	ldr	r2, [pc, #64]	; (8003180 <UART_SetConfig+0x5c4>)
 800313e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003142:	461a      	mov	r2, r3
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	fbb3 f2f2 	udiv	r2, r3, r2
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	085b      	lsrs	r3, r3, #1
 8003150:	441a      	add	r2, r3
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	fbb2 f3f3 	udiv	r3, r2, r3
 800315a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	2b0f      	cmp	r3, #15
 8003160:	d910      	bls.n	8003184 <UART_SetConfig+0x5c8>
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003168:	d20c      	bcs.n	8003184 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	b29a      	uxth	r2, r3
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60da      	str	r2, [r3, #12]
 8003174:	e009      	b.n	800318a <UART_SetConfig+0x5ce>
 8003176:	bf00      	nop
 8003178:	40008000 	.word	0x40008000
 800317c:	00f42400 	.word	0x00f42400
 8003180:	08003880 	.word	0x08003880
      }
      else
      {
        ret = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2201      	movs	r2, #1
 800318e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2201      	movs	r2, #1
 8003196:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2200      	movs	r2, #0
 800319e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2200      	movs	r2, #0
 80031a4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80031a6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3730      	adds	r7, #48	; 0x30
 80031ae:	46bd      	mov	sp, r7
 80031b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080031b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	f003 0310 	and.w	r3, r3, #16
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01a      	beq.n	80032ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032b2:	d10a      	bne.n	80032ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	605a      	str	r2, [r3, #4]
  }
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b098      	sub	sp, #96	; 0x60
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003308:	f7fd fbe4 	bl	8000ad4 <HAL_GetTick>
 800330c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b08      	cmp	r3, #8
 800331a:	d12f      	bne.n	800337c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800331c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003324:	2200      	movs	r2, #0
 8003326:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f88e 	bl	800344c <UART_WaitOnFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d022      	beq.n	800337c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333e:	e853 3f00 	ldrex	r3, [r3]
 8003342:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800334a:	653b      	str	r3, [r7, #80]	; 0x50
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	461a      	mov	r2, r3
 8003352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003354:	647b      	str	r3, [r7, #68]	; 0x44
 8003356:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003358:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800335a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800335c:	e841 2300 	strex	r3, r2, [r1]
 8003360:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1e6      	bne.n	8003336 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2220      	movs	r2, #32
 800336c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e063      	b.n	8003444 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b04      	cmp	r3, #4
 8003388:	d149      	bne.n	800341e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800338a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003392:	2200      	movs	r2, #0
 8003394:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f857 	bl	800344c <UART_WaitOnFlagUntilTimeout>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d03c      	beq.n	800341e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	e853 3f00 	ldrex	r3, [r3]
 80033b0:	623b      	str	r3, [r7, #32]
   return(result);
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033c2:	633b      	str	r3, [r7, #48]	; 0x30
 80033c4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ca:	e841 2300 	strex	r3, r2, [r1]
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1e6      	bne.n	80033a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3308      	adds	r3, #8
 80033dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	e853 3f00 	ldrex	r3, [r3]
 80033e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3308      	adds	r3, #8
 80033f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033f6:	61fa      	str	r2, [r7, #28]
 80033f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fa:	69b9      	ldr	r1, [r7, #24]
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	e841 2300 	strex	r3, r2, [r1]
 8003402:	617b      	str	r3, [r7, #20]
   return(result);
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1e5      	bne.n	80033d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2220      	movs	r2, #32
 800340e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e012      	b.n	8003444 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2220      	movs	r2, #32
 8003422:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2220      	movs	r2, #32
 800342a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3758      	adds	r7, #88	; 0x58
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	4613      	mov	r3, r2
 800345a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800345c:	e04f      	b.n	80034fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003464:	d04b      	beq.n	80034fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003466:	f7fd fb35 	bl	8000ad4 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	429a      	cmp	r2, r3
 8003474:	d302      	bcc.n	800347c <UART_WaitOnFlagUntilTimeout+0x30>
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e04e      	b.n	800351e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b00      	cmp	r3, #0
 800348c:	d037      	beq.n	80034fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b80      	cmp	r3, #128	; 0x80
 8003492:	d034      	beq.n	80034fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b40      	cmp	r3, #64	; 0x40
 8003498:	d031      	beq.n	80034fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d110      	bne.n	80034ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2208      	movs	r2, #8
 80034ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f838 	bl	8003526 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2208      	movs	r2, #8
 80034ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e029      	b.n	800351e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034d8:	d111      	bne.n	80034fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 f81e 	bl	8003526 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e00f      	b.n	800351e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4013      	ands	r3, r2
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	429a      	cmp	r2, r3
 800350c:	bf0c      	ite	eq
 800350e:	2301      	moveq	r3, #1
 8003510:	2300      	movne	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	461a      	mov	r2, r3
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	429a      	cmp	r2, r3
 800351a:	d0a0      	beq.n	800345e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003526:	b480      	push	{r7}
 8003528:	b095      	sub	sp, #84	; 0x54
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003536:	e853 3f00 	ldrex	r3, [r3]
 800353a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800353c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	461a      	mov	r2, r3
 800354a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800354c:	643b      	str	r3, [r7, #64]	; 0x40
 800354e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003550:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003552:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003554:	e841 2300 	strex	r3, r2, [r1]
 8003558:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800355a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e6      	bne.n	800352e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3308      	adds	r3, #8
 8003566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	e853 3f00 	ldrex	r3, [r3]
 800356e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003576:	f023 0301 	bic.w	r3, r3, #1
 800357a:	64bb      	str	r3, [r7, #72]	; 0x48
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3308      	adds	r3, #8
 8003582:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003584:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003586:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003588:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800358a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800358c:	e841 2300 	strex	r3, r2, [r1]
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1e3      	bne.n	8003560 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359c:	2b01      	cmp	r3, #1
 800359e:	d118      	bne.n	80035d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	e853 3f00 	ldrex	r3, [r3]
 80035ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f023 0310 	bic.w	r3, r3, #16
 80035b4:	647b      	str	r3, [r7, #68]	; 0x44
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035be:	61bb      	str	r3, [r7, #24]
 80035c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c2:	6979      	ldr	r1, [r7, #20]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	e841 2300 	strex	r3, r2, [r1]
 80035ca:	613b      	str	r3, [r7, #16]
   return(result);
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1e6      	bne.n	80035a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80035e6:	bf00      	nop
 80035e8:	3754      	adds	r7, #84	; 0x54
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b085      	sub	sp, #20
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_UARTEx_DisableFifoMode+0x16>
 8003604:	2302      	movs	r3, #2
 8003606:	e027      	b.n	8003658 <HAL_UARTEx_DisableFifoMode+0x66>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2224      	movs	r2, #36	; 0x24
 8003614:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0201 	bic.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003636:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003678:	2302      	movs	r3, #2
 800367a:	e02d      	b.n	80036d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2224      	movs	r2, #36	; 0x24
 8003688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0201 	bic.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f84f 	bl	800375c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e02d      	b.n	8003754 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2224      	movs	r2, #36	; 0x24
 8003704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0201 	bic.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f811 	bl	800375c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2220      	movs	r2, #32
 8003746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003768:	2b00      	cmp	r3, #0
 800376a:	d108      	bne.n	800377e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800377c:	e031      	b.n	80037e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800377e:	2308      	movs	r3, #8
 8003780:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003782:	2308      	movs	r3, #8
 8003784:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	0e5b      	lsrs	r3, r3, #25
 800378e:	b2db      	uxtb	r3, r3
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	0f5b      	lsrs	r3, r3, #29
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037a6:	7bbb      	ldrb	r3, [r7, #14]
 80037a8:	7b3a      	ldrb	r2, [r7, #12]
 80037aa:	4911      	ldr	r1, [pc, #68]	; (80037f0 <UARTEx_SetNbDataToProcess+0x94>)
 80037ac:	5c8a      	ldrb	r2, [r1, r2]
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80037b2:	7b3a      	ldrb	r2, [r7, #12]
 80037b4:	490f      	ldr	r1, [pc, #60]	; (80037f4 <UARTEx_SetNbDataToProcess+0x98>)
 80037b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80037bc:	b29a      	uxth	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	7b7a      	ldrb	r2, [r7, #13]
 80037c8:	4909      	ldr	r1, [pc, #36]	; (80037f0 <UARTEx_SetNbDataToProcess+0x94>)
 80037ca:	5c8a      	ldrb	r2, [r1, r2]
 80037cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80037d0:	7b7a      	ldrb	r2, [r7, #13]
 80037d2:	4908      	ldr	r1, [pc, #32]	; (80037f4 <UARTEx_SetNbDataToProcess+0x98>)
 80037d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80037da:	b29a      	uxth	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80037e2:	bf00      	nop
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	08003898 	.word	0x08003898
 80037f4:	080038a0 	.word	0x080038a0

080037f8 <memset>:
 80037f8:	4402      	add	r2, r0
 80037fa:	4603      	mov	r3, r0
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d100      	bne.n	8003802 <memset+0xa>
 8003800:	4770      	bx	lr
 8003802:	f803 1b01 	strb.w	r1, [r3], #1
 8003806:	e7f9      	b.n	80037fc <memset+0x4>

08003808 <__libc_init_array>:
 8003808:	b570      	push	{r4, r5, r6, lr}
 800380a:	4d0d      	ldr	r5, [pc, #52]	; (8003840 <__libc_init_array+0x38>)
 800380c:	4c0d      	ldr	r4, [pc, #52]	; (8003844 <__libc_init_array+0x3c>)
 800380e:	1b64      	subs	r4, r4, r5
 8003810:	10a4      	asrs	r4, r4, #2
 8003812:	2600      	movs	r6, #0
 8003814:	42a6      	cmp	r6, r4
 8003816:	d109      	bne.n	800382c <__libc_init_array+0x24>
 8003818:	4d0b      	ldr	r5, [pc, #44]	; (8003848 <__libc_init_array+0x40>)
 800381a:	4c0c      	ldr	r4, [pc, #48]	; (800384c <__libc_init_array+0x44>)
 800381c:	f000 f818 	bl	8003850 <_init>
 8003820:	1b64      	subs	r4, r4, r5
 8003822:	10a4      	asrs	r4, r4, #2
 8003824:	2600      	movs	r6, #0
 8003826:	42a6      	cmp	r6, r4
 8003828:	d105      	bne.n	8003836 <__libc_init_array+0x2e>
 800382a:	bd70      	pop	{r4, r5, r6, pc}
 800382c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003830:	4798      	blx	r3
 8003832:	3601      	adds	r6, #1
 8003834:	e7ee      	b.n	8003814 <__libc_init_array+0xc>
 8003836:	f855 3b04 	ldr.w	r3, [r5], #4
 800383a:	4798      	blx	r3
 800383c:	3601      	adds	r6, #1
 800383e:	e7f2      	b.n	8003826 <__libc_init_array+0x1e>
 8003840:	080038b0 	.word	0x080038b0
 8003844:	080038b0 	.word	0x080038b0
 8003848:	080038b0 	.word	0x080038b0
 800384c:	080038b4 	.word	0x080038b4

08003850 <_init>:
 8003850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003852:	bf00      	nop
 8003854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003856:	bc08      	pop	{r3}
 8003858:	469e      	mov	lr, r3
 800385a:	4770      	bx	lr

0800385c <_fini>:
 800385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385e:	bf00      	nop
 8003860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003862:	bc08      	pop	{r3}
 8003864:	469e      	mov	lr, r3
 8003866:	4770      	bx	lr
