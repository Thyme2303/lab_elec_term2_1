
lab1_elec_36.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f94  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800716c  0800716c  0001716c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071ac  080071ac  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080071ac  080071ac  000171ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071b4  080071b4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071b4  080071b4  000171b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071b8  080071b8  000171b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080071bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000010  080071cc  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  080071cc  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017303  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a2f  00000000  00000000  00037386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  00039db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001001  00000000  00000000  0003b230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a3a  00000000  00000000  0003c231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016e8a  00000000  00000000  00063c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010ea1d  00000000  00000000  0007aaf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005acc  00000000  00000000  00189514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0018efe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007154 	.word	0x08007154

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08007154 	.word	0x08007154

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__gedf2>:
 80007e4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80007e8:	e006      	b.n	80007f8 <__cmpdf2+0x4>
 80007ea:	bf00      	nop

080007ec <__ledf2>:
 80007ec:	f04f 0c01 	mov.w	ip, #1
 80007f0:	e002      	b.n	80007f8 <__cmpdf2+0x4>
 80007f2:	bf00      	nop

080007f4 <__cmpdf2>:
 80007f4:	f04f 0c01 	mov.w	ip, #1
 80007f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800080e:	d01b      	beq.n	8000848 <__cmpdf2+0x54>
 8000810:	b001      	add	sp, #4
 8000812:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000816:	bf0c      	ite	eq
 8000818:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800081c:	ea91 0f03 	teqne	r1, r3
 8000820:	bf02      	ittt	eq
 8000822:	ea90 0f02 	teqeq	r0, r2
 8000826:	2000      	moveq	r0, #0
 8000828:	4770      	bxeq	lr
 800082a:	f110 0f00 	cmn.w	r0, #0
 800082e:	ea91 0f03 	teq	r1, r3
 8000832:	bf58      	it	pl
 8000834:	4299      	cmppl	r1, r3
 8000836:	bf08      	it	eq
 8000838:	4290      	cmpeq	r0, r2
 800083a:	bf2c      	ite	cs
 800083c:	17d8      	asrcs	r0, r3, #31
 800083e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000842:	f040 0001 	orr.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d102      	bne.n	8000858 <__cmpdf2+0x64>
 8000852:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000856:	d107      	bne.n	8000868 <__cmpdf2+0x74>
 8000858:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d1d6      	bne.n	8000810 <__cmpdf2+0x1c>
 8000862:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000866:	d0d3      	beq.n	8000810 <__cmpdf2+0x1c>
 8000868:	f85d 0b04 	ldr.w	r0, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <__aeabi_cdrcmple>:
 8000870:	4684      	mov	ip, r0
 8000872:	4610      	mov	r0, r2
 8000874:	4662      	mov	r2, ip
 8000876:	468c      	mov	ip, r1
 8000878:	4619      	mov	r1, r3
 800087a:	4663      	mov	r3, ip
 800087c:	e000      	b.n	8000880 <__aeabi_cdcmpeq>
 800087e:	bf00      	nop

08000880 <__aeabi_cdcmpeq>:
 8000880:	b501      	push	{r0, lr}
 8000882:	f7ff ffb7 	bl	80007f4 <__cmpdf2>
 8000886:	2800      	cmp	r0, #0
 8000888:	bf48      	it	mi
 800088a:	f110 0f00 	cmnmi.w	r0, #0
 800088e:	bd01      	pop	{r0, pc}

08000890 <__aeabi_dcmpeq>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff fff4 	bl	8000880 <__aeabi_cdcmpeq>
 8000898:	bf0c      	ite	eq
 800089a:	2001      	moveq	r0, #1
 800089c:	2000      	movne	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmplt>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffea 	bl	8000880 <__aeabi_cdcmpeq>
 80008ac:	bf34      	ite	cc
 80008ae:	2001      	movcc	r0, #1
 80008b0:	2000      	movcs	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmple>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffe0 	bl	8000880 <__aeabi_cdcmpeq>
 80008c0:	bf94      	ite	ls
 80008c2:	2001      	movls	r0, #1
 80008c4:	2000      	movhi	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_dcmpge>:
 80008cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d0:	f7ff ffce 	bl	8000870 <__aeabi_cdrcmple>
 80008d4:	bf94      	ite	ls
 80008d6:	2001      	movls	r0, #1
 80008d8:	2000      	movhi	r0, #0
 80008da:	f85d fb08 	ldr.w	pc, [sp], #8
 80008de:	bf00      	nop

080008e0 <__aeabi_dcmpgt>:
 80008e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e4:	f7ff ffc4 	bl	8000870 <__aeabi_cdrcmple>
 80008e8:	bf34      	ite	cc
 80008ea:	2001      	movcc	r0, #1
 80008ec:	2000      	movcs	r0, #0
 80008ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2uiz>:
 80008f4:	004a      	lsls	r2, r1, #1
 80008f6:	d211      	bcs.n	800091c <__aeabi_d2uiz+0x28>
 80008f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008fc:	d211      	bcs.n	8000922 <__aeabi_d2uiz+0x2e>
 80008fe:	d50d      	bpl.n	800091c <__aeabi_d2uiz+0x28>
 8000900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000908:	d40e      	bmi.n	8000928 <__aeabi_d2uiz+0x34>
 800090a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000916:	fa23 f002 	lsr.w	r0, r3, r2
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d102      	bne.n	800092e <__aeabi_d2uiz+0x3a>
 8000928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800092c:	4770      	bx	lr
 800092e:	f04f 0000 	mov.w	r0, #0
 8000932:	4770      	bx	lr

08000934 <__aeabi_uldivmod>:
 8000934:	b953      	cbnz	r3, 800094c <__aeabi_uldivmod+0x18>
 8000936:	b94a      	cbnz	r2, 800094c <__aeabi_uldivmod+0x18>
 8000938:	2900      	cmp	r1, #0
 800093a:	bf08      	it	eq
 800093c:	2800      	cmpeq	r0, #0
 800093e:	bf1c      	itt	ne
 8000940:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000944:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000948:	f000 b970 	b.w	8000c2c <__aeabi_idiv0>
 800094c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000950:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000954:	f000 f806 	bl	8000964 <__udivmoddi4>
 8000958:	f8dd e004 	ldr.w	lr, [sp, #4]
 800095c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000960:	b004      	add	sp, #16
 8000962:	4770      	bx	lr

08000964 <__udivmoddi4>:
 8000964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000968:	9e08      	ldr	r6, [sp, #32]
 800096a:	460d      	mov	r5, r1
 800096c:	4604      	mov	r4, r0
 800096e:	460f      	mov	r7, r1
 8000970:	2b00      	cmp	r3, #0
 8000972:	d14a      	bne.n	8000a0a <__udivmoddi4+0xa6>
 8000974:	428a      	cmp	r2, r1
 8000976:	4694      	mov	ip, r2
 8000978:	d965      	bls.n	8000a46 <__udivmoddi4+0xe2>
 800097a:	fab2 f382 	clz	r3, r2
 800097e:	b143      	cbz	r3, 8000992 <__udivmoddi4+0x2e>
 8000980:	fa02 fc03 	lsl.w	ip, r2, r3
 8000984:	f1c3 0220 	rsb	r2, r3, #32
 8000988:	409f      	lsls	r7, r3
 800098a:	fa20 f202 	lsr.w	r2, r0, r2
 800098e:	4317      	orrs	r7, r2
 8000990:	409c      	lsls	r4, r3
 8000992:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000996:	fa1f f58c 	uxth.w	r5, ip
 800099a:	fbb7 f1fe 	udiv	r1, r7, lr
 800099e:	0c22      	lsrs	r2, r4, #16
 80009a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80009a4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80009a8:	fb01 f005 	mul.w	r0, r1, r5
 80009ac:	4290      	cmp	r0, r2
 80009ae:	d90a      	bls.n	80009c6 <__udivmoddi4+0x62>
 80009b0:	eb1c 0202 	adds.w	r2, ip, r2
 80009b4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80009b8:	f080 811c 	bcs.w	8000bf4 <__udivmoddi4+0x290>
 80009bc:	4290      	cmp	r0, r2
 80009be:	f240 8119 	bls.w	8000bf4 <__udivmoddi4+0x290>
 80009c2:	3902      	subs	r1, #2
 80009c4:	4462      	add	r2, ip
 80009c6:	1a12      	subs	r2, r2, r0
 80009c8:	b2a4      	uxth	r4, r4
 80009ca:	fbb2 f0fe 	udiv	r0, r2, lr
 80009ce:	fb0e 2210 	mls	r2, lr, r0, r2
 80009d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009d6:	fb00 f505 	mul.w	r5, r0, r5
 80009da:	42a5      	cmp	r5, r4
 80009dc:	d90a      	bls.n	80009f4 <__udivmoddi4+0x90>
 80009de:	eb1c 0404 	adds.w	r4, ip, r4
 80009e2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80009e6:	f080 8107 	bcs.w	8000bf8 <__udivmoddi4+0x294>
 80009ea:	42a5      	cmp	r5, r4
 80009ec:	f240 8104 	bls.w	8000bf8 <__udivmoddi4+0x294>
 80009f0:	4464      	add	r4, ip
 80009f2:	3802      	subs	r0, #2
 80009f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009f8:	1b64      	subs	r4, r4, r5
 80009fa:	2100      	movs	r1, #0
 80009fc:	b11e      	cbz	r6, 8000a06 <__udivmoddi4+0xa2>
 80009fe:	40dc      	lsrs	r4, r3
 8000a00:	2300      	movs	r3, #0
 8000a02:	e9c6 4300 	strd	r4, r3, [r6]
 8000a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a0a:	428b      	cmp	r3, r1
 8000a0c:	d908      	bls.n	8000a20 <__udivmoddi4+0xbc>
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	f000 80ed 	beq.w	8000bee <__udivmoddi4+0x28a>
 8000a14:	2100      	movs	r1, #0
 8000a16:	e9c6 0500 	strd	r0, r5, [r6]
 8000a1a:	4608      	mov	r0, r1
 8000a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a20:	fab3 f183 	clz	r1, r3
 8000a24:	2900      	cmp	r1, #0
 8000a26:	d149      	bne.n	8000abc <__udivmoddi4+0x158>
 8000a28:	42ab      	cmp	r3, r5
 8000a2a:	d302      	bcc.n	8000a32 <__udivmoddi4+0xce>
 8000a2c:	4282      	cmp	r2, r0
 8000a2e:	f200 80f8 	bhi.w	8000c22 <__udivmoddi4+0x2be>
 8000a32:	1a84      	subs	r4, r0, r2
 8000a34:	eb65 0203 	sbc.w	r2, r5, r3
 8000a38:	2001      	movs	r0, #1
 8000a3a:	4617      	mov	r7, r2
 8000a3c:	2e00      	cmp	r6, #0
 8000a3e:	d0e2      	beq.n	8000a06 <__udivmoddi4+0xa2>
 8000a40:	e9c6 4700 	strd	r4, r7, [r6]
 8000a44:	e7df      	b.n	8000a06 <__udivmoddi4+0xa2>
 8000a46:	b902      	cbnz	r2, 8000a4a <__udivmoddi4+0xe6>
 8000a48:	deff      	udf	#255	; 0xff
 8000a4a:	fab2 f382 	clz	r3, r2
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f040 8090 	bne.w	8000b74 <__udivmoddi4+0x210>
 8000a54:	1a8a      	subs	r2, r1, r2
 8000a56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5a:	fa1f fe8c 	uxth.w	lr, ip
 8000a5e:	2101      	movs	r1, #1
 8000a60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a64:	fb07 2015 	mls	r0, r7, r5, r2
 8000a68:	0c22      	lsrs	r2, r4, #16
 8000a6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a6e:	fb0e f005 	mul.w	r0, lr, r5
 8000a72:	4290      	cmp	r0, r2
 8000a74:	d908      	bls.n	8000a88 <__udivmoddi4+0x124>
 8000a76:	eb1c 0202 	adds.w	r2, ip, r2
 8000a7a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0x122>
 8000a80:	4290      	cmp	r0, r2
 8000a82:	f200 80cb 	bhi.w	8000c1c <__udivmoddi4+0x2b8>
 8000a86:	4645      	mov	r5, r8
 8000a88:	1a12      	subs	r2, r2, r0
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a90:	fb07 2210 	mls	r2, r7, r0, r2
 8000a94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a98:	fb0e fe00 	mul.w	lr, lr, r0
 8000a9c:	45a6      	cmp	lr, r4
 8000a9e:	d908      	bls.n	8000ab2 <__udivmoddi4+0x14e>
 8000aa0:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000aa8:	d202      	bcs.n	8000ab0 <__udivmoddi4+0x14c>
 8000aaa:	45a6      	cmp	lr, r4
 8000aac:	f200 80bb 	bhi.w	8000c26 <__udivmoddi4+0x2c2>
 8000ab0:	4610      	mov	r0, r2
 8000ab2:	eba4 040e 	sub.w	r4, r4, lr
 8000ab6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000aba:	e79f      	b.n	80009fc <__udivmoddi4+0x98>
 8000abc:	f1c1 0720 	rsb	r7, r1, #32
 8000ac0:	408b      	lsls	r3, r1
 8000ac2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ac6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ace:	fa20 f307 	lsr.w	r3, r0, r7
 8000ad2:	40fd      	lsrs	r5, r7
 8000ad4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ad8:	4323      	orrs	r3, r4
 8000ada:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ade:	fa1f fe8c 	uxth.w	lr, ip
 8000ae2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ae6:	0c1c      	lsrs	r4, r3, #16
 8000ae8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000aec:	fb08 f50e 	mul.w	r5, r8, lr
 8000af0:	42a5      	cmp	r5, r4
 8000af2:	fa02 f201 	lsl.w	r2, r2, r1
 8000af6:	fa00 f001 	lsl.w	r0, r0, r1
 8000afa:	d90b      	bls.n	8000b14 <__udivmoddi4+0x1b0>
 8000afc:	eb1c 0404 	adds.w	r4, ip, r4
 8000b00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b04:	f080 8088 	bcs.w	8000c18 <__udivmoddi4+0x2b4>
 8000b08:	42a5      	cmp	r5, r4
 8000b0a:	f240 8085 	bls.w	8000c18 <__udivmoddi4+0x2b4>
 8000b0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b12:	4464      	add	r4, ip
 8000b14:	1b64      	subs	r4, r4, r5
 8000b16:	b29d      	uxth	r5, r3
 8000b18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000b20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b28:	45a6      	cmp	lr, r4
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x1da>
 8000b2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b30:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000b34:	d26c      	bcs.n	8000c10 <__udivmoddi4+0x2ac>
 8000b36:	45a6      	cmp	lr, r4
 8000b38:	d96a      	bls.n	8000c10 <__udivmoddi4+0x2ac>
 8000b3a:	3b02      	subs	r3, #2
 8000b3c:	4464      	add	r4, ip
 8000b3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b42:	fba3 9502 	umull	r9, r5, r3, r2
 8000b46:	eba4 040e 	sub.w	r4, r4, lr
 8000b4a:	42ac      	cmp	r4, r5
 8000b4c:	46c8      	mov	r8, r9
 8000b4e:	46ae      	mov	lr, r5
 8000b50:	d356      	bcc.n	8000c00 <__udivmoddi4+0x29c>
 8000b52:	d053      	beq.n	8000bfc <__udivmoddi4+0x298>
 8000b54:	b156      	cbz	r6, 8000b6c <__udivmoddi4+0x208>
 8000b56:	ebb0 0208 	subs.w	r2, r0, r8
 8000b5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000b5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000b62:	40ca      	lsrs	r2, r1
 8000b64:	40cc      	lsrs	r4, r1
 8000b66:	4317      	orrs	r7, r2
 8000b68:	e9c6 7400 	strd	r7, r4, [r6]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	2100      	movs	r1, #0
 8000b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b74:	f1c3 0120 	rsb	r1, r3, #32
 8000b78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000b80:	fa25 f101 	lsr.w	r1, r5, r1
 8000b84:	409d      	lsls	r5, r3
 8000b86:	432a      	orrs	r2, r5
 8000b88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8c:	fa1f fe8c 	uxth.w	lr, ip
 8000b90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b94:	fb07 1510 	mls	r5, r7, r0, r1
 8000b98:	0c11      	lsrs	r1, r2, #16
 8000b9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000ba2:	428d      	cmp	r5, r1
 8000ba4:	fa04 f403 	lsl.w	r4, r4, r3
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x258>
 8000baa:	eb1c 0101 	adds.w	r1, ip, r1
 8000bae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bb2:	d22f      	bcs.n	8000c14 <__udivmoddi4+0x2b0>
 8000bb4:	428d      	cmp	r5, r1
 8000bb6:	d92d      	bls.n	8000c14 <__udivmoddi4+0x2b0>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	4461      	add	r1, ip
 8000bbc:	1b49      	subs	r1, r1, r5
 8000bbe:	b292      	uxth	r2, r2
 8000bc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000bc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000bd0:	4291      	cmp	r1, r2
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x282>
 8000bd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bdc:	d216      	bcs.n	8000c0c <__udivmoddi4+0x2a8>
 8000bde:	4291      	cmp	r1, r2
 8000be0:	d914      	bls.n	8000c0c <__udivmoddi4+0x2a8>
 8000be2:	3d02      	subs	r5, #2
 8000be4:	4462      	add	r2, ip
 8000be6:	1a52      	subs	r2, r2, r1
 8000be8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bec:	e738      	b.n	8000a60 <__udivmoddi4+0xfc>
 8000bee:	4631      	mov	r1, r6
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	e708      	b.n	8000a06 <__udivmoddi4+0xa2>
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e6e6      	b.n	80009c6 <__udivmoddi4+0x62>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	e6fb      	b.n	80009f4 <__udivmoddi4+0x90>
 8000bfc:	4548      	cmp	r0, r9
 8000bfe:	d2a9      	bcs.n	8000b54 <__udivmoddi4+0x1f0>
 8000c00:	ebb9 0802 	subs.w	r8, r9, r2
 8000c04:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	e7a3      	b.n	8000b54 <__udivmoddi4+0x1f0>
 8000c0c:	4645      	mov	r5, r8
 8000c0e:	e7ea      	b.n	8000be6 <__udivmoddi4+0x282>
 8000c10:	462b      	mov	r3, r5
 8000c12:	e794      	b.n	8000b3e <__udivmoddi4+0x1da>
 8000c14:	4640      	mov	r0, r8
 8000c16:	e7d1      	b.n	8000bbc <__udivmoddi4+0x258>
 8000c18:	46d0      	mov	r8, sl
 8000c1a:	e77b      	b.n	8000b14 <__udivmoddi4+0x1b0>
 8000c1c:	3d02      	subs	r5, #2
 8000c1e:	4462      	add	r2, ip
 8000c20:	e732      	b.n	8000a88 <__udivmoddi4+0x124>
 8000c22:	4608      	mov	r0, r1
 8000c24:	e70a      	b.n	8000a3c <__udivmoddi4+0xd8>
 8000c26:	4464      	add	r4, ip
 8000c28:	3802      	subs	r0, #2
 8000c2a:	e742      	b.n	8000ab2 <__udivmoddi4+0x14e>

08000c2c <__aeabi_idiv0>:
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c34:	b08f      	sub	sp, #60	; 0x3c
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c38:	f000 fedb 	bl	80019f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3c:	f000 f9c2 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c40:	f000 fc2e 	bl	80014a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c44:	f000 fc02 	bl	800144c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000c48:	f000 faa2 	bl	8001190 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8000c4c:	f000 faea 	bl	8001224 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000c50:	f000 fa04 	bl	800105c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000c54:	f000 fb34 	bl	80012c0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c58:	f000 fb80 	bl	800135c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c5c:	48a2      	ldr	r0, [pc, #648]	; (8000ee8 <main+0x2b8>)
 8000c5e:	f004 f8d5 	bl	8004e0c <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 300);
 8000c62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c66:	49a1      	ldr	r1, [pc, #644]	; (8000eec <main+0x2bc>)
 8000c68:	48a1      	ldr	r0, [pc, #644]	; (8000ef0 <main+0x2c0>)
 8000c6a:	f001 fb0d 	bl	8002288 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000c6e:	48a1      	ldr	r0, [pc, #644]	; (8000ef4 <main+0x2c4>)
 8000c70:	f004 f85c 	bl	8004d2c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8000c74:	48a0      	ldr	r0, [pc, #640]	; (8000ef8 <main+0x2c8>)
 8000c76:	f004 f859 	bl	8004d2c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	489e      	ldr	r0, [pc, #632]	; (8000ef8 <main+0x2c8>)
 8000c7e:	f004 f99f 	bl	8004fc0 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mn = __HAL_TIM_GET_COUNTER(&htim2);
 8000c82:	4b99      	ldr	r3, [pc, #612]	; (8000ee8 <main+0x2b8>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c88:	4b9c      	ldr	r3, [pc, #624]	; (8000efc <main+0x2cc>)
 8000c8a:	601a      	str	r2, [r3, #0]
	  hpmn = ((count-1)*4294967295)+mn;
 8000c8c:	4b9c      	ldr	r3, [pc, #624]	; (8000f00 <main+0x2d0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	3b01      	subs	r3, #1
 8000c92:	2200      	movs	r2, #0
 8000c94:	469a      	mov	sl, r3
 8000c96:	4693      	mov	fp, r2
 8000c98:	4652      	mov	r2, sl
 8000c9a:	465b      	mov	r3, fp
 8000c9c:	f04f 0000 	mov.w	r0, #0
 8000ca0:	f04f 0100 	mov.w	r1, #0
 8000ca4:	07d9      	lsls	r1, r3, #31
 8000ca6:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8000caa:	07d0      	lsls	r0, r2, #31
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	ebb2 080a 	subs.w	r8, r2, sl
 8000cb4:	eb63 090b 	sbc.w	r9, r3, fp
 8000cb8:	eb18 0308 	adds.w	r3, r8, r8
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	eb49 0309 	adc.w	r3, r9, r9
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	e9d7 8900 	ldrd	r8, r9, [r7]
 8000cc8:	eb18 050a 	adds.w	r5, r8, sl
 8000ccc:	eb49 060b 	adc.w	r6, r9, fp
 8000cd0:	4b8a      	ldr	r3, [pc, #552]	; (8000efc <main+0x2cc>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	623b      	str	r3, [r7, #32]
 8000cd8:	627a      	str	r2, [r7, #36]	; 0x24
 8000cda:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	18eb      	adds	r3, r5, r3
 8000ce2:	61bb      	str	r3, [r7, #24]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	eb46 0303 	adc.w	r3, r6, r3
 8000cea:	61fb      	str	r3, [r7, #28]
 8000cec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000cf0:	4b84      	ldr	r3, [pc, #528]	; (8000f04 <main+0x2d4>)
 8000cf2:	e9c3 0100 	strd	r0, r1, [r3]

	  //HAL_Delay(300);
	  channelSums[0] = 0;
 8000cf6:	4984      	ldr	r1, [pc, #528]	; (8000f08 <main+0x2d8>)
 8000cf8:	f04f 0200 	mov.w	r2, #0
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e9c1 2300 	strd	r2, r3, [r1]
	  channelSums[1] = 0;
 8000d04:	4980      	ldr	r1, [pc, #512]	; (8000f08 <main+0x2d8>)
 8000d06:	f04f 0200 	mov.w	r2, #0
 8000d0a:	f04f 0300 	mov.w	r3, #0
 8000d0e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	  channelSums[2] = 0;
 8000d12:	497d      	ldr	r1, [pc, #500]	; (8000f08 <main+0x2d8>)
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e9c1 2304 	strd	r2, r3, [r1, #16]

	  for (int i=0; i< ADCChannels; i++) {
 8000d20:	2300      	movs	r3, #0
 8000d22:	637b      	str	r3, [r7, #52]	; 0x34
 8000d24:	e049      	b.n	8000dba <main+0x18a>
		  for (int j=0; j < ADCCount; j++) {
 8000d26:	2300      	movs	r3, #0
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
 8000d2a:	e026      	b.n	8000d7a <main+0x14a>
			  channelSums[i] += ADCBuffer[i+j*ADCChannels];
 8000d2c:	4a76      	ldr	r2, [pc, #472]	; (8000f08 <main+0x2d8>)
 8000d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	4413      	add	r3, r2
 8000d34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d38:	4b74      	ldr	r3, [pc, #464]	; (8000f0c <main+0x2dc>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d40:	fb03 f202 	mul.w	r2, r3, r2
 8000d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d46:	441a      	add	r2, r3
 8000d48:	4b68      	ldr	r3, [pc, #416]	; (8000eec <main+0x2bc>)
 8000d4a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	2200      	movs	r2, #0
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d58:	18c3      	adds	r3, r0, r3
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d5e:	eb41 0303 	adc.w	r3, r1, r3
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	4a68      	ldr	r2, [pc, #416]	; (8000f08 <main+0x2d8>)
 8000d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	4413      	add	r3, r2
 8000d6c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000d70:	e9c3 1200 	strd	r1, r2, [r3]
		  for (int j=0; j < ADCCount; j++) {
 8000d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d76:	3301      	adds	r3, #1
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30
 8000d7a:	4b65      	ldr	r3, [pc, #404]	; (8000f10 <main+0x2e0>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d82:	4293      	cmp	r3, r2
 8000d84:	dbd2      	blt.n	8000d2c <main+0xfc>
		  }
		  AVG[i] = channelSums[i] / ADCCount;
 8000d86:	4a60      	ldr	r2, [pc, #384]	; (8000f08 <main+0x2d8>)
 8000d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	4413      	add	r3, r2
 8000d8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d92:	4b5f      	ldr	r3, [pc, #380]	; (8000f10 <main+0x2e0>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	60fa      	str	r2, [r7, #12]
 8000d9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000da2:	f7ff fdc7 	bl	8000934 <__aeabi_uldivmod>
 8000da6:	4602      	mov	r2, r0
 8000da8:	460b      	mov	r3, r1
 8000daa:	4611      	mov	r1, r2
 8000dac:	4a59      	ldr	r2, [pc, #356]	; (8000f14 <main+0x2e4>)
 8000dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for (int i=0; i< ADCChannels; i++) {
 8000db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db6:	3301      	adds	r3, #1
 8000db8:	637b      	str	r3, [r7, #52]	; 0x34
 8000dba:	4b54      	ldr	r3, [pc, #336]	; (8000f0c <main+0x2dc>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	dbaf      	blt.n	8000d26 <main+0xf6>
	  }
	  percen1 = (float)((AVG[0]*100)/4095);
 8000dc6:	4b53      	ldr	r3, [pc, #332]	; (8000f14 <main+0x2e4>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	2364      	movs	r3, #100	; 0x64
 8000dcc:	fb03 f102 	mul.w	r1, r3, r2
 8000dd0:	4b51      	ldr	r3, [pc, #324]	; (8000f18 <main+0x2e8>)
 8000dd2:	fba3 3201 	umull	r3, r2, r3, r1
 8000dd6:	1a8b      	subs	r3, r1, r2
 8000dd8:	085b      	lsrs	r3, r3, #1
 8000dda:	4413      	add	r3, r2
 8000ddc:	0adb      	lsrs	r3, r3, #11
 8000dde:	ee07 3a90 	vmov	s15, r3
 8000de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000de6:	ee17 0a90 	vmov	r0, s15
 8000dea:	f7ff fca3 	bl	8000734 <__aeabi_f2d>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	494a      	ldr	r1, [pc, #296]	; (8000f1c <main+0x2ec>)
 8000df4:	e9c1 2300 	strd	r2, r3, [r1]
	  percen2 = (float)((AVG[1]*100)/4095);
 8000df8:	4b46      	ldr	r3, [pc, #280]	; (8000f14 <main+0x2e4>)
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	2364      	movs	r3, #100	; 0x64
 8000dfe:	fb03 f102 	mul.w	r1, r3, r2
 8000e02:	4b45      	ldr	r3, [pc, #276]	; (8000f18 <main+0x2e8>)
 8000e04:	fba3 3201 	umull	r3, r2, r3, r1
 8000e08:	1a8b      	subs	r3, r1, r2
 8000e0a:	085b      	lsrs	r3, r3, #1
 8000e0c:	4413      	add	r3, r2
 8000e0e:	0adb      	lsrs	r3, r3, #11
 8000e10:	ee07 3a90 	vmov	s15, r3
 8000e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e18:	ee17 0a90 	vmov	r0, s15
 8000e1c:	f7ff fc8a 	bl	8000734 <__aeabi_f2d>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	493e      	ldr	r1, [pc, #248]	; (8000f20 <main+0x2f0>)
 8000e26:	e9c1 2300 	strd	r2, r3, [r1]
	  percen3 = (float)((AVG[2]*100)/4095);
 8000e2a:	4b3a      	ldr	r3, [pc, #232]	; (8000f14 <main+0x2e4>)
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	2364      	movs	r3, #100	; 0x64
 8000e30:	fb03 f102 	mul.w	r1, r3, r2
 8000e34:	4b38      	ldr	r3, [pc, #224]	; (8000f18 <main+0x2e8>)
 8000e36:	fba3 3201 	umull	r3, r2, r3, r1
 8000e3a:	1a8b      	subs	r3, r1, r2
 8000e3c:	085b      	lsrs	r3, r3, #1
 8000e3e:	4413      	add	r3, r2
 8000e40:	0adb      	lsrs	r3, r3, #11
 8000e42:	ee07 3a90 	vmov	s15, r3
 8000e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e4a:	ee17 0a90 	vmov	r0, s15
 8000e4e:	f7ff fc71 	bl	8000734 <__aeabi_f2d>
 8000e52:	4602      	mov	r2, r0
 8000e54:	460b      	mov	r3, r1
 8000e56:	4933      	ldr	r1, [pc, #204]	; (8000f24 <main+0x2f4>)
 8000e58:	e9c1 2300 	strd	r2, r3, [r1]

	  if ((percen1>=0)&&(percen1<25))
 8000e5c:	4b2f      	ldr	r3, [pc, #188]	; (8000f1c <main+0x2ec>)
 8000e5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	f04f 0300 	mov.w	r3, #0
 8000e6a:	f7ff fd2f 	bl	80008cc <__aeabi_dcmpge>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d010      	beq.n	8000e96 <main+0x266>
 8000e74:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <main+0x2ec>)
 8000e76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <main+0x2f8>)
 8000e80:	f7ff fd10 	bl	80008a4 <__aeabi_dcmplt>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d005      	beq.n	8000e96 <main+0x266>
	  {
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 500);
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <main+0x2c8>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e92:	6353      	str	r3, [r2, #52]	; 0x34
 8000e94:	e085      	b.n	8000fa2 <main+0x372>
	  }
	  else if ((percen1>=25)&&(percen1<50))
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <main+0x2ec>)
 8000e98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e9c:	f04f 0200 	mov.w	r2, #0
 8000ea0:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <main+0x2f8>)
 8000ea2:	f7ff fd13 	bl	80008cc <__aeabi_dcmpge>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d041      	beq.n	8000f30 <main+0x300>
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <main+0x2ec>)
 8000eae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <main+0x2fc>)
 8000eb8:	f7ff fcf4 	bl	80008a4 <__aeabi_dcmplt>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d036      	beq.n	8000f30 <main+0x300>
	  {
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,percen2*25);
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <main+0x2f0>)
 8000ec4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ec8:	f04f 0200 	mov.w	r2, #0
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <main+0x2f8>)
 8000ece:	f7ff f9a3 	bl	8000218 <__aeabi_dmul>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	4610      	mov	r0, r2
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <main+0x2c8>)
 8000edc:	681c      	ldr	r4, [r3, #0]
 8000ede:	f7ff fd09 	bl	80008f4 <__aeabi_d2uiz>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6363      	str	r3, [r4, #52]	; 0x34
 8000ee6:	e05c      	b.n	8000fa2 <main+0x372>
 8000ee8:	2000018c 	.word	0x2000018c
 8000eec:	20000278 	.word	0x20000278
 8000ef0:	2000002c 	.word	0x2000002c
 8000ef4:	200001d8 	.word	0x200001d8
 8000ef8:	20000224 	.word	0x20000224
 8000efc:	20000270 	.word	0x20000270
 8000f00:	20000274 	.word	0x20000274
 8000f04:	200004d0 	.word	0x200004d0
 8000f08:	200004e8 	.word	0x200004e8
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	20000001 	.word	0x20000001
 8000f14:	200004d8 	.word	0x200004d8
 8000f18:	00100101 	.word	0x00100101
 8000f1c:	20000500 	.word	0x20000500
 8000f20:	20000508 	.word	0x20000508
 8000f24:	20000510 	.word	0x20000510
 8000f28:	40390000 	.word	0x40390000
 8000f2c:	40490000 	.word	0x40490000
	  }
	  else if ((percen1>=50)&&(percen1<75))
 8000f30:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <main+0x380>)
 8000f32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f36:	f04f 0200 	mov.w	r2, #0
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <main+0x384>)
 8000f3c:	f7ff fcc6 	bl	80008cc <__aeabi_dcmpge>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d01d      	beq.n	8000f82 <main+0x352>
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <main+0x380>)
 8000f48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f4c:	a316      	add	r3, pc, #88	; (adr r3, 8000fa8 <main+0x378>)
 8000f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f52:	f7ff fca7 	bl	80008a4 <__aeabi_dcmplt>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d012      	beq.n	8000f82 <main+0x352>
	  {
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, percen3*25);
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <main+0x388>)
 8000f5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <main+0x38c>)
 8000f68:	f7ff f956 	bl	8000218 <__aeabi_dmul>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <main+0x390>)
 8000f76:	681c      	ldr	r4, [r3, #0]
 8000f78:	f7ff fcbc 	bl	80008f4 <__aeabi_d2uiz>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	6363      	str	r3, [r4, #52]	; 0x34
 8000f80:	e00f      	b.n	8000fa2 <main+0x372>
	  }
	  else if (percen1>=75)
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <main+0x380>)
 8000f84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f88:	a307      	add	r3, pc, #28	; (adr r3, 8000fa8 <main+0x378>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	f7ff fc9d 	bl	80008cc <__aeabi_dcmpge>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d004      	beq.n	8000fa2 <main+0x372>
	  {
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 2500);
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <main+0x390>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000fa0:	6353      	str	r3, [r2, #52]	; 0x34
	  mn = __HAL_TIM_GET_COUNTER(&htim2);
 8000fa2:	e66e      	b.n	8000c82 <main+0x52>
 8000fa4:	f3af 8000 	nop.w
 8000fa8:	00000000 	.word	0x00000000
 8000fac:	4052c000 	.word	0x4052c000
 8000fb0:	20000500 	.word	0x20000500
 8000fb4:	40490000 	.word	0x40490000
 8000fb8:	20000510 	.word	0x20000510
 8000fbc:	40390000 	.word	0x40390000
 8000fc0:	20000224 	.word	0x20000224

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b094      	sub	sp, #80	; 0x50
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0318 	add.w	r3, r7, #24
 8000fce:	2238      	movs	r2, #56	; 0x38
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f006 f892 	bl	80070fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f002 fe18 	bl	8003c1c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff6:	2340      	movs	r3, #64	; 0x40
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ffe:	2302      	movs	r3, #2
 8001000:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001002:	2304      	movs	r3, #4
 8001004:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001006:	2355      	movs	r3, #85	; 0x55
 8001008:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800100a:	2302      	movs	r3, #2
 800100c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800100e:	2302      	movs	r3, #2
 8001010:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001012:	2302      	movs	r3, #2
 8001014:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001016:	f107 0318 	add.w	r3, r7, #24
 800101a:	4618      	mov	r0, r3
 800101c:	f002 feb2 	bl	8003d84 <HAL_RCC_OscConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001026:	f000 fac1 	bl	80015ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102a:	230f      	movs	r3, #15
 800102c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102e:	2303      	movs	r3, #3
 8001030:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2104      	movs	r1, #4
 8001042:	4618      	mov	r0, r3
 8001044:	f003 f9b0 	bl	80043a8 <HAL_RCC_ClockConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800104e:	f000 faad 	bl	80015ac <Error_Handler>
  }
}
 8001052:	bf00      	nop
 8001054:	3750      	adds	r7, #80	; 0x50
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08c      	sub	sp, #48	; 0x30
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2220      	movs	r2, #32
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f006 f841 	bl	80070fc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800107a:	4b41      	ldr	r3, [pc, #260]	; (8001180 <MX_ADC1_Init+0x124>)
 800107c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001080:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001082:	4b3f      	ldr	r3, [pc, #252]	; (8001180 <MX_ADC1_Init+0x124>)
 8001084:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001088:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800108a:	4b3d      	ldr	r3, [pc, #244]	; (8001180 <MX_ADC1_Init+0x124>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001090:	4b3b      	ldr	r3, [pc, #236]	; (8001180 <MX_ADC1_Init+0x124>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001096:	4b3a      	ldr	r3, [pc, #232]	; (8001180 <MX_ADC1_Init+0x124>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800109c:	4b38      	ldr	r3, [pc, #224]	; (8001180 <MX_ADC1_Init+0x124>)
 800109e:	2201      	movs	r2, #1
 80010a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a2:	4b37      	ldr	r3, [pc, #220]	; (8001180 <MX_ADC1_Init+0x124>)
 80010a4:	2204      	movs	r2, #4
 80010a6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010a8:	4b35      	ldr	r3, [pc, #212]	; (8001180 <MX_ADC1_Init+0x124>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ae:	4b34      	ldr	r3, [pc, #208]	; (8001180 <MX_ADC1_Init+0x124>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80010b4:	4b32      	ldr	r3, [pc, #200]	; (8001180 <MX_ADC1_Init+0x124>)
 80010b6:	2203      	movs	r2, #3
 80010b8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ba:	4b31      	ldr	r3, [pc, #196]	; (8001180 <MX_ADC1_Init+0x124>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80010c2:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <MX_ADC1_Init+0x124>)
 80010c4:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80010c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010ca:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <MX_ADC1_Init+0x124>)
 80010cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010d2:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <MX_ADC1_Init+0x124>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010da:	4b29      	ldr	r3, [pc, #164]	; (8001180 <MX_ADC1_Init+0x124>)
 80010dc:	2200      	movs	r2, #0
 80010de:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010e0:	4b27      	ldr	r3, [pc, #156]	; (8001180 <MX_ADC1_Init+0x124>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e8:	4825      	ldr	r0, [pc, #148]	; (8001180 <MX_ADC1_Init+0x124>)
 80010ea:	f000 ff11 	bl	8001f10 <HAL_ADC_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80010f4:	f000 fa5a 	bl	80015ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001100:	4619      	mov	r1, r3
 8001102:	481f      	ldr	r0, [pc, #124]	; (8001180 <MX_ADC1_Init+0x124>)
 8001104:	f001 ff42 	bl	8002f8c <HAL_ADCEx_MultiModeConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800110e:	f000 fa4d 	bl	80015ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <MX_ADC1_Init+0x128>)
 8001114:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001116:	2306      	movs	r3, #6
 8001118:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800111a:	2307      	movs	r3, #7
 800111c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800111e:	237f      	movs	r3, #127	; 0x7f
 8001120:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001122:	2304      	movs	r3, #4
 8001124:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	4619      	mov	r1, r3
 800112e:	4814      	ldr	r0, [pc, #80]	; (8001180 <MX_ADC1_Init+0x124>)
 8001130:	f001 f99c 	bl	800246c <HAL_ADC_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800113a:	f000 fa37 	bl	80015ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800113e:	4b12      	ldr	r3, [pc, #72]	; (8001188 <MX_ADC1_Init+0x12c>)
 8001140:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001142:	230c      	movs	r3, #12
 8001144:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	4619      	mov	r1, r3
 800114a:	480d      	ldr	r0, [pc, #52]	; (8001180 <MX_ADC1_Init+0x124>)
 800114c:	f001 f98e 	bl	800246c <HAL_ADC_ConfigChannel>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001156:	f000 fa29 	bl	80015ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_ADC1_Init+0x130>)
 800115c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800115e:	2312      	movs	r3, #18
 8001160:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	4619      	mov	r1, r3
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <MX_ADC1_Init+0x124>)
 8001168:	f001 f980 	bl	800246c <HAL_ADC_ConfigChannel>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8001172:	f000 fa1b 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	3730      	adds	r7, #48	; 0x30
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2000002c 	.word	0x2000002c
 8001184:	04300002 	.word	0x04300002
 8001188:	08600004 	.word	0x08600004
 800118c:	3ef08000 	.word	0x3ef08000

08001190 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001194:	4b21      	ldr	r3, [pc, #132]	; (800121c <MX_LPUART1_UART_Init+0x8c>)
 8001196:	4a22      	ldr	r2, [pc, #136]	; (8001220 <MX_LPUART1_UART_Init+0x90>)
 8001198:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800119a:	4b20      	ldr	r3, [pc, #128]	; (800121c <MX_LPUART1_UART_Init+0x8c>)
 800119c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b1e      	ldr	r3, [pc, #120]	; (800121c <MX_LPUART1_UART_Init+0x8c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <MX_LPUART1_UART_Init+0x8c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b1b      	ldr	r3, [pc, #108]	; (800121c <MX_LPUART1_UART_Init+0x8c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <MX_LPUART1_UART_Init+0x8c>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b18      	ldr	r3, [pc, #96]	; (800121c <MX_LPUART1_UART_Init+0x8c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <MX_LPUART1_UART_Init+0x8c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <MX_LPUART1_UART_Init+0x8c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <MX_LPUART1_UART_Init+0x8c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80011d2:	4812      	ldr	r0, [pc, #72]	; (800121c <MX_LPUART1_UART_Init+0x8c>)
 80011d4:	f005 f924 	bl	8006420 <HAL_UART_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80011de:	f000 f9e5 	bl	80015ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011e2:	2100      	movs	r1, #0
 80011e4:	480d      	ldr	r0, [pc, #52]	; (800121c <MX_LPUART1_UART_Init+0x8c>)
 80011e6:	f005 febf 	bl	8006f68 <HAL_UARTEx_SetTxFifoThreshold>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80011f0:	f000 f9dc 	bl	80015ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011f4:	2100      	movs	r1, #0
 80011f6:	4809      	ldr	r0, [pc, #36]	; (800121c <MX_LPUART1_UART_Init+0x8c>)
 80011f8:	f005 fef4 	bl	8006fe4 <HAL_UARTEx_SetRxFifoThreshold>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001202:	f000 f9d3 	bl	80015ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_LPUART1_UART_Init+0x8c>)
 8001208:	f005 fe75 	bl	8006ef6 <HAL_UARTEx_DisableFifoMode>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001212:	f000 f9cb 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200000f8 	.word	0x200000f8
 8001220:	40008000 	.word	0x40008000

08001224 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <MX_TIM2_Init+0x98>)
 8001244:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001248:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <MX_TIM2_Init+0x98>)
 800124c:	22a9      	movs	r2, #169	; 0xa9
 800124e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <MX_TIM2_Init+0x98>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <MX_TIM2_Init+0x98>)
 8001258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800125c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <MX_TIM2_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <MX_TIM2_Init+0x98>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800126a:	4814      	ldr	r0, [pc, #80]	; (80012bc <MX_TIM2_Init+0x98>)
 800126c:	f003 fd06 	bl	8004c7c <HAL_TIM_Base_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001276:	f000 f999 	bl	80015ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	4619      	mov	r1, r3
 8001286:	480d      	ldr	r0, [pc, #52]	; (80012bc <MX_TIM2_Init+0x98>)
 8001288:	f004 fa10 	bl	80056ac <HAL_TIM_ConfigClockSource>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001292:	f000 f98b 	bl	80015ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	4619      	mov	r1, r3
 80012a2:	4806      	ldr	r0, [pc, #24]	; (80012bc <MX_TIM2_Init+0x98>)
 80012a4:	f004 ffe0 	bl	8006268 <HAL_TIMEx_MasterConfigSynchronization>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012ae:	f000 f97d 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	3720      	adds	r7, #32
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000018c 	.word	0x2000018c

080012c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c6:	f107 0310 	add.w	r3, r7, #16
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <MX_TIM3_Init+0x94>)
 80012e0:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <MX_TIM3_Init+0x98>)
 80012e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16999;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_TIM3_Init+0x94>)
 80012e6:	f244 2267 	movw	r2, #16999	; 0x4267
 80012ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <MX_TIM3_Init+0x94>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_TIM3_Init+0x94>)
 80012f4:	2209      	movs	r2, #9
 80012f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MX_TIM3_Init+0x94>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MX_TIM3_Init+0x94>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001304:	4813      	ldr	r0, [pc, #76]	; (8001354 <MX_TIM3_Init+0x94>)
 8001306:	f003 fcb9 	bl	8004c7c <HAL_TIM_Base_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001310:	f000 f94c 	bl	80015ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001318:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	4619      	mov	r1, r3
 8001320:	480c      	ldr	r0, [pc, #48]	; (8001354 <MX_TIM3_Init+0x94>)
 8001322:	f004 f9c3 	bl	80056ac <HAL_TIM_ConfigClockSource>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800132c:	f000 f93e 	bl	80015ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001330:	2320      	movs	r3, #32
 8001332:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	4619      	mov	r1, r3
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_TIM3_Init+0x94>)
 800133e:	f004 ff93 	bl	8006268 <HAL_TIMEx_MasterConfigSynchronization>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001348:	f000 f930 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	3720      	adds	r7, #32
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200001d8 	.word	0x200001d8
 8001358:	40000400 	.word	0x40000400

0800135c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08e      	sub	sp, #56	; 0x38
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800137c:	463b      	mov	r3, r7
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]
 800138a:	615a      	str	r2, [r3, #20]
 800138c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800138e:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <MX_TIM4_Init+0xe8>)
 8001390:	4a2d      	ldr	r2, [pc, #180]	; (8001448 <MX_TIM4_Init+0xec>)
 8001392:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8001394:	4b2b      	ldr	r3, [pc, #172]	; (8001444 <MX_TIM4_Init+0xe8>)
 8001396:	22a9      	movs	r2, #169	; 0xa9
 8001398:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139a:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <MX_TIM4_Init+0xe8>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80013a0:	4b28      	ldr	r3, [pc, #160]	; (8001444 <MX_TIM4_Init+0xe8>)
 80013a2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80013a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a8:	4b26      	ldr	r3, [pc, #152]	; (8001444 <MX_TIM4_Init+0xe8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ae:	4b25      	ldr	r3, [pc, #148]	; (8001444 <MX_TIM4_Init+0xe8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013b4:	4823      	ldr	r0, [pc, #140]	; (8001444 <MX_TIM4_Init+0xe8>)
 80013b6:	f003 fc61 	bl	8004c7c <HAL_TIM_Base_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80013c0:	f000 f8f4 	bl	80015ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ce:	4619      	mov	r1, r3
 80013d0:	481c      	ldr	r0, [pc, #112]	; (8001444 <MX_TIM4_Init+0xe8>)
 80013d2:	f004 f96b 	bl	80056ac <HAL_TIM_ConfigClockSource>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80013dc:	f000 f8e6 	bl	80015ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013e0:	4818      	ldr	r0, [pc, #96]	; (8001444 <MX_TIM4_Init+0xe8>)
 80013e2:	f003 fd8b 	bl	8004efc <HAL_TIM_PWM_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80013ec:	f000 f8de 	bl	80015ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4619      	mov	r1, r3
 80013fe:	4811      	ldr	r0, [pc, #68]	; (8001444 <MX_TIM4_Init+0xe8>)
 8001400:	f004 ff32 	bl	8006268 <HAL_TIMEx_MasterConfigSynchronization>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800140a:	f000 f8cf 	bl	80015ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800140e:	2360      	movs	r3, #96	; 0x60
 8001410:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8001412:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001416:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	4619      	mov	r1, r3
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <MX_TIM4_Init+0xe8>)
 8001428:	f004 f82c 	bl	8005484 <HAL_TIM_PWM_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8001432:	f000 f8bb 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001436:	4803      	ldr	r0, [pc, #12]	; (8001444 <MX_TIM4_Init+0xe8>)
 8001438:	f000 fa22 	bl	8001880 <HAL_TIM_MspPostInit>

}
 800143c:	bf00      	nop
 800143e:	3738      	adds	r7, #56	; 0x38
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000224 	.word	0x20000224
 8001448:	40000800 	.word	0x40000800

0800144c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001452:	4b12      	ldr	r3, [pc, #72]	; (800149c <MX_DMA_Init+0x50>)
 8001454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001456:	4a11      	ldr	r2, [pc, #68]	; (800149c <MX_DMA_Init+0x50>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	6493      	str	r3, [r2, #72]	; 0x48
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <MX_DMA_Init+0x50>)
 8001460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800146a:	4b0c      	ldr	r3, [pc, #48]	; (800149c <MX_DMA_Init+0x50>)
 800146c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146e:	4a0b      	ldr	r2, [pc, #44]	; (800149c <MX_DMA_Init+0x50>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6493      	str	r3, [r2, #72]	; 0x48
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <MX_DMA_Init+0x50>)
 8001478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	200b      	movs	r0, #11
 8001488:	f001 ff63 	bl	8003352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800148c:	200b      	movs	r0, #11
 800148e:	f001 ff7a 	bl	8003386 <HAL_NVIC_EnableIRQ>

}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000

080014a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <MX_GPIO_Init+0xd4>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	4a2e      	ldr	r2, [pc, #184]	; (8001574 <MX_GPIO_Init+0xd4>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c2:	4b2c      	ldr	r3, [pc, #176]	; (8001574 <MX_GPIO_Init+0xd4>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ce:	4b29      	ldr	r3, [pc, #164]	; (8001574 <MX_GPIO_Init+0xd4>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	4a28      	ldr	r2, [pc, #160]	; (8001574 <MX_GPIO_Init+0xd4>)
 80014d4:	f043 0320 	orr.w	r3, r3, #32
 80014d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014da:	4b26      	ldr	r3, [pc, #152]	; (8001574 <MX_GPIO_Init+0xd4>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f003 0320 	and.w	r3, r3, #32
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <MX_GPIO_Init+0xd4>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	4a22      	ldr	r2, [pc, #136]	; (8001574 <MX_GPIO_Init+0xd4>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f2:	4b20      	ldr	r3, [pc, #128]	; (8001574 <MX_GPIO_Init+0xd4>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <MX_GPIO_Init+0xd4>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	4a1c      	ldr	r2, [pc, #112]	; (8001574 <MX_GPIO_Init+0xd4>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150a:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <MX_GPIO_Init+0xd4>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	2120      	movs	r1, #32
 800151a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151e:	f002 fb41 	bl	8003ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001528:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800152c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	480f      	ldr	r0, [pc, #60]	; (8001578 <MX_GPIO_Init+0xd8>)
 800153a:	f002 f9b1 	bl	80038a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800153e:	2320      	movs	r3, #32
 8001540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001558:	f002 f9a2 	bl	80038a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800155c:	2200      	movs	r2, #0
 800155e:	2100      	movs	r1, #0
 8001560:	2028      	movs	r0, #40	; 0x28
 8001562:	f001 fef6 	bl	8003352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001566:	2028      	movs	r0, #40	; 0x28
 8001568:	f001 ff0d 	bl	8003386 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800156c:	bf00      	nop
 800156e:	3728      	adds	r7, #40	; 0x28
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40021000 	.word	0x40021000
 8001578:	48000800 	.word	0x48000800

0800157c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
if(htim == &htim2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d104      	bne.n	8001596 <HAL_TIM_PeriodElapsedCallback+0x1a>
{
count += 1;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	3301      	adds	r3, #1
 8001592:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001594:	6013      	str	r3, [r2, #0]
}
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	2000018c 	.word	0x2000018c
 80015a8:	20000274 	.word	0x20000274

080015ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b0:	b672      	cpsid	i
}
 80015b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <Error_Handler+0x8>
	...

080015b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <HAL_MspInit+0x44>)
 80015c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c2:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <HAL_MspInit+0x44>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6613      	str	r3, [r2, #96]	; 0x60
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <HAL_MspInit+0x44>)
 80015cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_MspInit+0x44>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015da:	4a08      	ldr	r2, [pc, #32]	; (80015fc <HAL_MspInit+0x44>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e0:	6593      	str	r3, [r2, #88]	; 0x58
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_MspInit+0x44>)
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80015ee:	f002 fbb9 	bl	8003d64 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000

08001600 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b0a0      	sub	sp, #128	; 0x80
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001618:	f107 0318 	add.w	r3, r7, #24
 800161c:	2254      	movs	r2, #84	; 0x54
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f005 fd6b 	bl	80070fc <memset>
  if(hadc->Instance==ADC1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800162e:	d177      	bne.n	8001720 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001630:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001634:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001636:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800163a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800163c:	f107 0318 	add.w	r3, r7, #24
 8001640:	4618      	mov	r0, r3
 8001642:	f003 f8cd 	bl	80047e0 <HAL_RCCEx_PeriphCLKConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800164c:	f7ff ffae 	bl	80015ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001650:	4b35      	ldr	r3, [pc, #212]	; (8001728 <HAL_ADC_MspInit+0x128>)
 8001652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001654:	4a34      	ldr	r2, [pc, #208]	; (8001728 <HAL_ADC_MspInit+0x128>)
 8001656:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800165a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165c:	4b32      	ldr	r3, [pc, #200]	; (8001728 <HAL_ADC_MspInit+0x128>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <HAL_ADC_MspInit+0x128>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166c:	4a2e      	ldr	r2, [pc, #184]	; (8001728 <HAL_ADC_MspInit+0x128>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001674:	4b2c      	ldr	r3, [pc, #176]	; (8001728 <HAL_ADC_MspInit+0x128>)
 8001676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001680:	4b29      	ldr	r3, [pc, #164]	; (8001728 <HAL_ADC_MspInit+0x128>)
 8001682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001684:	4a28      	ldr	r2, [pc, #160]	; (8001728 <HAL_ADC_MspInit+0x128>)
 8001686:	f043 0302 	orr.w	r3, r3, #2
 800168a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168c:	4b26      	ldr	r3, [pc, #152]	; (8001728 <HAL_ADC_MspInit+0x128>)
 800168e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001698:	2303      	movs	r3, #3
 800169a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800169c:	2303      	movs	r3, #3
 800169e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016a8:	4619      	mov	r1, r3
 80016aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ae:	f002 f8f7 	bl	80038a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016b2:	2301      	movs	r3, #1
 80016b4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016b6:	2303      	movs	r3, #3
 80016b8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016c2:	4619      	mov	r1, r3
 80016c4:	4819      	ldr	r0, [pc, #100]	; (800172c <HAL_ADC_MspInit+0x12c>)
 80016c6:	f002 f8eb 	bl	80038a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <HAL_ADC_MspInit+0x130>)
 80016cc:	4a19      	ldr	r2, [pc, #100]	; (8001734 <HAL_ADC_MspInit+0x134>)
 80016ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <HAL_ADC_MspInit+0x130>)
 80016d2:	2205      	movs	r2, #5
 80016d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <HAL_ADC_MspInit+0x130>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <HAL_ADC_MspInit+0x130>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <HAL_ADC_MspInit+0x130>)
 80016e4:	2280      	movs	r2, #128	; 0x80
 80016e6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_ADC_MspInit+0x130>)
 80016ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <HAL_ADC_MspInit+0x130>)
 80016f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016f6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <HAL_ADC_MspInit+0x130>)
 80016fa:	2220      	movs	r2, #32
 80016fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <HAL_ADC_MspInit+0x130>)
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001704:	480a      	ldr	r0, [pc, #40]	; (8001730 <HAL_ADC_MspInit+0x130>)
 8001706:	f001 fe59 	bl	80033bc <HAL_DMA_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8001710:	f7ff ff4c 	bl	80015ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a06      	ldr	r2, [pc, #24]	; (8001730 <HAL_ADC_MspInit+0x130>)
 8001718:	655a      	str	r2, [r3, #84]	; 0x54
 800171a:	4a05      	ldr	r2, [pc, #20]	; (8001730 <HAL_ADC_MspInit+0x130>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001720:	bf00      	nop
 8001722:	3780      	adds	r7, #128	; 0x80
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021000 	.word	0x40021000
 800172c:	48000400 	.word	0x48000400
 8001730:	20000098 	.word	0x20000098
 8001734:	40020008 	.word	0x40020008

08001738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b09e      	sub	sp, #120	; 0x78
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001750:	f107 0310 	add.w	r3, r7, #16
 8001754:	2254      	movs	r2, #84	; 0x54
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f005 fccf 	bl	80070fc <memset>
  if(huart->Instance==LPUART1)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a1f      	ldr	r2, [pc, #124]	; (80017e0 <HAL_UART_MspInit+0xa8>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d136      	bne.n	80017d6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001768:	2320      	movs	r3, #32
 800176a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800176c:	2300      	movs	r3, #0
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	4618      	mov	r0, r3
 8001776:	f003 f833 	bl	80047e0 <HAL_RCCEx_PeriphCLKConfig>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001780:	f7ff ff14 	bl	80015ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001784:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <HAL_UART_MspInit+0xac>)
 8001786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001788:	4a16      	ldr	r2, [pc, #88]	; (80017e4 <HAL_UART_MspInit+0xac>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <HAL_UART_MspInit+0xac>)
 8001792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_UART_MspInit+0xac>)
 800179e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a0:	4a10      	ldr	r2, [pc, #64]	; (80017e4 <HAL_UART_MspInit+0xac>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a8:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <HAL_UART_MspInit+0xac>)
 80017aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80017b4:	230c      	movs	r3, #12
 80017b6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80017c4:	230c      	movs	r3, #12
 80017c6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017cc:	4619      	mov	r1, r3
 80017ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d2:	f002 f865 	bl	80038a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80017d6:	bf00      	nop
 80017d8:	3778      	adds	r7, #120	; 0x78
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40008000 	.word	0x40008000
 80017e4:	40021000 	.word	0x40021000

080017e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f8:	d114      	bne.n	8001824 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017fa:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <HAL_TIM_Base_MspInit+0x8c>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	4a1d      	ldr	r2, [pc, #116]	; (8001874 <HAL_TIM_Base_MspInit+0x8c>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6593      	str	r3, [r2, #88]	; 0x58
 8001806:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <HAL_TIM_Base_MspInit+0x8c>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	201c      	movs	r0, #28
 8001818:	f001 fd9b 	bl	8003352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800181c:	201c      	movs	r0, #28
 800181e:	f001 fdb2 	bl	8003386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001822:	e022      	b.n	800186a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a13      	ldr	r2, [pc, #76]	; (8001878 <HAL_TIM_Base_MspInit+0x90>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d10c      	bne.n	8001848 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <HAL_TIM_Base_MspInit+0x8c>)
 8001830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001832:	4a10      	ldr	r2, [pc, #64]	; (8001874 <HAL_TIM_Base_MspInit+0x8c>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6593      	str	r3, [r2, #88]	; 0x58
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <HAL_TIM_Base_MspInit+0x8c>)
 800183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	693b      	ldr	r3, [r7, #16]
}
 8001846:	e010      	b.n	800186a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0b      	ldr	r2, [pc, #44]	; (800187c <HAL_TIM_Base_MspInit+0x94>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d10b      	bne.n	800186a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_TIM_Base_MspInit+0x8c>)
 8001854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001856:	4a07      	ldr	r2, [pc, #28]	; (8001874 <HAL_TIM_Base_MspInit+0x8c>)
 8001858:	f043 0304 	orr.w	r3, r3, #4
 800185c:	6593      	str	r3, [r2, #88]	; 0x58
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_TIM_Base_MspInit+0x8c>)
 8001860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
}
 800186a:	bf00      	nop
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40021000 	.word	0x40021000
 8001878:	40000400 	.word	0x40000400
 800187c:	40000800 	.word	0x40000800

08001880 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 030c 	add.w	r3, r7, #12
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <HAL_TIM_MspPostInit+0x68>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d11d      	bne.n	80018de <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_TIM_MspPostInit+0x6c>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	4a11      	ldr	r2, [pc, #68]	; (80018ec <HAL_TIM_MspPostInit+0x6c>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <HAL_TIM_MspPostInit+0x6c>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80018ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80018cc:	230a      	movs	r3, #10
 80018ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	4619      	mov	r1, r3
 80018d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018da:	f001 ffe1 	bl	80038a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80018de:	bf00      	nop
 80018e0:	3720      	adds	r7, #32
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40000800 	.word	0x40000800
 80018ec:	40021000 	.word	0x40021000

080018f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018f4:	e7fe      	b.n	80018f4 <NMI_Handler+0x4>

080018f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fa:	e7fe      	b.n	80018fa <HardFault_Handler+0x4>

080018fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <MemManage_Handler+0x4>

08001902 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001906:	e7fe      	b.n	8001906 <BusFault_Handler+0x4>

08001908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800190c:	e7fe      	b.n	800190c <UsageFault_Handler+0x4>

0800190e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193c:	f000 f8ac 	bl	8001a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}

08001944 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <DMA1_Channel1_IRQHandler+0x10>)
 800194a:	f001 fe5a 	bl	8003602 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000098 	.word	0x20000098

08001958 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <TIM2_IRQHandler+0x10>)
 800195e:	f003 fc41 	bl	80051e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	2000018c 	.word	0x2000018c

0800196c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001970:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001974:	f002 f92e 	bl	8003bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}

0800197c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <SystemInit+0x20>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001986:	4a05      	ldr	r2, [pc, #20]	; (800199c <SystemInit+0x20>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019a0:	480d      	ldr	r0, [pc, #52]	; (80019d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019a4:	f7ff ffea 	bl	800197c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a8:	480c      	ldr	r0, [pc, #48]	; (80019dc <LoopForever+0x6>)
  ldr r1, =_edata
 80019aa:	490d      	ldr	r1, [pc, #52]	; (80019e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <LoopForever+0xe>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019c0:	4c0a      	ldr	r4, [pc, #40]	; (80019ec <LoopForever+0x16>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ce:	f005 fb9d 	bl	800710c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019d2:	f7ff f92d 	bl	8000c30 <main>

080019d6 <LoopForever>:

LoopForever:
    b LoopForever
 80019d6:	e7fe      	b.n	80019d6 <LoopForever>
  ldr   r0, =_estack
 80019d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80019e4:	080071bc 	.word	0x080071bc
  ldr r2, =_sbss
 80019e8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80019ec:	2000051c 	.word	0x2000051c

080019f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC1_2_IRQHandler>

080019f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fc:	2003      	movs	r0, #3
 80019fe:	f001 fc9d 	bl	800333c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a02:	2000      	movs	r0, #0
 8001a04:	f000 f80e 	bl	8001a24 <HAL_InitTick>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	71fb      	strb	r3, [r7, #7]
 8001a12:	e001      	b.n	8001a18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a14:	f7ff fdd0 	bl	80015b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a18:	79fb      	ldrb	r3, [r7, #7]

}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a30:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <HAL_InitTick+0x68>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d022      	beq.n	8001a7e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <HAL_InitTick+0x6c>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <HAL_InitTick+0x68>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a44:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f001 fca8 	bl	80033a2 <HAL_SYSTICK_Config>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10f      	bne.n	8001a78 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b0f      	cmp	r3, #15
 8001a5c:	d809      	bhi.n	8001a72 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a66:	f001 fc74 	bl	8003352 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <HAL_InitTick+0x70>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	e007      	b.n	8001a82 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	73fb      	strb	r3, [r7, #15]
 8001a76:	e004      	b.n	8001a82 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	73fb      	strb	r3, [r7, #15]
 8001a7c:	e001      	b.n	8001a82 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	2000000c 	.word	0x2000000c
 8001a90:	20000004 	.word	0x20000004
 8001a94:	20000008 	.word	0x20000008

08001a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_IncTick+0x1c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_IncTick+0x20>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	4a03      	ldr	r2, [pc, #12]	; (8001ab4 <HAL_IncTick+0x1c>)
 8001aa8:	6013      	str	r3, [r2, #0]
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	20000518 	.word	0x20000518
 8001ab8:	2000000c 	.word	0x2000000c

08001abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <HAL_GetTick+0x14>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000518 	.word	0x20000518

08001ad4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	609a      	str	r2, [r3, #8]
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	609a      	str	r2, [r3, #8]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	3360      	adds	r3, #96	; 0x60
 8001b4e:	461a      	mov	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <LL_ADC_SetOffset+0x44>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b74:	bf00      	nop
 8001b76:	371c      	adds	r7, #28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	03fff000 	.word	0x03fff000

08001b84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3360      	adds	r3, #96	; 0x60
 8001b92:	461a      	mov	r2, r3
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	3360      	adds	r3, #96	; 0x60
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bda:	bf00      	nop
 8001bdc:	371c      	adds	r7, #28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b087      	sub	sp, #28
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3360      	adds	r3, #96	; 0x60
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001c10:	bf00      	nop
 8001c12:	371c      	adds	r7, #28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	3360      	adds	r3, #96	; 0x60
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	431a      	orrs	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001c46:	bf00      	nop
 8001c48:	371c      	adds	r7, #28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	615a      	str	r2, [r3, #20]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b087      	sub	sp, #28
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	3330      	adds	r3, #48	; 0x30
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	0a1b      	lsrs	r3, r3, #8
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	4413      	add	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	211f      	movs	r1, #31
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	0e9b      	lsrs	r3, r3, #26
 8001cd6:	f003 011f 	and.w	r1, r3, #31
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cea:	bf00      	nop
 8001cec:	371c      	adds	r7, #28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b087      	sub	sp, #28
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3314      	adds	r3, #20
 8001d06:	461a      	mov	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	0e5b      	lsrs	r3, r3, #25
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	4413      	add	r3, r2
 8001d14:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	0d1b      	lsrs	r3, r3, #20
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	2107      	movs	r1, #7
 8001d24:	fa01 f303 	lsl.w	r3, r1, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	0d1b      	lsrs	r3, r3, #20
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d40:	bf00      	nop
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d64:	43db      	mvns	r3, r3
 8001d66:	401a      	ands	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f003 0318 	and.w	r3, r3, #24
 8001d6e:	4908      	ldr	r1, [pc, #32]	; (8001d90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d70:	40d9      	lsrs	r1, r3
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	400b      	ands	r3, r1
 8001d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d82:	bf00      	nop
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	0007ffff 	.word	0x0007ffff

08001d94 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 031f 	and.w	r3, r3, #31
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001dc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6093      	str	r3, [r2, #8]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001de4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001de8:	d101      	bne.n	8001dee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e38:	d101      	bne.n	8001e3e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e60:	f043 0201 	orr.w	r2, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <LL_ADC_IsEnabled+0x18>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <LL_ADC_IsEnabled+0x1a>
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001eaa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001eae:	f043 0204 	orr.w	r2, r3, #4
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d101      	bne.n	8001eda <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d101      	bne.n	8001f00 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
	...

08001f10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f10:	b590      	push	{r4, r7, lr}
 8001f12:	b089      	sub	sp, #36	; 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e1a9      	b.n	800227e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d109      	bne.n	8001f4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff fb61 	bl	8001600 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff ff3f 	bl	8001dd4 <LL_ADC_IsDeepPowerDownEnabled>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d004      	beq.n	8001f66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff25 	bl	8001db0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff ff5a 	bl	8001e24 <LL_ADC_IsInternalRegulatorEnabled>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d115      	bne.n	8001fa2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ff3e 	bl	8001dfc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f80:	4b9c      	ldr	r3, [pc, #624]	; (80021f4 <HAL_ADC_Init+0x2e4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	099b      	lsrs	r3, r3, #6
 8001f86:	4a9c      	ldr	r2, [pc, #624]	; (80021f8 <HAL_ADC_Init+0x2e8>)
 8001f88:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8c:	099b      	lsrs	r3, r3, #6
 8001f8e:	3301      	adds	r3, #1
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f94:	e002      	b.n	8001f9c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f9      	bne.n	8001f96 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff ff3c 	bl	8001e24 <LL_ADC_IsInternalRegulatorEnabled>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10d      	bne.n	8001fce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb6:	f043 0210 	orr.w	r2, r3, #16
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc2:	f043 0201 	orr.w	r2, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ff75 	bl	8001ec2 <LL_ADC_REG_IsConversionOngoing>
 8001fd8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f040 8142 	bne.w	800226c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f040 813e 	bne.w	800226c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ff8:	f043 0202 	orr.w	r2, r3, #2
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff35 	bl	8001e74 <LL_ADC_IsEnabled>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d141      	bne.n	8002094 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002018:	d004      	beq.n	8002024 <HAL_ADC_Init+0x114>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a77      	ldr	r2, [pc, #476]	; (80021fc <HAL_ADC_Init+0x2ec>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d10f      	bne.n	8002044 <HAL_ADC_Init+0x134>
 8002024:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002028:	f7ff ff24 	bl	8001e74 <LL_ADC_IsEnabled>
 800202c:	4604      	mov	r4, r0
 800202e:	4873      	ldr	r0, [pc, #460]	; (80021fc <HAL_ADC_Init+0x2ec>)
 8002030:	f7ff ff20 	bl	8001e74 <LL_ADC_IsEnabled>
 8002034:	4603      	mov	r3, r0
 8002036:	4323      	orrs	r3, r4
 8002038:	2b00      	cmp	r3, #0
 800203a:	bf0c      	ite	eq
 800203c:	2301      	moveq	r3, #1
 800203e:	2300      	movne	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	e012      	b.n	800206a <HAL_ADC_Init+0x15a>
 8002044:	486e      	ldr	r0, [pc, #440]	; (8002200 <HAL_ADC_Init+0x2f0>)
 8002046:	f7ff ff15 	bl	8001e74 <LL_ADC_IsEnabled>
 800204a:	4604      	mov	r4, r0
 800204c:	486d      	ldr	r0, [pc, #436]	; (8002204 <HAL_ADC_Init+0x2f4>)
 800204e:	f7ff ff11 	bl	8001e74 <LL_ADC_IsEnabled>
 8002052:	4603      	mov	r3, r0
 8002054:	431c      	orrs	r4, r3
 8002056:	486c      	ldr	r0, [pc, #432]	; (8002208 <HAL_ADC_Init+0x2f8>)
 8002058:	f7ff ff0c 	bl	8001e74 <LL_ADC_IsEnabled>
 800205c:	4603      	mov	r3, r0
 800205e:	4323      	orrs	r3, r4
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf0c      	ite	eq
 8002064:	2301      	moveq	r3, #1
 8002066:	2300      	movne	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d012      	beq.n	8002094 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002076:	d004      	beq.n	8002082 <HAL_ADC_Init+0x172>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a5f      	ldr	r2, [pc, #380]	; (80021fc <HAL_ADC_Init+0x2ec>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d101      	bne.n	8002086 <HAL_ADC_Init+0x176>
 8002082:	4a62      	ldr	r2, [pc, #392]	; (800220c <HAL_ADC_Init+0x2fc>)
 8002084:	e000      	b.n	8002088 <HAL_ADC_Init+0x178>
 8002086:	4a62      	ldr	r2, [pc, #392]	; (8002210 <HAL_ADC_Init+0x300>)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	4619      	mov	r1, r3
 800208e:	4610      	mov	r0, r2
 8002090:	f7ff fd20 	bl	8001ad4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	7f5b      	ldrb	r3, [r3, #29]
 8002098:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800209e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80020a4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80020aa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020b2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d106      	bne.n	80020d0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c6:	3b01      	subs	r3, #1
 80020c8:	045b      	lsls	r3, r3, #17
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d009      	beq.n	80020ec <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	4b48      	ldr	r3, [pc, #288]	; (8002214 <HAL_ADC_Init+0x304>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	69b9      	ldr	r1, [r7, #24]
 80020fc:	430b      	orrs	r3, r1
 80020fe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fee4 	bl	8001ee8 <LL_ADC_INJ_IsConversionOngoing>
 8002120:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d17f      	bne.n	8002228 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d17c      	bne.n	8002228 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002132:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800213a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800214a:	f023 0302 	bic.w	r3, r3, #2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	69b9      	ldr	r1, [r7, #24]
 8002154:	430b      	orrs	r3, r1
 8002156:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d017      	beq.n	8002190 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691a      	ldr	r2, [r3, #16]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800216e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002178:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800217c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6911      	ldr	r1, [r2, #16]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	430b      	orrs	r3, r1
 800218a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800218e:	e013      	b.n	80021b8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800219e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80021b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021b4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d12a      	bne.n	8002218 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80021cc:	f023 0304 	bic.w	r3, r3, #4
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021d8:	4311      	orrs	r1, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80021de:	4311      	orrs	r1, r2
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021e4:	430a      	orrs	r2, r1
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f042 0201 	orr.w	r2, r2, #1
 80021f0:	611a      	str	r2, [r3, #16]
 80021f2:	e019      	b.n	8002228 <HAL_ADC_Init+0x318>
 80021f4:	20000004 	.word	0x20000004
 80021f8:	053e2d63 	.word	0x053e2d63
 80021fc:	50000100 	.word	0x50000100
 8002200:	50000400 	.word	0x50000400
 8002204:	50000500 	.word	0x50000500
 8002208:	50000600 	.word	0x50000600
 800220c:	50000300 	.word	0x50000300
 8002210:	50000700 	.word	0x50000700
 8002214:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691a      	ldr	r2, [r3, #16]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d10c      	bne.n	800224a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f023 010f 	bic.w	r1, r3, #15
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	1e5a      	subs	r2, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
 8002248:	e007      	b.n	800225a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 020f 	bic.w	r2, r2, #15
 8002258:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225e:	f023 0303 	bic.w	r3, r3, #3
 8002262:	f043 0201 	orr.w	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	65da      	str	r2, [r3, #92]	; 0x5c
 800226a:	e007      	b.n	800227c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	f043 0210 	orr.w	r2, r3, #16
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800227c:	7ffb      	ldrb	r3, [r7, #31]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3724      	adds	r7, #36	; 0x24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd90      	pop	{r4, r7, pc}
 8002286:	bf00      	nop

08002288 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800229c:	d004      	beq.n	80022a8 <HAL_ADC_Start_DMA+0x20>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a5a      	ldr	r2, [pc, #360]	; (800240c <HAL_ADC_Start_DMA+0x184>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d101      	bne.n	80022ac <HAL_ADC_Start_DMA+0x24>
 80022a8:	4b59      	ldr	r3, [pc, #356]	; (8002410 <HAL_ADC_Start_DMA+0x188>)
 80022aa:	e000      	b.n	80022ae <HAL_ADC_Start_DMA+0x26>
 80022ac:	4b59      	ldr	r3, [pc, #356]	; (8002414 <HAL_ADC_Start_DMA+0x18c>)
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fd70 	bl	8001d94 <LL_ADC_GetMultimode>
 80022b4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fe01 	bl	8001ec2 <LL_ADC_REG_IsConversionOngoing>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f040 809b 	bne.w	80023fe <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_Start_DMA+0x4e>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e096      	b.n	8002404 <HAL_ADC_Start_DMA+0x17c>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a4d      	ldr	r2, [pc, #308]	; (8002418 <HAL_ADC_Start_DMA+0x190>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d008      	beq.n	80022fa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b05      	cmp	r3, #5
 80022f2:	d002      	beq.n	80022fa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	2b09      	cmp	r3, #9
 80022f8:	d17a      	bne.n	80023f0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 fcf6 	bl	8002cec <ADC_Enable>
 8002300:	4603      	mov	r3, r0
 8002302:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002304:	7dfb      	ldrb	r3, [r7, #23]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d16d      	bne.n	80023e6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002312:	f023 0301 	bic.w	r3, r3, #1
 8002316:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a3a      	ldr	r2, [pc, #232]	; (800240c <HAL_ADC_Start_DMA+0x184>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d009      	beq.n	800233c <HAL_ADC_Start_DMA+0xb4>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a3b      	ldr	r2, [pc, #236]	; (800241c <HAL_ADC_Start_DMA+0x194>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d002      	beq.n	8002338 <HAL_ADC_Start_DMA+0xb0>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	e003      	b.n	8002340 <HAL_ADC_Start_DMA+0xb8>
 8002338:	4b39      	ldr	r3, [pc, #228]	; (8002420 <HAL_ADC_Start_DMA+0x198>)
 800233a:	e001      	b.n	8002340 <HAL_ADC_Start_DMA+0xb8>
 800233c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	4293      	cmp	r3, r2
 8002346:	d002      	beq.n	800234e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d105      	bne.n	800235a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d006      	beq.n	8002374 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236a:	f023 0206 	bic.w	r2, r3, #6
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	661a      	str	r2, [r3, #96]	; 0x60
 8002372:	e002      	b.n	800237a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237e:	4a29      	ldr	r2, [pc, #164]	; (8002424 <HAL_ADC_Start_DMA+0x19c>)
 8002380:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002386:	4a28      	ldr	r2, [pc, #160]	; (8002428 <HAL_ADC_Start_DMA+0x1a0>)
 8002388:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238e:	4a27      	ldr	r2, [pc, #156]	; (800242c <HAL_ADC_Start_DMA+0x1a4>)
 8002390:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	221c      	movs	r2, #28
 8002398:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f042 0210 	orr.w	r2, r2, #16
 80023b0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0201 	orr.w	r2, r2, #1
 80023c0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	3340      	adds	r3, #64	; 0x40
 80023cc:	4619      	mov	r1, r3
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f001 f89b 	bl	800350c <HAL_DMA_Start_IT>
 80023d6:	4603      	mov	r3, r0
 80023d8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fd5b 	bl	8001e9a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80023e4:	e00d      	b.n	8002402 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80023ee:	e008      	b.n	8002402 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80023fc:	e001      	b.n	8002402 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023fe:	2302      	movs	r3, #2
 8002400:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002402:	7dfb      	ldrb	r3, [r7, #23]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	50000100 	.word	0x50000100
 8002410:	50000300 	.word	0x50000300
 8002414:	50000700 	.word	0x50000700
 8002418:	50000600 	.word	0x50000600
 800241c:	50000500 	.word	0x50000500
 8002420:	50000400 	.word	0x50000400
 8002424:	08002e19 	.word	0x08002e19
 8002428:	08002ef1 	.word	0x08002ef1
 800242c:	08002f0d 	.word	0x08002f0d

08002430 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b0b6      	sub	sp, #216	; 0xd8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800247c:	2300      	movs	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002486:	2b01      	cmp	r3, #1
 8002488:	d102      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x24>
 800248a:	2302      	movs	r3, #2
 800248c:	f000 bc13 	b.w	8002cb6 <HAL_ADC_ConfigChannel+0x84a>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fd10 	bl	8001ec2 <LL_ADC_REG_IsConversionOngoing>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f040 83f3 	bne.w	8002c90 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	6859      	ldr	r1, [r3, #4]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	f7ff fbf1 	bl	8001c9e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fcfe 	bl	8001ec2 <LL_ADC_REG_IsConversionOngoing>
 80024c6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fd0a 	bl	8001ee8 <LL_ADC_INJ_IsConversionOngoing>
 80024d4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f040 81d9 	bne.w	8002894 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f040 81d4 	bne.w	8002894 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024f4:	d10f      	bne.n	8002516 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2200      	movs	r2, #0
 8002500:	4619      	mov	r1, r3
 8002502:	f7ff fbf8 	bl	8001cf6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fb9f 	bl	8001c52 <LL_ADC_SetSamplingTimeCommonConfig>
 8002514:	e00e      	b.n	8002534 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6819      	ldr	r1, [r3, #0]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	461a      	mov	r2, r3
 8002524:	f7ff fbe7 	bl	8001cf6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2100      	movs	r1, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fb8f 	bl	8001c52 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	695a      	ldr	r2, [r3, #20]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	08db      	lsrs	r3, r3, #3
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b04      	cmp	r3, #4
 8002554:	d022      	beq.n	800259c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6919      	ldr	r1, [r3, #16]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002566:	f7ff fae9 	bl	8001b3c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6919      	ldr	r1, [r3, #16]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	461a      	mov	r2, r3
 8002578:	f7ff fb35 	bl	8001be6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002588:	2b01      	cmp	r3, #1
 800258a:	d102      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x126>
 800258c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002590:	e000      	b.n	8002594 <HAL_ADC_ConfigChannel+0x128>
 8002592:	2300      	movs	r3, #0
 8002594:	461a      	mov	r2, r3
 8002596:	f7ff fb41 	bl	8001c1c <LL_ADC_SetOffsetSaturation>
 800259a:	e17b      	b.n	8002894 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2100      	movs	r1, #0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff faee 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10a      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x15c>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2100      	movs	r1, #0
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff fae3 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 80025be:	4603      	mov	r3, r0
 80025c0:	0e9b      	lsrs	r3, r3, #26
 80025c2:	f003 021f 	and.w	r2, r3, #31
 80025c6:	e01e      	b.n	8002606 <HAL_ADC_ConfigChannel+0x19a>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fad8 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80025f6:	2320      	movs	r3, #32
 80025f8:	e004      	b.n	8002604 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80025fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260e:	2b00      	cmp	r3, #0
 8002610:	d105      	bne.n	800261e <HAL_ADC_ConfigChannel+0x1b2>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	0e9b      	lsrs	r3, r3, #26
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	e018      	b.n	8002650 <HAL_ADC_ConfigChannel+0x1e4>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002636:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800263a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002642:	2320      	movs	r3, #32
 8002644:	e004      	b.n	8002650 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002646:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002650:	429a      	cmp	r2, r3
 8002652:	d106      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2200      	movs	r2, #0
 800265a:	2100      	movs	r1, #0
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff faa7 	bl	8001bb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2101      	movs	r1, #1
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fa8b 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 800266e:	4603      	mov	r3, r0
 8002670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10a      	bne.n	800268e <HAL_ADC_ConfigChannel+0x222>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2101      	movs	r1, #1
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fa80 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 8002684:	4603      	mov	r3, r0
 8002686:	0e9b      	lsrs	r3, r3, #26
 8002688:	f003 021f 	and.w	r2, r3, #31
 800268c:	e01e      	b.n	80026cc <HAL_ADC_ConfigChannel+0x260>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2101      	movs	r1, #1
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fa75 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 800269a:	4603      	mov	r3, r0
 800269c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80026ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80026b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80026bc:	2320      	movs	r3, #32
 80026be:	e004      	b.n	80026ca <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80026c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026c4:	fab3 f383 	clz	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d105      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x278>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	0e9b      	lsrs	r3, r3, #26
 80026de:	f003 031f 	and.w	r3, r3, #31
 80026e2:	e018      	b.n	8002716 <HAL_ADC_ConfigChannel+0x2aa>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026f0:	fa93 f3a3 	rbit	r3, r3
 80026f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80026f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002700:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002708:	2320      	movs	r3, #32
 800270a:	e004      	b.n	8002716 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800270c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002710:	fab3 f383 	clz	r3, r3
 8002714:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002716:	429a      	cmp	r2, r3
 8002718:	d106      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2200      	movs	r2, #0
 8002720:	2101      	movs	r1, #1
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fa44 	bl	8001bb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2102      	movs	r1, #2
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fa28 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 8002734:	4603      	mov	r3, r0
 8002736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10a      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x2e8>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2102      	movs	r1, #2
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fa1d 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 800274a:	4603      	mov	r3, r0
 800274c:	0e9b      	lsrs	r3, r3, #26
 800274e:	f003 021f 	and.w	r2, r3, #31
 8002752:	e01e      	b.n	8002792 <HAL_ADC_ConfigChannel+0x326>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2102      	movs	r1, #2
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fa12 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 8002760:	4603      	mov	r3, r0
 8002762:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800276a:	fa93 f3a3 	rbit	r3, r3
 800276e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002772:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002776:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800277a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002782:	2320      	movs	r3, #32
 8002784:	e004      	b.n	8002790 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002786:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279a:	2b00      	cmp	r3, #0
 800279c:	d105      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x33e>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	0e9b      	lsrs	r3, r3, #26
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	e016      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x36c>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80027bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80027c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80027ca:	2320      	movs	r3, #32
 80027cc:	e004      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80027ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027d8:	429a      	cmp	r2, r3
 80027da:	d106      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2200      	movs	r2, #0
 80027e2:	2102      	movs	r1, #2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff f9e3 	bl	8001bb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2103      	movs	r1, #3
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff f9c7 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x3aa>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2103      	movs	r1, #3
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff f9bc 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 800280c:	4603      	mov	r3, r0
 800280e:	0e9b      	lsrs	r3, r3, #26
 8002810:	f003 021f 	and.w	r2, r3, #31
 8002814:	e017      	b.n	8002846 <HAL_ADC_ConfigChannel+0x3da>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2103      	movs	r1, #3
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff f9b1 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 8002822:	4603      	mov	r3, r0
 8002824:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800282e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002830:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002832:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002838:	2320      	movs	r3, #32
 800283a:	e003      	b.n	8002844 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800283c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284e:	2b00      	cmp	r3, #0
 8002850:	d105      	bne.n	800285e <HAL_ADC_ConfigChannel+0x3f2>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	0e9b      	lsrs	r3, r3, #26
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	e011      	b.n	8002882 <HAL_ADC_ConfigChannel+0x416>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800286c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800286e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002876:	2320      	movs	r3, #32
 8002878:	e003      	b.n	8002882 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800287a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002882:	429a      	cmp	r2, r3
 8002884:	d106      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2200      	movs	r2, #0
 800288c:	2103      	movs	r1, #3
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff f98e 	bl	8001bb0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff faeb 	bl	8001e74 <LL_ADC_IsEnabled>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f040 813d 	bne.w	8002b20 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6819      	ldr	r1, [r3, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	461a      	mov	r2, r3
 80028b4:	f7ff fa4a 	bl	8001d4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	4aa2      	ldr	r2, [pc, #648]	; (8002b48 <HAL_ADC_ConfigChannel+0x6dc>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	f040 812e 	bne.w	8002b20 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10b      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x480>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	0e9b      	lsrs	r3, r3, #26
 80028da:	3301      	adds	r3, #1
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	2b09      	cmp	r3, #9
 80028e2:	bf94      	ite	ls
 80028e4:	2301      	movls	r3, #1
 80028e6:	2300      	movhi	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	e019      	b.n	8002920 <HAL_ADC_ConfigChannel+0x4b4>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80028fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028fc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80028fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002904:	2320      	movs	r3, #32
 8002906:	e003      	b.n	8002910 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002908:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800290a:	fab3 f383 	clz	r3, r3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	3301      	adds	r3, #1
 8002912:	f003 031f 	and.w	r3, r3, #31
 8002916:	2b09      	cmp	r3, #9
 8002918:	bf94      	ite	ls
 800291a:	2301      	movls	r3, #1
 800291c:	2300      	movhi	r3, #0
 800291e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002920:	2b00      	cmp	r3, #0
 8002922:	d079      	beq.n	8002a18 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292c:	2b00      	cmp	r3, #0
 800292e:	d107      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x4d4>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	0e9b      	lsrs	r3, r3, #26
 8002936:	3301      	adds	r3, #1
 8002938:	069b      	lsls	r3, r3, #26
 800293a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800293e:	e015      	b.n	800296c <HAL_ADC_ConfigChannel+0x500>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002948:	fa93 f3a3 	rbit	r3, r3
 800294c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800294e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002950:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002958:	2320      	movs	r3, #32
 800295a:	e003      	b.n	8002964 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800295c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800295e:	fab3 f383 	clz	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	3301      	adds	r3, #1
 8002966:	069b      	lsls	r3, r3, #26
 8002968:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002974:	2b00      	cmp	r3, #0
 8002976:	d109      	bne.n	800298c <HAL_ADC_ConfigChannel+0x520>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0e9b      	lsrs	r3, r3, #26
 800297e:	3301      	adds	r3, #1
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	2101      	movs	r1, #1
 8002986:	fa01 f303 	lsl.w	r3, r1, r3
 800298a:	e017      	b.n	80029bc <HAL_ADC_ConfigChannel+0x550>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800299a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800299c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800299e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80029a4:	2320      	movs	r3, #32
 80029a6:	e003      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80029a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029aa:	fab3 f383 	clz	r3, r3
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	3301      	adds	r3, #1
 80029b2:	f003 031f 	and.w	r3, r3, #31
 80029b6:	2101      	movs	r1, #1
 80029b8:	fa01 f303 	lsl.w	r3, r1, r3
 80029bc:	ea42 0103 	orr.w	r1, r2, r3
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10a      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x576>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	0e9b      	lsrs	r3, r3, #26
 80029d2:	3301      	adds	r3, #1
 80029d4:	f003 021f 	and.w	r2, r3, #31
 80029d8:	4613      	mov	r3, r2
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	4413      	add	r3, r2
 80029de:	051b      	lsls	r3, r3, #20
 80029e0:	e018      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x5a8>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ea:	fa93 f3a3 	rbit	r3, r3
 80029ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80029f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80029fa:	2320      	movs	r3, #32
 80029fc:	e003      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80029fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a00:	fab3 f383 	clz	r3, r3
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	3301      	adds	r3, #1
 8002a08:	f003 021f 	and.w	r2, r3, #31
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4413      	add	r3, r2
 8002a12:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a14:	430b      	orrs	r3, r1
 8002a16:	e07e      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d107      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x5c8>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	0e9b      	lsrs	r3, r3, #26
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	069b      	lsls	r3, r3, #26
 8002a2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a32:	e015      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x5f4>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3c:	fa93 f3a3 	rbit	r3, r3
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a44:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002a4c:	2320      	movs	r3, #32
 8002a4e:	e003      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a52:	fab3 f383 	clz	r3, r3
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	3301      	adds	r3, #1
 8002a5a:	069b      	lsls	r3, r3, #26
 8002a5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d109      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x614>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	0e9b      	lsrs	r3, r3, #26
 8002a72:	3301      	adds	r3, #1
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	2101      	movs	r1, #1
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	e017      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x644>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	fa93 f3a3 	rbit	r3, r3
 8002a8c:	61fb      	str	r3, [r7, #28]
  return result;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002a98:	2320      	movs	r3, #32
 8002a9a:	e003      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	2101      	movs	r1, #1
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	ea42 0103 	orr.w	r1, r2, r3
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10d      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x670>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	0e9b      	lsrs	r3, r3, #26
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	f003 021f 	and.w	r2, r3, #31
 8002acc:	4613      	mov	r3, r2
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3b1e      	subs	r3, #30
 8002ad4:	051b      	lsls	r3, r3, #20
 8002ad6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ada:	e01b      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x6a8>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	613b      	str	r3, [r7, #16]
  return result;
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002af4:	2320      	movs	r3, #32
 8002af6:	e003      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	fab3 f383 	clz	r3, r3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	3301      	adds	r3, #1
 8002b02:	f003 021f 	and.w	r2, r3, #31
 8002b06:	4613      	mov	r3, r2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3b1e      	subs	r3, #30
 8002b0e:	051b      	lsls	r3, r3, #20
 8002b10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b14:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	f7ff f8eb 	bl	8001cf6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <HAL_ADC_ConfigChannel+0x6e0>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 80be 	beq.w	8002caa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b36:	d004      	beq.n	8002b42 <HAL_ADC_ConfigChannel+0x6d6>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <HAL_ADC_ConfigChannel+0x6e4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d10a      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x6ec>
 8002b42:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <HAL_ADC_ConfigChannel+0x6e8>)
 8002b44:	e009      	b.n	8002b5a <HAL_ADC_ConfigChannel+0x6ee>
 8002b46:	bf00      	nop
 8002b48:	407f0000 	.word	0x407f0000
 8002b4c:	80080000 	.word	0x80080000
 8002b50:	50000100 	.word	0x50000100
 8002b54:	50000300 	.word	0x50000300
 8002b58:	4b59      	ldr	r3, [pc, #356]	; (8002cc0 <HAL_ADC_ConfigChannel+0x854>)
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe ffe0 	bl	8001b20 <LL_ADC_GetCommonPathInternalCh>
 8002b60:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a56      	ldr	r2, [pc, #344]	; (8002cc4 <HAL_ADC_ConfigChannel+0x858>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d004      	beq.n	8002b78 <HAL_ADC_ConfigChannel+0x70c>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a55      	ldr	r2, [pc, #340]	; (8002cc8 <HAL_ADC_ConfigChannel+0x85c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d13a      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d134      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b8c:	d005      	beq.n	8002b9a <HAL_ADC_ConfigChannel+0x72e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a4e      	ldr	r2, [pc, #312]	; (8002ccc <HAL_ADC_ConfigChannel+0x860>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	f040 8085 	bne.w	8002ca4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ba2:	d004      	beq.n	8002bae <HAL_ADC_ConfigChannel+0x742>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a49      	ldr	r2, [pc, #292]	; (8002cd0 <HAL_ADC_ConfigChannel+0x864>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x746>
 8002bae:	4a49      	ldr	r2, [pc, #292]	; (8002cd4 <HAL_ADC_ConfigChannel+0x868>)
 8002bb0:	e000      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x748>
 8002bb2:	4a43      	ldr	r2, [pc, #268]	; (8002cc0 <HAL_ADC_ConfigChannel+0x854>)
 8002bb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	f7fe ff9b 	bl	8001afa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bc4:	4b44      	ldr	r3, [pc, #272]	; (8002cd8 <HAL_ADC_ConfigChannel+0x86c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	099b      	lsrs	r3, r3, #6
 8002bca:	4a44      	ldr	r2, [pc, #272]	; (8002cdc <HAL_ADC_ConfigChannel+0x870>)
 8002bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd0:	099b      	lsrs	r3, r3, #6
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bde:	e002      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1f9      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bec:	e05a      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a3b      	ldr	r2, [pc, #236]	; (8002ce0 <HAL_ADC_ConfigChannel+0x874>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d125      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d11f      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a31      	ldr	r2, [pc, #196]	; (8002cd0 <HAL_ADC_ConfigChannel+0x864>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d104      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x7ac>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a34      	ldr	r2, [pc, #208]	; (8002ce4 <HAL_ADC_ConfigChannel+0x878>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d047      	beq.n	8002ca8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c20:	d004      	beq.n	8002c2c <HAL_ADC_ConfigChannel+0x7c0>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a2a      	ldr	r2, [pc, #168]	; (8002cd0 <HAL_ADC_ConfigChannel+0x864>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d101      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x7c4>
 8002c2c:	4a29      	ldr	r2, [pc, #164]	; (8002cd4 <HAL_ADC_ConfigChannel+0x868>)
 8002c2e:	e000      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x7c6>
 8002c30:	4a23      	ldr	r2, [pc, #140]	; (8002cc0 <HAL_ADC_ConfigChannel+0x854>)
 8002c32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	f7fe ff5c 	bl	8001afa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c42:	e031      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a27      	ldr	r2, [pc, #156]	; (8002ce8 <HAL_ADC_ConfigChannel+0x87c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d12d      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d127      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a1c      	ldr	r2, [pc, #112]	; (8002cd0 <HAL_ADC_ConfigChannel+0x864>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d022      	beq.n	8002caa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c6c:	d004      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x80c>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a17      	ldr	r2, [pc, #92]	; (8002cd0 <HAL_ADC_ConfigChannel+0x864>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d101      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x810>
 8002c78:	4a16      	ldr	r2, [pc, #88]	; (8002cd4 <HAL_ADC_ConfigChannel+0x868>)
 8002c7a:	e000      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x812>
 8002c7c:	4a10      	ldr	r2, [pc, #64]	; (8002cc0 <HAL_ADC_ConfigChannel+0x854>)
 8002c7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c86:	4619      	mov	r1, r3
 8002c88:	4610      	mov	r0, r2
 8002c8a:	f7fe ff36 	bl	8001afa <LL_ADC_SetCommonPathInternalCh>
 8002c8e:	e00c      	b.n	8002caa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c94:	f043 0220 	orr.w	r2, r3, #32
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002ca2:	e002      	b.n	8002caa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ca4:	bf00      	nop
 8002ca6:	e000      	b.n	8002caa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ca8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002cb2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	37d8      	adds	r7, #216	; 0xd8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	50000700 	.word	0x50000700
 8002cc4:	c3210000 	.word	0xc3210000
 8002cc8:	90c00010 	.word	0x90c00010
 8002ccc:	50000600 	.word	0x50000600
 8002cd0:	50000100 	.word	0x50000100
 8002cd4:	50000300 	.word	0x50000300
 8002cd8:	20000004 	.word	0x20000004
 8002cdc:	053e2d63 	.word	0x053e2d63
 8002ce0:	c7520000 	.word	0xc7520000
 8002ce4:	50000500 	.word	0x50000500
 8002ce8:	cb840000 	.word	0xcb840000

08002cec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff f8b9 	bl	8001e74 <LL_ADC_IsEnabled>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d176      	bne.n	8002df6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	4b3c      	ldr	r3, [pc, #240]	; (8002e00 <ADC_Enable+0x114>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00d      	beq.n	8002d32 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1a:	f043 0210 	orr.w	r2, r3, #16
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d26:	f043 0201 	orr.w	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e062      	b.n	8002df8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff f888 	bl	8001e4c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d44:	d004      	beq.n	8002d50 <ADC_Enable+0x64>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a2e      	ldr	r2, [pc, #184]	; (8002e04 <ADC_Enable+0x118>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d101      	bne.n	8002d54 <ADC_Enable+0x68>
 8002d50:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <ADC_Enable+0x11c>)
 8002d52:	e000      	b.n	8002d56 <ADC_Enable+0x6a>
 8002d54:	4b2d      	ldr	r3, [pc, #180]	; (8002e0c <ADC_Enable+0x120>)
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe fee2 	bl	8001b20 <LL_ADC_GetCommonPathInternalCh>
 8002d5c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002d5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d013      	beq.n	8002d8e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d66:	4b2a      	ldr	r3, [pc, #168]	; (8002e10 <ADC_Enable+0x124>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	099b      	lsrs	r3, r3, #6
 8002d6c:	4a29      	ldr	r2, [pc, #164]	; (8002e14 <ADC_Enable+0x128>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	099b      	lsrs	r3, r3, #6
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	4613      	mov	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d80:	e002      	b.n	8002d88 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	3b01      	subs	r3, #1
 8002d86:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f9      	bne.n	8002d82 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d8e:	f7fe fe95 	bl	8001abc <HAL_GetTick>
 8002d92:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d94:	e028      	b.n	8002de8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff f86a 	bl	8001e74 <LL_ADC_IsEnabled>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d104      	bne.n	8002db0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff f84e 	bl	8001e4c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002db0:	f7fe fe84 	bl	8001abc <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d914      	bls.n	8002de8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d00d      	beq.n	8002de8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd0:	f043 0210 	orr.w	r2, r3, #16
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ddc:	f043 0201 	orr.w	r2, r3, #1
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e007      	b.n	8002df8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d1cf      	bne.n	8002d96 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	8000003f 	.word	0x8000003f
 8002e04:	50000100 	.word	0x50000100
 8002e08:	50000300 	.word	0x50000300
 8002e0c:	50000700 	.word	0x50000700
 8002e10:	20000004 	.word	0x20000004
 8002e14:	053e2d63 	.word	0x053e2d63

08002e18 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d14b      	bne.n	8002eca <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d021      	beq.n	8002e90 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fe ff11 	bl	8001c78 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d032      	beq.n	8002ec2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d12b      	bne.n	8002ec2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d11f      	bne.n	8002ec2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e86:	f043 0201 	orr.w	r2, r3, #1
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e8e:	e018      	b.n	8002ec2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d111      	bne.n	8002ec2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d105      	bne.n	8002ec2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eba:	f043 0201 	orr.w	r2, r3, #1
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f7ff fab4 	bl	8002430 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ec8:	e00e      	b.n	8002ee8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f7ff fabe 	bl	8002458 <HAL_ADC_ErrorCallback>
}
 8002edc:	e004      	b.n	8002ee8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	4798      	blx	r3
}
 8002ee8:	bf00      	nop
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f7ff faa0 	bl	8002444 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f04:	bf00      	nop
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2a:	f043 0204 	orr.w	r2, r3, #4
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f7ff fa90 	bl	8002458 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f38:	bf00      	nop
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <LL_ADC_IsEnabled>:
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <LL_ADC_IsEnabled+0x18>
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <LL_ADC_IsEnabled+0x1a>
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <LL_ADC_REG_IsConversionOngoing>:
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d101      	bne.n	8002f7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002f8c:	b590      	push	{r4, r7, lr}
 8002f8e:	b0a1      	sub	sp, #132	; 0x84
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e0e7      	b.n	800317a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fc2:	d102      	bne.n	8002fca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002fc4:	4b6f      	ldr	r3, [pc, #444]	; (8003184 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	e009      	b.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a6e      	ldr	r2, [pc, #440]	; (8003188 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d102      	bne.n	8002fda <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002fd4:	4b6d      	ldr	r3, [pc, #436]	; (800318c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	e001      	b.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10b      	bne.n	8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe8:	f043 0220 	orr.w	r2, r3, #32
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0be      	b.n	800317a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff ffb1 	bl	8002f66 <LL_ADC_REG_IsConversionOngoing>
 8003004:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff ffab 	bl	8002f66 <LL_ADC_REG_IsConversionOngoing>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	f040 80a0 	bne.w	8003158 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800301a:	2b00      	cmp	r3, #0
 800301c:	f040 809c 	bne.w	8003158 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003028:	d004      	beq.n	8003034 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a55      	ldr	r2, [pc, #340]	; (8003184 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d101      	bne.n	8003038 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003034:	4b56      	ldr	r3, [pc, #344]	; (8003190 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003036:	e000      	b.n	800303a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003038:	4b56      	ldr	r3, [pc, #344]	; (8003194 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800303a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d04b      	beq.n	80030dc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003056:	035b      	lsls	r3, r3, #13
 8003058:	430b      	orrs	r3, r1
 800305a:	431a      	orrs	r2, r3
 800305c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800305e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003068:	d004      	beq.n	8003074 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a45      	ldr	r2, [pc, #276]	; (8003184 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d10f      	bne.n	8003094 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003074:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003078:	f7ff ff62 	bl	8002f40 <LL_ADC_IsEnabled>
 800307c:	4604      	mov	r4, r0
 800307e:	4841      	ldr	r0, [pc, #260]	; (8003184 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003080:	f7ff ff5e 	bl	8002f40 <LL_ADC_IsEnabled>
 8003084:	4603      	mov	r3, r0
 8003086:	4323      	orrs	r3, r4
 8003088:	2b00      	cmp	r3, #0
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	e012      	b.n	80030ba <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003094:	483c      	ldr	r0, [pc, #240]	; (8003188 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003096:	f7ff ff53 	bl	8002f40 <LL_ADC_IsEnabled>
 800309a:	4604      	mov	r4, r0
 800309c:	483b      	ldr	r0, [pc, #236]	; (800318c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800309e:	f7ff ff4f 	bl	8002f40 <LL_ADC_IsEnabled>
 80030a2:	4603      	mov	r3, r0
 80030a4:	431c      	orrs	r4, r3
 80030a6:	483c      	ldr	r0, [pc, #240]	; (8003198 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80030a8:	f7ff ff4a 	bl	8002f40 <LL_ADC_IsEnabled>
 80030ac:	4603      	mov	r3, r0
 80030ae:	4323      	orrs	r3, r4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d056      	beq.n	800316c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030c6:	f023 030f 	bic.w	r3, r3, #15
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	6811      	ldr	r1, [r2, #0]
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	6892      	ldr	r2, [r2, #8]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	431a      	orrs	r2, r3
 80030d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030d8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030da:	e047      	b.n	800316c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030e6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030f0:	d004      	beq.n	80030fc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a23      	ldr	r2, [pc, #140]	; (8003184 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d10f      	bne.n	800311c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80030fc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003100:	f7ff ff1e 	bl	8002f40 <LL_ADC_IsEnabled>
 8003104:	4604      	mov	r4, r0
 8003106:	481f      	ldr	r0, [pc, #124]	; (8003184 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003108:	f7ff ff1a 	bl	8002f40 <LL_ADC_IsEnabled>
 800310c:	4603      	mov	r3, r0
 800310e:	4323      	orrs	r3, r4
 8003110:	2b00      	cmp	r3, #0
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	e012      	b.n	8003142 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800311c:	481a      	ldr	r0, [pc, #104]	; (8003188 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800311e:	f7ff ff0f 	bl	8002f40 <LL_ADC_IsEnabled>
 8003122:	4604      	mov	r4, r0
 8003124:	4819      	ldr	r0, [pc, #100]	; (800318c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003126:	f7ff ff0b 	bl	8002f40 <LL_ADC_IsEnabled>
 800312a:	4603      	mov	r3, r0
 800312c:	431c      	orrs	r4, r3
 800312e:	481a      	ldr	r0, [pc, #104]	; (8003198 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003130:	f7ff ff06 	bl	8002f40 <LL_ADC_IsEnabled>
 8003134:	4603      	mov	r3, r0
 8003136:	4323      	orrs	r3, r4
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf0c      	ite	eq
 800313c:	2301      	moveq	r3, #1
 800313e:	2300      	movne	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d012      	beq.n	800316c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800314e:	f023 030f 	bic.w	r3, r3, #15
 8003152:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003154:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003156:	e009      	b.n	800316c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315c:	f043 0220 	orr.w	r2, r3, #32
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800316a:	e000      	b.n	800316e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800316c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003176:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800317a:	4618      	mov	r0, r3
 800317c:	3784      	adds	r7, #132	; 0x84
 800317e:	46bd      	mov	sp, r7
 8003180:	bd90      	pop	{r4, r7, pc}
 8003182:	bf00      	nop
 8003184:	50000100 	.word	0x50000100
 8003188:	50000400 	.word	0x50000400
 800318c:	50000500 	.word	0x50000500
 8003190:	50000300 	.word	0x50000300
 8003194:	50000700 	.word	0x50000700
 8003198:	50000600 	.word	0x50000600

0800319c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <__NVIC_SetPriorityGrouping+0x44>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031b8:	4013      	ands	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ce:	4a04      	ldr	r2, [pc, #16]	; (80031e0 <__NVIC_SetPriorityGrouping+0x44>)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	60d3      	str	r3, [r2, #12]
}
 80031d4:	bf00      	nop
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031e8:	4b04      	ldr	r3, [pc, #16]	; (80031fc <__NVIC_GetPriorityGrouping+0x18>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	0a1b      	lsrs	r3, r3, #8
 80031ee:	f003 0307 	and.w	r3, r3, #7
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800320a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320e:	2b00      	cmp	r3, #0
 8003210:	db0b      	blt.n	800322a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	f003 021f 	and.w	r2, r3, #31
 8003218:	4907      	ldr	r1, [pc, #28]	; (8003238 <__NVIC_EnableIRQ+0x38>)
 800321a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	2001      	movs	r0, #1
 8003222:	fa00 f202 	lsl.w	r2, r0, r2
 8003226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	e000e100 	.word	0xe000e100

0800323c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	6039      	str	r1, [r7, #0]
 8003246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324c:	2b00      	cmp	r3, #0
 800324e:	db0a      	blt.n	8003266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	b2da      	uxtb	r2, r3
 8003254:	490c      	ldr	r1, [pc, #48]	; (8003288 <__NVIC_SetPriority+0x4c>)
 8003256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325a:	0112      	lsls	r2, r2, #4
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	440b      	add	r3, r1
 8003260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003264:	e00a      	b.n	800327c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	b2da      	uxtb	r2, r3
 800326a:	4908      	ldr	r1, [pc, #32]	; (800328c <__NVIC_SetPriority+0x50>)
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	3b04      	subs	r3, #4
 8003274:	0112      	lsls	r2, r2, #4
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	440b      	add	r3, r1
 800327a:	761a      	strb	r2, [r3, #24]
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	e000e100 	.word	0xe000e100
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003290:	b480      	push	{r7}
 8003292:	b089      	sub	sp, #36	; 0x24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f1c3 0307 	rsb	r3, r3, #7
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	bf28      	it	cs
 80032ae:	2304      	movcs	r3, #4
 80032b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	3304      	adds	r3, #4
 80032b6:	2b06      	cmp	r3, #6
 80032b8:	d902      	bls.n	80032c0 <NVIC_EncodePriority+0x30>
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3b03      	subs	r3, #3
 80032be:	e000      	b.n	80032c2 <NVIC_EncodePriority+0x32>
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43da      	mvns	r2, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	401a      	ands	r2, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	fa01 f303 	lsl.w	r3, r1, r3
 80032e2:	43d9      	mvns	r1, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e8:	4313      	orrs	r3, r2
         );
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3724      	adds	r7, #36	; 0x24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3b01      	subs	r3, #1
 8003304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003308:	d301      	bcc.n	800330e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800330a:	2301      	movs	r3, #1
 800330c:	e00f      	b.n	800332e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800330e:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <SysTick_Config+0x40>)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3b01      	subs	r3, #1
 8003314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003316:	210f      	movs	r1, #15
 8003318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800331c:	f7ff ff8e 	bl	800323c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <SysTick_Config+0x40>)
 8003322:	2200      	movs	r2, #0
 8003324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003326:	4b04      	ldr	r3, [pc, #16]	; (8003338 <SysTick_Config+0x40>)
 8003328:	2207      	movs	r2, #7
 800332a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	e000e010 	.word	0xe000e010

0800333c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff ff29 	bl	800319c <__NVIC_SetPriorityGrouping>
}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b086      	sub	sp, #24
 8003356:	af00      	add	r7, sp, #0
 8003358:	4603      	mov	r3, r0
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
 800335e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003360:	f7ff ff40 	bl	80031e4 <__NVIC_GetPriorityGrouping>
 8003364:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	6978      	ldr	r0, [r7, #20]
 800336c:	f7ff ff90 	bl	8003290 <NVIC_EncodePriority>
 8003370:	4602      	mov	r2, r0
 8003372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ff5f 	bl	800323c <__NVIC_SetPriority>
}
 800337e:	bf00      	nop
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	4603      	mov	r3, r0
 800338e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff ff33 	bl	8003200 <__NVIC_EnableIRQ>
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7ff ffa4 	bl	80032f8 <SysTick_Config>
 80033b0:	4603      	mov	r3, r0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e08d      	b.n	80034ea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	4b47      	ldr	r3, [pc, #284]	; (80034f4 <HAL_DMA_Init+0x138>)
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d80f      	bhi.n	80033fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	4b45      	ldr	r3, [pc, #276]	; (80034f8 <HAL_DMA_Init+0x13c>)
 80033e2:	4413      	add	r3, r2
 80033e4:	4a45      	ldr	r2, [pc, #276]	; (80034fc <HAL_DMA_Init+0x140>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	091b      	lsrs	r3, r3, #4
 80033ec:	009a      	lsls	r2, r3, #2
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a42      	ldr	r2, [pc, #264]	; (8003500 <HAL_DMA_Init+0x144>)
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40
 80033f8:	e00e      	b.n	8003418 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	4b40      	ldr	r3, [pc, #256]	; (8003504 <HAL_DMA_Init+0x148>)
 8003402:	4413      	add	r3, r2
 8003404:	4a3d      	ldr	r2, [pc, #244]	; (80034fc <HAL_DMA_Init+0x140>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	091b      	lsrs	r3, r3, #4
 800340c:	009a      	lsls	r2, r3, #2
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a3c      	ldr	r2, [pc, #240]	; (8003508 <HAL_DMA_Init+0x14c>)
 8003416:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800342e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003432:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800343c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003448:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003454:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f9b6 	bl	80037dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003478:	d102      	bne.n	8003480 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003494:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d010      	beq.n	80034c0 <HAL_DMA_Init+0x104>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d80c      	bhi.n	80034c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f9d6 	bl	8003858 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80034bc:	605a      	str	r2, [r3, #4]
 80034be:	e008      	b.n	80034d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40020407 	.word	0x40020407
 80034f8:	bffdfff8 	.word	0xbffdfff8
 80034fc:	cccccccd 	.word	0xcccccccd
 8003500:	40020000 	.word	0x40020000
 8003504:	bffdfbf8 	.word	0xbffdfbf8
 8003508:	40020400 	.word	0x40020400

0800350c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_DMA_Start_IT+0x20>
 8003528:	2302      	movs	r3, #2
 800352a:	e066      	b.n	80035fa <HAL_DMA_Start_IT+0xee>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b01      	cmp	r3, #1
 800353e:	d155      	bne.n	80035ec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0201 	bic.w	r2, r2, #1
 800355c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	68b9      	ldr	r1, [r7, #8]
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f8fb 	bl	8003760 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	2b00      	cmp	r3, #0
 8003570:	d008      	beq.n	8003584 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 020e 	orr.w	r2, r2, #14
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	e00f      	b.n	80035a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0204 	bic.w	r2, r2, #4
 8003592:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 020a 	orr.w	r2, r2, #10
 80035a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d007      	beq.n	80035c2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035c0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d007      	beq.n	80035da <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0201 	orr.w	r2, r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	e005      	b.n	80035f8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80035f4:	2302      	movs	r3, #2
 80035f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80035f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3718      	adds	r7, #24
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	f003 031f 	and.w	r3, r3, #31
 8003622:	2204      	movs	r2, #4
 8003624:	409a      	lsls	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4013      	ands	r3, r2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d026      	beq.n	800367c <HAL_DMA_IRQHandler+0x7a>
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d021      	beq.n	800367c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d107      	bne.n	8003656 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0204 	bic.w	r2, r2, #4
 8003654:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	f003 021f 	and.w	r2, r3, #31
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	2104      	movs	r1, #4
 8003664:	fa01 f202 	lsl.w	r2, r1, r2
 8003668:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	2b00      	cmp	r3, #0
 8003670:	d071      	beq.n	8003756 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800367a:	e06c      	b.n	8003756 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003680:	f003 031f 	and.w	r3, r3, #31
 8003684:	2202      	movs	r2, #2
 8003686:	409a      	lsls	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d02e      	beq.n	80036ee <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d029      	beq.n	80036ee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10b      	bne.n	80036c0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 020a 	bic.w	r2, r2, #10
 80036b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c4:	f003 021f 	and.w	r2, r3, #31
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	2102      	movs	r1, #2
 80036ce:	fa01 f202 	lsl.w	r2, r1, r2
 80036d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d038      	beq.n	8003756 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80036ec:	e033      	b.n	8003756 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	f003 031f 	and.w	r3, r3, #31
 80036f6:	2208      	movs	r2, #8
 80036f8:	409a      	lsls	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d02a      	beq.n	8003758 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b00      	cmp	r3, #0
 800370a:	d025      	beq.n	8003758 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 020e 	bic.w	r2, r2, #14
 800371a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003720:	f003 021f 	and.w	r2, r3, #31
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	2101      	movs	r1, #1
 800372a:	fa01 f202 	lsl.w	r2, r1, r2
 800372e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374a:	2b00      	cmp	r3, #0
 800374c:	d004      	beq.n	8003758 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003756:	bf00      	nop
 8003758:	bf00      	nop
}
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003776:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377c:	2b00      	cmp	r3, #0
 800377e:	d004      	beq.n	800378a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003788:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	f003 021f 	and.w	r2, r3, #31
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	2101      	movs	r1, #1
 8003798:	fa01 f202 	lsl.w	r2, r1, r2
 800379c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	2b10      	cmp	r3, #16
 80037ac:	d108      	bne.n	80037c0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037be:	e007      	b.n	80037d0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	60da      	str	r2, [r3, #12]
}
 80037d0:	bf00      	nop
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	4b16      	ldr	r3, [pc, #88]	; (8003844 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d802      	bhi.n	80037f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80037f0:	4b15      	ldr	r3, [pc, #84]	; (8003848 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	e001      	b.n	80037fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80037f6:	4b15      	ldr	r3, [pc, #84]	; (800384c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80037f8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	3b08      	subs	r3, #8
 8003806:	4a12      	ldr	r2, [pc, #72]	; (8003850 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003808:	fba2 2303 	umull	r2, r3, r2, r3
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003814:	089b      	lsrs	r3, r3, #2
 8003816:	009a      	lsls	r2, r3, #2
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4413      	add	r3, r2
 800381c:	461a      	mov	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a0b      	ldr	r2, [pc, #44]	; (8003854 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003826:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	2201      	movs	r2, #1
 8003830:	409a      	lsls	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003836:	bf00      	nop
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40020407 	.word	0x40020407
 8003848:	40020800 	.word	0x40020800
 800384c:	40020820 	.word	0x40020820
 8003850:	cccccccd 	.word	0xcccccccd
 8003854:	40020880 	.word	0x40020880

08003858 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	461a      	mov	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a08      	ldr	r2, [pc, #32]	; (800389c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800387a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3b01      	subs	r3, #1
 8003880:	f003 031f 	and.w	r3, r3, #31
 8003884:	2201      	movs	r2, #1
 8003886:	409a      	lsls	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800388c:	bf00      	nop
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	1000823f 	.word	0x1000823f
 800389c:	40020940 	.word	0x40020940

080038a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80038ae:	e15a      	b.n	8003b66 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	2101      	movs	r1, #1
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	fa01 f303 	lsl.w	r3, r1, r3
 80038bc:	4013      	ands	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 814c 	beq.w	8003b60 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 0303 	and.w	r3, r3, #3
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d005      	beq.n	80038e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d130      	bne.n	8003942 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	2203      	movs	r2, #3
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003916:	2201      	movs	r2, #1
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	43db      	mvns	r3, r3
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4013      	ands	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	091b      	lsrs	r3, r3, #4
 800392c:	f003 0201 	and.w	r2, r3, #1
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	4313      	orrs	r3, r2
 800393a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	2b03      	cmp	r3, #3
 800394c:	d017      	beq.n	800397e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	2203      	movs	r2, #3
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4013      	ands	r3, r2
 8003964:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d123      	bne.n	80039d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	08da      	lsrs	r2, r3, #3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3208      	adds	r2, #8
 8003992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003996:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	220f      	movs	r2, #15
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43db      	mvns	r3, r3
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4013      	ands	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	08da      	lsrs	r2, r3, #3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3208      	adds	r2, #8
 80039cc:	6939      	ldr	r1, [r7, #16]
 80039ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	2203      	movs	r2, #3
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4013      	ands	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f003 0203 	and.w	r2, r3, #3
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 80a6 	beq.w	8003b60 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a14:	4b5b      	ldr	r3, [pc, #364]	; (8003b84 <HAL_GPIO_Init+0x2e4>)
 8003a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a18:	4a5a      	ldr	r2, [pc, #360]	; (8003b84 <HAL_GPIO_Init+0x2e4>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	6613      	str	r3, [r2, #96]	; 0x60
 8003a20:	4b58      	ldr	r3, [pc, #352]	; (8003b84 <HAL_GPIO_Init+0x2e4>)
 8003a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a2c:	4a56      	ldr	r2, [pc, #344]	; (8003b88 <HAL_GPIO_Init+0x2e8>)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	089b      	lsrs	r3, r3, #2
 8003a32:	3302      	adds	r3, #2
 8003a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f003 0303 	and.w	r3, r3, #3
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	220f      	movs	r2, #15
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a56:	d01f      	beq.n	8003a98 <HAL_GPIO_Init+0x1f8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a4c      	ldr	r2, [pc, #304]	; (8003b8c <HAL_GPIO_Init+0x2ec>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d019      	beq.n	8003a94 <HAL_GPIO_Init+0x1f4>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a4b      	ldr	r2, [pc, #300]	; (8003b90 <HAL_GPIO_Init+0x2f0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d013      	beq.n	8003a90 <HAL_GPIO_Init+0x1f0>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a4a      	ldr	r2, [pc, #296]	; (8003b94 <HAL_GPIO_Init+0x2f4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00d      	beq.n	8003a8c <HAL_GPIO_Init+0x1ec>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a49      	ldr	r2, [pc, #292]	; (8003b98 <HAL_GPIO_Init+0x2f8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d007      	beq.n	8003a88 <HAL_GPIO_Init+0x1e8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a48      	ldr	r2, [pc, #288]	; (8003b9c <HAL_GPIO_Init+0x2fc>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d101      	bne.n	8003a84 <HAL_GPIO_Init+0x1e4>
 8003a80:	2305      	movs	r3, #5
 8003a82:	e00a      	b.n	8003a9a <HAL_GPIO_Init+0x1fa>
 8003a84:	2306      	movs	r3, #6
 8003a86:	e008      	b.n	8003a9a <HAL_GPIO_Init+0x1fa>
 8003a88:	2304      	movs	r3, #4
 8003a8a:	e006      	b.n	8003a9a <HAL_GPIO_Init+0x1fa>
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e004      	b.n	8003a9a <HAL_GPIO_Init+0x1fa>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e002      	b.n	8003a9a <HAL_GPIO_Init+0x1fa>
 8003a94:	2301      	movs	r3, #1
 8003a96:	e000      	b.n	8003a9a <HAL_GPIO_Init+0x1fa>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	f002 0203 	and.w	r2, r2, #3
 8003aa0:	0092      	lsls	r2, r2, #2
 8003aa2:	4093      	lsls	r3, r2
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003aaa:	4937      	ldr	r1, [pc, #220]	; (8003b88 <HAL_GPIO_Init+0x2e8>)
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	089b      	lsrs	r3, r3, #2
 8003ab0:	3302      	adds	r3, #2
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ab8:	4b39      	ldr	r3, [pc, #228]	; (8003ba0 <HAL_GPIO_Init+0x300>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003adc:	4a30      	ldr	r2, [pc, #192]	; (8003ba0 <HAL_GPIO_Init+0x300>)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ae2:	4b2f      	ldr	r3, [pc, #188]	; (8003ba0 <HAL_GPIO_Init+0x300>)
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	43db      	mvns	r3, r3
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4013      	ands	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b06:	4a26      	ldr	r2, [pc, #152]	; (8003ba0 <HAL_GPIO_Init+0x300>)
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003b0c:	4b24      	ldr	r3, [pc, #144]	; (8003ba0 <HAL_GPIO_Init+0x300>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	43db      	mvns	r3, r3
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b30:	4a1b      	ldr	r2, [pc, #108]	; (8003ba0 <HAL_GPIO_Init+0x300>)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b36:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <HAL_GPIO_Init+0x300>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	4013      	ands	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b5a:	4a11      	ldr	r2, [pc, #68]	; (8003ba0 <HAL_GPIO_Init+0x300>)
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	3301      	adds	r3, #1
 8003b64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f47f ae9d 	bne.w	80038b0 <HAL_GPIO_Init+0x10>
  }
}
 8003b76:	bf00      	nop
 8003b78:	bf00      	nop
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	40021000 	.word	0x40021000
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	48000400 	.word	0x48000400
 8003b90:	48000800 	.word	0x48000800
 8003b94:	48000c00 	.word	0x48000c00
 8003b98:	48001000 	.word	0x48001000
 8003b9c:	48001400 	.word	0x48001400
 8003ba0:	40010400 	.word	0x40010400

08003ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	807b      	strh	r3, [r7, #2]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bb4:	787b      	ldrb	r3, [r7, #1]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bba:	887a      	ldrh	r2, [r7, #2]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bc0:	e002      	b.n	8003bc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bc2:	887a      	ldrh	r2, [r7, #2]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003be0:	695a      	ldr	r2, [r3, #20]
 8003be2:	88fb      	ldrh	r3, [r7, #6]
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d006      	beq.n	8003bf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bea:	4a05      	ldr	r2, [pc, #20]	; (8003c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bec:	88fb      	ldrh	r3, [r7, #6]
 8003bee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 f806 	bl	8003c04 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40010400 	.word	0x40010400

08003c04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d141      	bne.n	8003cae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c2a:	4b4b      	ldr	r3, [pc, #300]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c36:	d131      	bne.n	8003c9c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c38:	4b47      	ldr	r3, [pc, #284]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c3e:	4a46      	ldr	r2, [pc, #280]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c48:	4b43      	ldr	r3, [pc, #268]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c50:	4a41      	ldr	r2, [pc, #260]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c58:	4b40      	ldr	r3, [pc, #256]	; (8003d5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2232      	movs	r2, #50	; 0x32
 8003c5e:	fb02 f303 	mul.w	r3, r2, r3
 8003c62:	4a3f      	ldr	r2, [pc, #252]	; (8003d60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c64:	fba2 2303 	umull	r2, r3, r2, r3
 8003c68:	0c9b      	lsrs	r3, r3, #18
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c6e:	e002      	b.n	8003c76 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c76:	4b38      	ldr	r3, [pc, #224]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c82:	d102      	bne.n	8003c8a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f2      	bne.n	8003c70 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c8a:	4b33      	ldr	r3, [pc, #204]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c96:	d158      	bne.n	8003d4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e057      	b.n	8003d4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c9c:	4b2e      	ldr	r3, [pc, #184]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca2:	4a2d      	ldr	r2, [pc, #180]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003cac:	e04d      	b.n	8003d4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cb4:	d141      	bne.n	8003d3a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cb6:	4b28      	ldr	r3, [pc, #160]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc2:	d131      	bne.n	8003d28 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cc4:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cca:	4a23      	ldr	r2, [pc, #140]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cd4:	4b20      	ldr	r3, [pc, #128]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cdc:	4a1e      	ldr	r2, [pc, #120]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ce2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ce4:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2232      	movs	r2, #50	; 0x32
 8003cea:	fb02 f303 	mul.w	r3, r2, r3
 8003cee:	4a1c      	ldr	r2, [pc, #112]	; (8003d60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf4:	0c9b      	lsrs	r3, r3, #18
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cfa:	e002      	b.n	8003d02 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d02:	4b15      	ldr	r3, [pc, #84]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0e:	d102      	bne.n	8003d16 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f2      	bne.n	8003cfc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d16:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d22:	d112      	bne.n	8003d4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e011      	b.n	8003d4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d38:	e007      	b.n	8003d4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d3a:	4b07      	ldr	r3, [pc, #28]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d42:	4a05      	ldr	r2, [pc, #20]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d48:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	40007000 	.word	0x40007000
 8003d5c:	20000004 	.word	0x20000004
 8003d60:	431bde83 	.word	0x431bde83

08003d64 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	4a04      	ldr	r2, [pc, #16]	; (8003d80 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d72:	6093      	str	r3, [r2, #8]
}
 8003d74:	bf00      	nop
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40007000 	.word	0x40007000

08003d84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e2fe      	b.n	8004394 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d075      	beq.n	8003e8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003da2:	4b97      	ldr	r3, [pc, #604]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 030c 	and.w	r3, r3, #12
 8003daa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dac:	4b94      	ldr	r3, [pc, #592]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	2b0c      	cmp	r3, #12
 8003dba:	d102      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x3e>
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d002      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x44>
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d10b      	bne.n	8003de0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc8:	4b8d      	ldr	r3, [pc, #564]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d05b      	beq.n	8003e8c <HAL_RCC_OscConfig+0x108>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d157      	bne.n	8003e8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e2d9      	b.n	8004394 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de8:	d106      	bne.n	8003df8 <HAL_RCC_OscConfig+0x74>
 8003dea:	4b85      	ldr	r3, [pc, #532]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a84      	ldr	r2, [pc, #528]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	e01d      	b.n	8003e34 <HAL_RCC_OscConfig+0xb0>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e00:	d10c      	bne.n	8003e1c <HAL_RCC_OscConfig+0x98>
 8003e02:	4b7f      	ldr	r3, [pc, #508]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a7e      	ldr	r2, [pc, #504]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	4b7c      	ldr	r3, [pc, #496]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a7b      	ldr	r2, [pc, #492]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	e00b      	b.n	8003e34 <HAL_RCC_OscConfig+0xb0>
 8003e1c:	4b78      	ldr	r3, [pc, #480]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a77      	ldr	r2, [pc, #476]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e26:	6013      	str	r3, [r2, #0]
 8003e28:	4b75      	ldr	r3, [pc, #468]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a74      	ldr	r2, [pc, #464]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d013      	beq.n	8003e64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fd fe3e 	bl	8001abc <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e44:	f7fd fe3a 	bl	8001abc <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b64      	cmp	r3, #100	; 0x64
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e29e      	b.n	8004394 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e56:	4b6a      	ldr	r3, [pc, #424]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0xc0>
 8003e62:	e014      	b.n	8003e8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e64:	f7fd fe2a 	bl	8001abc <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e6c:	f7fd fe26 	bl	8001abc <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b64      	cmp	r3, #100	; 0x64
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e28a      	b.n	8004394 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e7e:	4b60      	ldr	r3, [pc, #384]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f0      	bne.n	8003e6c <HAL_RCC_OscConfig+0xe8>
 8003e8a:	e000      	b.n	8003e8e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d075      	beq.n	8003f86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e9a:	4b59      	ldr	r3, [pc, #356]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 030c 	and.w	r3, r3, #12
 8003ea2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ea4:	4b56      	ldr	r3, [pc, #344]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	2b0c      	cmp	r3, #12
 8003eb2:	d102      	bne.n	8003eba <HAL_RCC_OscConfig+0x136>
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d002      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x13c>
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d11f      	bne.n	8003f00 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ec0:	4b4f      	ldr	r3, [pc, #316]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x154>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e25d      	b.n	8004394 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed8:	4b49      	ldr	r3, [pc, #292]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	061b      	lsls	r3, r3, #24
 8003ee6:	4946      	ldr	r1, [pc, #280]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003eec:	4b45      	ldr	r3, [pc, #276]	; (8004004 <HAL_RCC_OscConfig+0x280>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fd fd97 	bl	8001a24 <HAL_InitTick>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d043      	beq.n	8003f84 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e249      	b.n	8004394 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d023      	beq.n	8003f50 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f08:	4b3d      	ldr	r3, [pc, #244]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a3c      	ldr	r2, [pc, #240]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7fd fdd2 	bl	8001abc <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f1c:	f7fd fdce 	bl	8001abc <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e232      	b.n	8004394 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f2e:	4b34      	ldr	r3, [pc, #208]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f3a:	4b31      	ldr	r3, [pc, #196]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	061b      	lsls	r3, r3, #24
 8003f48:	492d      	ldr	r1, [pc, #180]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	604b      	str	r3, [r1, #4]
 8003f4e:	e01a      	b.n	8003f86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f50:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a2a      	ldr	r2, [pc, #168]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003f56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7fd fdae 	bl	8001abc <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f64:	f7fd fdaa 	bl	8001abc <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e20e      	b.n	8004394 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f76:	4b22      	ldr	r3, [pc, #136]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f0      	bne.n	8003f64 <HAL_RCC_OscConfig+0x1e0>
 8003f82:	e000      	b.n	8003f86 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d041      	beq.n	8004016 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d01c      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f9a:	4b19      	ldr	r3, [pc, #100]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fa0:	4a17      	ldr	r2, [pc, #92]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003faa:	f7fd fd87 	bl	8001abc <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fb2:	f7fd fd83 	bl	8001abc <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e1e7      	b.n	8004394 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fc4:	4b0e      	ldr	r3, [pc, #56]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0ef      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x22e>
 8003fd2:	e020      	b.n	8004016 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd4:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fda:	4a09      	ldr	r2, [pc, #36]	; (8004000 <HAL_RCC_OscConfig+0x27c>)
 8003fdc:	f023 0301 	bic.w	r3, r3, #1
 8003fe0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe4:	f7fd fd6a 	bl	8001abc <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fea:	e00d      	b.n	8004008 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fec:	f7fd fd66 	bl	8001abc <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d906      	bls.n	8004008 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e1ca      	b.n	8004394 <HAL_RCC_OscConfig+0x610>
 8003ffe:	bf00      	nop
 8004000:	40021000 	.word	0x40021000
 8004004:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004008:	4b8c      	ldr	r3, [pc, #560]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 800400a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1ea      	bne.n	8003fec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0304 	and.w	r3, r3, #4
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 80a6 	beq.w	8004170 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004024:	2300      	movs	r3, #0
 8004026:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004028:	4b84      	ldr	r3, [pc, #528]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 800402a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_RCC_OscConfig+0x2b4>
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <HAL_RCC_OscConfig+0x2b6>
 8004038:	2300      	movs	r3, #0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00d      	beq.n	800405a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800403e:	4b7f      	ldr	r3, [pc, #508]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 8004040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004042:	4a7e      	ldr	r2, [pc, #504]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 8004044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004048:	6593      	str	r3, [r2, #88]	; 0x58
 800404a:	4b7c      	ldr	r3, [pc, #496]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 800404c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004056:	2301      	movs	r3, #1
 8004058:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800405a:	4b79      	ldr	r3, [pc, #484]	; (8004240 <HAL_RCC_OscConfig+0x4bc>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d118      	bne.n	8004098 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004066:	4b76      	ldr	r3, [pc, #472]	; (8004240 <HAL_RCC_OscConfig+0x4bc>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a75      	ldr	r2, [pc, #468]	; (8004240 <HAL_RCC_OscConfig+0x4bc>)
 800406c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004072:	f7fd fd23 	bl	8001abc <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407a:	f7fd fd1f 	bl	8001abc <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e183      	b.n	8004394 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800408c:	4b6c      	ldr	r3, [pc, #432]	; (8004240 <HAL_RCC_OscConfig+0x4bc>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0f0      	beq.n	800407a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d108      	bne.n	80040b2 <HAL_RCC_OscConfig+0x32e>
 80040a0:	4b66      	ldr	r3, [pc, #408]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a6:	4a65      	ldr	r2, [pc, #404]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040b0:	e024      	b.n	80040fc <HAL_RCC_OscConfig+0x378>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b05      	cmp	r3, #5
 80040b8:	d110      	bne.n	80040dc <HAL_RCC_OscConfig+0x358>
 80040ba:	4b60      	ldr	r3, [pc, #384]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 80040bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c0:	4a5e      	ldr	r2, [pc, #376]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 80040c2:	f043 0304 	orr.w	r3, r3, #4
 80040c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040ca:	4b5c      	ldr	r3, [pc, #368]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 80040cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d0:	4a5a      	ldr	r2, [pc, #360]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040da:	e00f      	b.n	80040fc <HAL_RCC_OscConfig+0x378>
 80040dc:	4b57      	ldr	r3, [pc, #348]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e2:	4a56      	ldr	r2, [pc, #344]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 80040e4:	f023 0301 	bic.w	r3, r3, #1
 80040e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040ec:	4b53      	ldr	r3, [pc, #332]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 80040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f2:	4a52      	ldr	r2, [pc, #328]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 80040f4:	f023 0304 	bic.w	r3, r3, #4
 80040f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d016      	beq.n	8004132 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004104:	f7fd fcda 	bl	8001abc <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800410a:	e00a      	b.n	8004122 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800410c:	f7fd fcd6 	bl	8001abc <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	f241 3288 	movw	r2, #5000	; 0x1388
 800411a:	4293      	cmp	r3, r2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e138      	b.n	8004394 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004122:	4b46      	ldr	r3, [pc, #280]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 8004124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0ed      	beq.n	800410c <HAL_RCC_OscConfig+0x388>
 8004130:	e015      	b.n	800415e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004132:	f7fd fcc3 	bl	8001abc <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004138:	e00a      	b.n	8004150 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413a:	f7fd fcbf 	bl	8001abc <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	f241 3288 	movw	r2, #5000	; 0x1388
 8004148:	4293      	cmp	r3, r2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e121      	b.n	8004394 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004150:	4b3a      	ldr	r3, [pc, #232]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 8004152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1ed      	bne.n	800413a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800415e:	7ffb      	ldrb	r3, [r7, #31]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d105      	bne.n	8004170 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004164:	4b35      	ldr	r3, [pc, #212]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 8004166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004168:	4a34      	ldr	r2, [pc, #208]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 800416a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800416e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	d03c      	beq.n	80041f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d01c      	beq.n	80041be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004184:	4b2d      	ldr	r3, [pc, #180]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 8004186:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800418a:	4a2c      	ldr	r2, [pc, #176]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004194:	f7fd fc92 	bl	8001abc <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800419c:	f7fd fc8e 	bl	8001abc <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e0f2      	b.n	8004394 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041ae:	4b23      	ldr	r3, [pc, #140]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 80041b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0ef      	beq.n	800419c <HAL_RCC_OscConfig+0x418>
 80041bc:	e01b      	b.n	80041f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041be:	4b1f      	ldr	r3, [pc, #124]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 80041c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041c4:	4a1d      	ldr	r2, [pc, #116]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 80041c6:	f023 0301 	bic.w	r3, r3, #1
 80041ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ce:	f7fd fc75 	bl	8001abc <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041d6:	f7fd fc71 	bl	8001abc <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e0d5      	b.n	8004394 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041e8:	4b14      	ldr	r3, [pc, #80]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 80041ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1ef      	bne.n	80041d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 80c9 	beq.w	8004392 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004200:	4b0e      	ldr	r3, [pc, #56]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f003 030c 	and.w	r3, r3, #12
 8004208:	2b0c      	cmp	r3, #12
 800420a:	f000 8083 	beq.w	8004314 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d15e      	bne.n	80042d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004216:	4b09      	ldr	r3, [pc, #36]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a08      	ldr	r2, [pc, #32]	; (800423c <HAL_RCC_OscConfig+0x4b8>)
 800421c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004222:	f7fd fc4b 	bl	8001abc <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004228:	e00c      	b.n	8004244 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800422a:	f7fd fc47 	bl	8001abc <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d905      	bls.n	8004244 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e0ab      	b.n	8004394 <HAL_RCC_OscConfig+0x610>
 800423c:	40021000 	.word	0x40021000
 8004240:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004244:	4b55      	ldr	r3, [pc, #340]	; (800439c <HAL_RCC_OscConfig+0x618>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1ec      	bne.n	800422a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004250:	4b52      	ldr	r3, [pc, #328]	; (800439c <HAL_RCC_OscConfig+0x618>)
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	4b52      	ldr	r3, [pc, #328]	; (80043a0 <HAL_RCC_OscConfig+0x61c>)
 8004256:	4013      	ands	r3, r2
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6a11      	ldr	r1, [r2, #32]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004260:	3a01      	subs	r2, #1
 8004262:	0112      	lsls	r2, r2, #4
 8004264:	4311      	orrs	r1, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800426a:	0212      	lsls	r2, r2, #8
 800426c:	4311      	orrs	r1, r2
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004272:	0852      	lsrs	r2, r2, #1
 8004274:	3a01      	subs	r2, #1
 8004276:	0552      	lsls	r2, r2, #21
 8004278:	4311      	orrs	r1, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800427e:	0852      	lsrs	r2, r2, #1
 8004280:	3a01      	subs	r2, #1
 8004282:	0652      	lsls	r2, r2, #25
 8004284:	4311      	orrs	r1, r2
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800428a:	06d2      	lsls	r2, r2, #27
 800428c:	430a      	orrs	r2, r1
 800428e:	4943      	ldr	r1, [pc, #268]	; (800439c <HAL_RCC_OscConfig+0x618>)
 8004290:	4313      	orrs	r3, r2
 8004292:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004294:	4b41      	ldr	r3, [pc, #260]	; (800439c <HAL_RCC_OscConfig+0x618>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a40      	ldr	r2, [pc, #256]	; (800439c <HAL_RCC_OscConfig+0x618>)
 800429a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800429e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042a0:	4b3e      	ldr	r3, [pc, #248]	; (800439c <HAL_RCC_OscConfig+0x618>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	4a3d      	ldr	r2, [pc, #244]	; (800439c <HAL_RCC_OscConfig+0x618>)
 80042a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fd fc06 	bl	8001abc <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b4:	f7fd fc02 	bl	8001abc <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e066      	b.n	8004394 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042c6:	4b35      	ldr	r3, [pc, #212]	; (800439c <HAL_RCC_OscConfig+0x618>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0f0      	beq.n	80042b4 <HAL_RCC_OscConfig+0x530>
 80042d2:	e05e      	b.n	8004392 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d4:	4b31      	ldr	r3, [pc, #196]	; (800439c <HAL_RCC_OscConfig+0x618>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a30      	ldr	r2, [pc, #192]	; (800439c <HAL_RCC_OscConfig+0x618>)
 80042da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e0:	f7fd fbec 	bl	8001abc <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e8:	f7fd fbe8 	bl	8001abc <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e04c      	b.n	8004394 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042fa:	4b28      	ldr	r3, [pc, #160]	; (800439c <HAL_RCC_OscConfig+0x618>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004306:	4b25      	ldr	r3, [pc, #148]	; (800439c <HAL_RCC_OscConfig+0x618>)
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	4924      	ldr	r1, [pc, #144]	; (800439c <HAL_RCC_OscConfig+0x618>)
 800430c:	4b25      	ldr	r3, [pc, #148]	; (80043a4 <HAL_RCC_OscConfig+0x620>)
 800430e:	4013      	ands	r3, r2
 8004310:	60cb      	str	r3, [r1, #12]
 8004312:	e03e      	b.n	8004392 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e039      	b.n	8004394 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004320:	4b1e      	ldr	r3, [pc, #120]	; (800439c <HAL_RCC_OscConfig+0x618>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f003 0203 	and.w	r2, r3, #3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	429a      	cmp	r2, r3
 8004332:	d12c      	bne.n	800438e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	3b01      	subs	r3, #1
 8004340:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004342:	429a      	cmp	r2, r3
 8004344:	d123      	bne.n	800438e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004350:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004352:	429a      	cmp	r2, r3
 8004354:	d11b      	bne.n	800438e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004362:	429a      	cmp	r2, r3
 8004364:	d113      	bne.n	800438e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	085b      	lsrs	r3, r3, #1
 8004372:	3b01      	subs	r3, #1
 8004374:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004376:	429a      	cmp	r2, r3
 8004378:	d109      	bne.n	800438e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004384:	085b      	lsrs	r3, r3, #1
 8004386:	3b01      	subs	r3, #1
 8004388:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800438a:	429a      	cmp	r2, r3
 800438c:	d001      	beq.n	8004392 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3720      	adds	r7, #32
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40021000 	.word	0x40021000
 80043a0:	019f800c 	.word	0x019f800c
 80043a4:	feeefffc 	.word	0xfeeefffc

080043a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e11e      	b.n	80045fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043c0:	4b91      	ldr	r3, [pc, #580]	; (8004608 <HAL_RCC_ClockConfig+0x260>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 030f 	and.w	r3, r3, #15
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d910      	bls.n	80043f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ce:	4b8e      	ldr	r3, [pc, #568]	; (8004608 <HAL_RCC_ClockConfig+0x260>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f023 020f 	bic.w	r2, r3, #15
 80043d6:	498c      	ldr	r1, [pc, #560]	; (8004608 <HAL_RCC_ClockConfig+0x260>)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	4313      	orrs	r3, r2
 80043dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043de:	4b8a      	ldr	r3, [pc, #552]	; (8004608 <HAL_RCC_ClockConfig+0x260>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d001      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e106      	b.n	80045fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d073      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b03      	cmp	r3, #3
 8004402:	d129      	bne.n	8004458 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004404:	4b81      	ldr	r3, [pc, #516]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0f4      	b.n	80045fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004414:	f000 f99e 	bl	8004754 <RCC_GetSysClockFreqFromPLLSource>
 8004418:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	4a7c      	ldr	r2, [pc, #496]	; (8004610 <HAL_RCC_ClockConfig+0x268>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d93f      	bls.n	80044a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004422:	4b7a      	ldr	r3, [pc, #488]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d009      	beq.n	8004442 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004436:	2b00      	cmp	r3, #0
 8004438:	d033      	beq.n	80044a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800443e:	2b00      	cmp	r3, #0
 8004440:	d12f      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004442:	4b72      	ldr	r3, [pc, #456]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800444a:	4a70      	ldr	r2, [pc, #448]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 800444c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004450:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004452:	2380      	movs	r3, #128	; 0x80
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	e024      	b.n	80044a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d107      	bne.n	8004470 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004460:	4b6a      	ldr	r3, [pc, #424]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d109      	bne.n	8004480 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0c6      	b.n	80045fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004470:	4b66      	ldr	r3, [pc, #408]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e0be      	b.n	80045fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004480:	f000 f8ce 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 8004484:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4a61      	ldr	r2, [pc, #388]	; (8004610 <HAL_RCC_ClockConfig+0x268>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d909      	bls.n	80044a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800448e:	4b5f      	ldr	r3, [pc, #380]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004496:	4a5d      	ldr	r2, [pc, #372]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 8004498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800449c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800449e:	2380      	movs	r3, #128	; 0x80
 80044a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044a2:	4b5a      	ldr	r3, [pc, #360]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f023 0203 	bic.w	r2, r3, #3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	4957      	ldr	r1, [pc, #348]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b4:	f7fd fb02 	bl	8001abc <HAL_GetTick>
 80044b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ba:	e00a      	b.n	80044d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044bc:	f7fd fafe 	bl	8001abc <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e095      	b.n	80045fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d2:	4b4e      	ldr	r3, [pc, #312]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 020c 	and.w	r2, r3, #12
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d1eb      	bne.n	80044bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d023      	beq.n	8004538 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044fc:	4b43      	ldr	r3, [pc, #268]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	4a42      	ldr	r2, [pc, #264]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 8004502:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004506:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d007      	beq.n	8004524 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004514:	4b3d      	ldr	r3, [pc, #244]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800451c:	4a3b      	ldr	r2, [pc, #236]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 800451e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004522:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004524:	4b39      	ldr	r3, [pc, #228]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	4936      	ldr	r1, [pc, #216]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 8004532:	4313      	orrs	r3, r2
 8004534:	608b      	str	r3, [r1, #8]
 8004536:	e008      	b.n	800454a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	2b80      	cmp	r3, #128	; 0x80
 800453c:	d105      	bne.n	800454a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800453e:	4b33      	ldr	r3, [pc, #204]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	4a32      	ldr	r2, [pc, #200]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 8004544:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004548:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800454a:	4b2f      	ldr	r3, [pc, #188]	; (8004608 <HAL_RCC_ClockConfig+0x260>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d21d      	bcs.n	8004594 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004558:	4b2b      	ldr	r3, [pc, #172]	; (8004608 <HAL_RCC_ClockConfig+0x260>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f023 020f 	bic.w	r2, r3, #15
 8004560:	4929      	ldr	r1, [pc, #164]	; (8004608 <HAL_RCC_ClockConfig+0x260>)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	4313      	orrs	r3, r2
 8004566:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004568:	f7fd faa8 	bl	8001abc <HAL_GetTick>
 800456c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800456e:	e00a      	b.n	8004586 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004570:	f7fd faa4 	bl	8001abc <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	f241 3288 	movw	r2, #5000	; 0x1388
 800457e:	4293      	cmp	r3, r2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e03b      	b.n	80045fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004586:	4b20      	ldr	r3, [pc, #128]	; (8004608 <HAL_RCC_ClockConfig+0x260>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d1ed      	bne.n	8004570 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d008      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a0:	4b1a      	ldr	r3, [pc, #104]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4917      	ldr	r1, [pc, #92]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d009      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045be:	4b13      	ldr	r3, [pc, #76]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	490f      	ldr	r1, [pc, #60]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045d2:	f000 f825 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 80045d6:	4602      	mov	r2, r0
 80045d8:	4b0c      	ldr	r3, [pc, #48]	; (800460c <HAL_RCC_ClockConfig+0x264>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	091b      	lsrs	r3, r3, #4
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	490c      	ldr	r1, [pc, #48]	; (8004614 <HAL_RCC_ClockConfig+0x26c>)
 80045e4:	5ccb      	ldrb	r3, [r1, r3]
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	fa22 f303 	lsr.w	r3, r2, r3
 80045ee:	4a0a      	ldr	r2, [pc, #40]	; (8004618 <HAL_RCC_ClockConfig+0x270>)
 80045f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80045f2:	4b0a      	ldr	r3, [pc, #40]	; (800461c <HAL_RCC_ClockConfig+0x274>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fd fa14 	bl	8001a24 <HAL_InitTick>
 80045fc:	4603      	mov	r3, r0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40022000 	.word	0x40022000
 800460c:	40021000 	.word	0x40021000
 8004610:	04c4b400 	.word	0x04c4b400
 8004614:	0800716c 	.word	0x0800716c
 8004618:	20000004 	.word	0x20000004
 800461c:	20000008 	.word	0x20000008

08004620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004626:	4b2c      	ldr	r3, [pc, #176]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 030c 	and.w	r3, r3, #12
 800462e:	2b04      	cmp	r3, #4
 8004630:	d102      	bne.n	8004638 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004632:	4b2a      	ldr	r3, [pc, #168]	; (80046dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004634:	613b      	str	r3, [r7, #16]
 8004636:	e047      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004638:	4b27      	ldr	r3, [pc, #156]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 030c 	and.w	r3, r3, #12
 8004640:	2b08      	cmp	r3, #8
 8004642:	d102      	bne.n	800464a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004644:	4b26      	ldr	r3, [pc, #152]	; (80046e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	e03e      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800464a:	4b23      	ldr	r3, [pc, #140]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	2b0c      	cmp	r3, #12
 8004654:	d136      	bne.n	80046c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004656:	4b20      	ldr	r3, [pc, #128]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004660:	4b1d      	ldr	r3, [pc, #116]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	091b      	lsrs	r3, r3, #4
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	3301      	adds	r3, #1
 800466c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2b03      	cmp	r3, #3
 8004672:	d10c      	bne.n	800468e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004674:	4a1a      	ldr	r2, [pc, #104]	; (80046e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	fbb2 f3f3 	udiv	r3, r2, r3
 800467c:	4a16      	ldr	r2, [pc, #88]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800467e:	68d2      	ldr	r2, [r2, #12]
 8004680:	0a12      	lsrs	r2, r2, #8
 8004682:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004686:	fb02 f303 	mul.w	r3, r2, r3
 800468a:	617b      	str	r3, [r7, #20]
      break;
 800468c:	e00c      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800468e:	4a13      	ldr	r2, [pc, #76]	; (80046dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	fbb2 f3f3 	udiv	r3, r2, r3
 8004696:	4a10      	ldr	r2, [pc, #64]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004698:	68d2      	ldr	r2, [r2, #12]
 800469a:	0a12      	lsrs	r2, r2, #8
 800469c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046a0:	fb02 f303 	mul.w	r3, r2, r3
 80046a4:	617b      	str	r3, [r7, #20]
      break;
 80046a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046a8:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	0e5b      	lsrs	r3, r3, #25
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	3301      	adds	r3, #1
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	e001      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80046c8:	693b      	ldr	r3, [r7, #16]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40021000 	.word	0x40021000
 80046dc:	00f42400 	.word	0x00f42400
 80046e0:	016e3600 	.word	0x016e3600

080046e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046e8:	4b03      	ldr	r3, [pc, #12]	; (80046f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046ea:	681b      	ldr	r3, [r3, #0]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	20000004 	.word	0x20000004

080046fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004700:	f7ff fff0 	bl	80046e4 <HAL_RCC_GetHCLKFreq>
 8004704:	4602      	mov	r2, r0
 8004706:	4b06      	ldr	r3, [pc, #24]	; (8004720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	0a1b      	lsrs	r3, r3, #8
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	4904      	ldr	r1, [pc, #16]	; (8004724 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004712:	5ccb      	ldrb	r3, [r1, r3]
 8004714:	f003 031f 	and.w	r3, r3, #31
 8004718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800471c:	4618      	mov	r0, r3
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40021000 	.word	0x40021000
 8004724:	0800717c 	.word	0x0800717c

08004728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800472c:	f7ff ffda 	bl	80046e4 <HAL_RCC_GetHCLKFreq>
 8004730:	4602      	mov	r2, r0
 8004732:	4b06      	ldr	r3, [pc, #24]	; (800474c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	0adb      	lsrs	r3, r3, #11
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	4904      	ldr	r1, [pc, #16]	; (8004750 <HAL_RCC_GetPCLK2Freq+0x28>)
 800473e:	5ccb      	ldrb	r3, [r1, r3]
 8004740:	f003 031f 	and.w	r3, r3, #31
 8004744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004748:	4618      	mov	r0, r3
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40021000 	.word	0x40021000
 8004750:	0800717c 	.word	0x0800717c

08004754 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800475a:	4b1e      	ldr	r3, [pc, #120]	; (80047d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004764:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	091b      	lsrs	r3, r3, #4
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	3301      	adds	r3, #1
 8004770:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	2b03      	cmp	r3, #3
 8004776:	d10c      	bne.n	8004792 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004778:	4a17      	ldr	r2, [pc, #92]	; (80047d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004780:	4a14      	ldr	r2, [pc, #80]	; (80047d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004782:	68d2      	ldr	r2, [r2, #12]
 8004784:	0a12      	lsrs	r2, r2, #8
 8004786:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800478a:	fb02 f303 	mul.w	r3, r2, r3
 800478e:	617b      	str	r3, [r7, #20]
    break;
 8004790:	e00c      	b.n	80047ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004792:	4a12      	ldr	r2, [pc, #72]	; (80047dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	fbb2 f3f3 	udiv	r3, r2, r3
 800479a:	4a0e      	ldr	r2, [pc, #56]	; (80047d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800479c:	68d2      	ldr	r2, [r2, #12]
 800479e:	0a12      	lsrs	r2, r2, #8
 80047a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047a4:	fb02 f303 	mul.w	r3, r2, r3
 80047a8:	617b      	str	r3, [r7, #20]
    break;
 80047aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047ac:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	0e5b      	lsrs	r3, r3, #25
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	3301      	adds	r3, #1
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80047c6:	687b      	ldr	r3, [r7, #4]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	371c      	adds	r7, #28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	40021000 	.word	0x40021000
 80047d8:	016e3600 	.word	0x016e3600
 80047dc:	00f42400 	.word	0x00f42400

080047e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047e8:	2300      	movs	r3, #0
 80047ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047ec:	2300      	movs	r3, #0
 80047ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 8098 	beq.w	800492e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047fe:	2300      	movs	r3, #0
 8004800:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004802:	4b43      	ldr	r3, [pc, #268]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10d      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800480e:	4b40      	ldr	r3, [pc, #256]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004812:	4a3f      	ldr	r2, [pc, #252]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004818:	6593      	str	r3, [r2, #88]	; 0x58
 800481a:	4b3d      	ldr	r3, [pc, #244]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800481c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004822:	60bb      	str	r3, [r7, #8]
 8004824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004826:	2301      	movs	r3, #1
 8004828:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800482a:	4b3a      	ldr	r3, [pc, #232]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a39      	ldr	r2, [pc, #228]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004834:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004836:	f7fd f941 	bl	8001abc <HAL_GetTick>
 800483a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800483c:	e009      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800483e:	f7fd f93d 	bl	8001abc <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d902      	bls.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	74fb      	strb	r3, [r7, #19]
        break;
 8004850:	e005      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004852:	4b30      	ldr	r3, [pc, #192]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0ef      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800485e:	7cfb      	ldrb	r3, [r7, #19]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d159      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004864:	4b2a      	ldr	r3, [pc, #168]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800486e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d01e      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	429a      	cmp	r2, r3
 800487e:	d019      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004880:	4b23      	ldr	r3, [pc, #140]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800488a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800488c:	4b20      	ldr	r3, [pc, #128]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800488e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004892:	4a1f      	ldr	r2, [pc, #124]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800489c:	4b1c      	ldr	r3, [pc, #112]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a2:	4a1b      	ldr	r2, [pc, #108]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048ac:	4a18      	ldr	r2, [pc, #96]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d016      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048be:	f7fd f8fd 	bl	8001abc <HAL_GetTick>
 80048c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048c4:	e00b      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c6:	f7fd f8f9 	bl	8001abc <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d902      	bls.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	74fb      	strb	r3, [r7, #19]
            break;
 80048dc:	e006      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048de:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0ec      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80048ec:	7cfb      	ldrb	r3, [r7, #19]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10b      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048f2:	4b07      	ldr	r3, [pc, #28]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004900:	4903      	ldr	r1, [pc, #12]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004908:	e008      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800490a:	7cfb      	ldrb	r3, [r7, #19]
 800490c:	74bb      	strb	r3, [r7, #18]
 800490e:	e005      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004910:	40021000 	.word	0x40021000
 8004914:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004918:	7cfb      	ldrb	r3, [r7, #19]
 800491a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800491c:	7c7b      	ldrb	r3, [r7, #17]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d105      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004922:	4ba7      	ldr	r3, [pc, #668]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004926:	4aa6      	ldr	r2, [pc, #664]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800492c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800493a:	4ba1      	ldr	r3, [pc, #644]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004940:	f023 0203 	bic.w	r2, r3, #3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	499d      	ldr	r1, [pc, #628]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800495c:	4b98      	ldr	r3, [pc, #608]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004962:	f023 020c 	bic.w	r2, r3, #12
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	4995      	ldr	r1, [pc, #596]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0304 	and.w	r3, r3, #4
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800497e:	4b90      	ldr	r3, [pc, #576]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004984:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	498c      	ldr	r1, [pc, #560]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0308 	and.w	r3, r3, #8
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049a0:	4b87      	ldr	r3, [pc, #540]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	4984      	ldr	r1, [pc, #528]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0310 	and.w	r3, r3, #16
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049c2:	4b7f      	ldr	r3, [pc, #508]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	497b      	ldr	r1, [pc, #492]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0320 	and.w	r3, r3, #32
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049e4:	4b76      	ldr	r3, [pc, #472]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	4973      	ldr	r1, [pc, #460]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a06:	4b6e      	ldr	r3, [pc, #440]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	496a      	ldr	r1, [pc, #424]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a28:	4b65      	ldr	r3, [pc, #404]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	4962      	ldr	r1, [pc, #392]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a4a:	4b5d      	ldr	r3, [pc, #372]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	4959      	ldr	r1, [pc, #356]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a6c:	4b54      	ldr	r3, [pc, #336]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a72:	f023 0203 	bic.w	r2, r3, #3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7a:	4951      	ldr	r1, [pc, #324]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a8e:	4b4c      	ldr	r3, [pc, #304]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	4948      	ldr	r1, [pc, #288]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d015      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ab0:	4b43      	ldr	r3, [pc, #268]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abe:	4940      	ldr	r1, [pc, #256]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ace:	d105      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ad0:	4b3b      	ldr	r3, [pc, #236]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4a3a      	ldr	r2, [pc, #232]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ada:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d015      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ae8:	4b35      	ldr	r3, [pc, #212]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af6:	4932      	ldr	r1, [pc, #200]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b06:	d105      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b08:	4b2d      	ldr	r3, [pc, #180]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	4a2c      	ldr	r2, [pc, #176]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b12:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d015      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b20:	4b27      	ldr	r3, [pc, #156]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b26:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	4924      	ldr	r1, [pc, #144]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b3e:	d105      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b40:	4b1f      	ldr	r3, [pc, #124]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	4a1e      	ldr	r2, [pc, #120]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b4a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d015      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b58:	4b19      	ldr	r3, [pc, #100]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b66:	4916      	ldr	r1, [pc, #88]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b76:	d105      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b78:	4b11      	ldr	r3, [pc, #68]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	4a10      	ldr	r2, [pc, #64]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b82:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d019      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b90:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	4908      	ldr	r1, [pc, #32]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bae:	d109      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bb0:	4b03      	ldr	r3, [pc, #12]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	4a02      	ldr	r2, [pc, #8]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bba:	60d3      	str	r3, [r2, #12]
 8004bbc:	e002      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004bbe:	bf00      	nop
 8004bc0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d015      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004bd0:	4b29      	ldr	r3, [pc, #164]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bde:	4926      	ldr	r1, [pc, #152]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bee:	d105      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004bf0:	4b21      	ldr	r3, [pc, #132]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	4a20      	ldr	r2, [pc, #128]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bfa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d015      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004c08:	4b1b      	ldr	r3, [pc, #108]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c16:	4918      	ldr	r1, [pc, #96]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c26:	d105      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c28:	4b13      	ldr	r3, [pc, #76]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	4a12      	ldr	r2, [pc, #72]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c32:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d015      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c40:	4b0d      	ldr	r3, [pc, #52]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4e:	490a      	ldr	r1, [pc, #40]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c5e:	d105      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	4a04      	ldr	r2, [pc, #16]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c6a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004c6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000

08004c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e049      	b.n	8004d22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fc fda0 	bl	80017e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4610      	mov	r0, r2
 8004cbc:	f000 fe34 	bl	8005928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d001      	beq.n	8004d44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e04c      	b.n	8004dde <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a26      	ldr	r2, [pc, #152]	; (8004dec <HAL_TIM_Base_Start+0xc0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d022      	beq.n	8004d9c <HAL_TIM_Base_Start+0x70>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d5e:	d01d      	beq.n	8004d9c <HAL_TIM_Base_Start+0x70>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a22      	ldr	r2, [pc, #136]	; (8004df0 <HAL_TIM_Base_Start+0xc4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d018      	beq.n	8004d9c <HAL_TIM_Base_Start+0x70>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a21      	ldr	r2, [pc, #132]	; (8004df4 <HAL_TIM_Base_Start+0xc8>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d013      	beq.n	8004d9c <HAL_TIM_Base_Start+0x70>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a1f      	ldr	r2, [pc, #124]	; (8004df8 <HAL_TIM_Base_Start+0xcc>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d00e      	beq.n	8004d9c <HAL_TIM_Base_Start+0x70>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a1e      	ldr	r2, [pc, #120]	; (8004dfc <HAL_TIM_Base_Start+0xd0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d009      	beq.n	8004d9c <HAL_TIM_Base_Start+0x70>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a1c      	ldr	r2, [pc, #112]	; (8004e00 <HAL_TIM_Base_Start+0xd4>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d004      	beq.n	8004d9c <HAL_TIM_Base_Start+0x70>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a1b      	ldr	r2, [pc, #108]	; (8004e04 <HAL_TIM_Base_Start+0xd8>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d115      	bne.n	8004dc8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	4b19      	ldr	r3, [pc, #100]	; (8004e08 <HAL_TIM_Base_Start+0xdc>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b06      	cmp	r3, #6
 8004dac:	d015      	beq.n	8004dda <HAL_TIM_Base_Start+0xae>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db4:	d011      	beq.n	8004dda <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0201 	orr.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc6:	e008      	b.n	8004dda <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	e000      	b.n	8004ddc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40012c00 	.word	0x40012c00
 8004df0:	40000400 	.word	0x40000400
 8004df4:	40000800 	.word	0x40000800
 8004df8:	40000c00 	.word	0x40000c00
 8004dfc:	40013400 	.word	0x40013400
 8004e00:	40014000 	.word	0x40014000
 8004e04:	40015000 	.word	0x40015000
 8004e08:	00010007 	.word	0x00010007

08004e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d001      	beq.n	8004e24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e054      	b.n	8004ece <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a26      	ldr	r2, [pc, #152]	; (8004edc <HAL_TIM_Base_Start_IT+0xd0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d022      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x80>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4e:	d01d      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x80>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a22      	ldr	r2, [pc, #136]	; (8004ee0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d018      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x80>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a21      	ldr	r2, [pc, #132]	; (8004ee4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d013      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x80>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1f      	ldr	r2, [pc, #124]	; (8004ee8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00e      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x80>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1e      	ldr	r2, [pc, #120]	; (8004eec <HAL_TIM_Base_Start_IT+0xe0>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d009      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x80>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1c      	ldr	r2, [pc, #112]	; (8004ef0 <HAL_TIM_Base_Start_IT+0xe4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d004      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x80>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a1b      	ldr	r2, [pc, #108]	; (8004ef4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d115      	bne.n	8004eb8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	4b19      	ldr	r3, [pc, #100]	; (8004ef8 <HAL_TIM_Base_Start_IT+0xec>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2b06      	cmp	r3, #6
 8004e9c:	d015      	beq.n	8004eca <HAL_TIM_Base_Start_IT+0xbe>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea4:	d011      	beq.n	8004eca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f042 0201 	orr.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb6:	e008      	b.n	8004eca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	e000      	b.n	8004ecc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40012c00 	.word	0x40012c00
 8004ee0:	40000400 	.word	0x40000400
 8004ee4:	40000800 	.word	0x40000800
 8004ee8:	40000c00 	.word	0x40000c00
 8004eec:	40013400 	.word	0x40013400
 8004ef0:	40014000 	.word	0x40014000
 8004ef4:	40015000 	.word	0x40015000
 8004ef8:	00010007 	.word	0x00010007

08004efc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e049      	b.n	8004fa2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d106      	bne.n	8004f28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f841 	bl	8004faa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3304      	adds	r3, #4
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	f000 fcf4 	bl	8005928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
	...

08004fc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d109      	bne.n	8004fe4 <HAL_TIM_PWM_Start+0x24>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	bf14      	ite	ne
 8004fdc:	2301      	movne	r3, #1
 8004fde:	2300      	moveq	r3, #0
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	e03c      	b.n	800505e <HAL_TIM_PWM_Start+0x9e>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d109      	bne.n	8004ffe <HAL_TIM_PWM_Start+0x3e>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	bf14      	ite	ne
 8004ff6:	2301      	movne	r3, #1
 8004ff8:	2300      	moveq	r3, #0
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	e02f      	b.n	800505e <HAL_TIM_PWM_Start+0x9e>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b08      	cmp	r3, #8
 8005002:	d109      	bne.n	8005018 <HAL_TIM_PWM_Start+0x58>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b01      	cmp	r3, #1
 800500e:	bf14      	ite	ne
 8005010:	2301      	movne	r3, #1
 8005012:	2300      	moveq	r3, #0
 8005014:	b2db      	uxtb	r3, r3
 8005016:	e022      	b.n	800505e <HAL_TIM_PWM_Start+0x9e>
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	2b0c      	cmp	r3, #12
 800501c:	d109      	bne.n	8005032 <HAL_TIM_PWM_Start+0x72>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b01      	cmp	r3, #1
 8005028:	bf14      	ite	ne
 800502a:	2301      	movne	r3, #1
 800502c:	2300      	moveq	r3, #0
 800502e:	b2db      	uxtb	r3, r3
 8005030:	e015      	b.n	800505e <HAL_TIM_PWM_Start+0x9e>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b10      	cmp	r3, #16
 8005036:	d109      	bne.n	800504c <HAL_TIM_PWM_Start+0x8c>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b01      	cmp	r3, #1
 8005042:	bf14      	ite	ne
 8005044:	2301      	movne	r3, #1
 8005046:	2300      	moveq	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	e008      	b.n	800505e <HAL_TIM_PWM_Start+0x9e>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b01      	cmp	r3, #1
 8005056:	bf14      	ite	ne
 8005058:	2301      	movne	r3, #1
 800505a:	2300      	moveq	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e0a6      	b.n	80051b4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d104      	bne.n	8005076 <HAL_TIM_PWM_Start+0xb6>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005074:	e023      	b.n	80050be <HAL_TIM_PWM_Start+0xfe>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b04      	cmp	r3, #4
 800507a:	d104      	bne.n	8005086 <HAL_TIM_PWM_Start+0xc6>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005084:	e01b      	b.n	80050be <HAL_TIM_PWM_Start+0xfe>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b08      	cmp	r3, #8
 800508a:	d104      	bne.n	8005096 <HAL_TIM_PWM_Start+0xd6>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005094:	e013      	b.n	80050be <HAL_TIM_PWM_Start+0xfe>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b0c      	cmp	r3, #12
 800509a:	d104      	bne.n	80050a6 <HAL_TIM_PWM_Start+0xe6>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050a4:	e00b      	b.n	80050be <HAL_TIM_PWM_Start+0xfe>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b10      	cmp	r3, #16
 80050aa:	d104      	bne.n	80050b6 <HAL_TIM_PWM_Start+0xf6>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050b4:	e003      	b.n	80050be <HAL_TIM_PWM_Start+0xfe>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2202      	movs	r2, #2
 80050ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2201      	movs	r2, #1
 80050c4:	6839      	ldr	r1, [r7, #0]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f001 f8a8 	bl	800621c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a3a      	ldr	r2, [pc, #232]	; (80051bc <HAL_TIM_PWM_Start+0x1fc>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d018      	beq.n	8005108 <HAL_TIM_PWM_Start+0x148>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a39      	ldr	r2, [pc, #228]	; (80051c0 <HAL_TIM_PWM_Start+0x200>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d013      	beq.n	8005108 <HAL_TIM_PWM_Start+0x148>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a37      	ldr	r2, [pc, #220]	; (80051c4 <HAL_TIM_PWM_Start+0x204>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00e      	beq.n	8005108 <HAL_TIM_PWM_Start+0x148>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a36      	ldr	r2, [pc, #216]	; (80051c8 <HAL_TIM_PWM_Start+0x208>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d009      	beq.n	8005108 <HAL_TIM_PWM_Start+0x148>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a34      	ldr	r2, [pc, #208]	; (80051cc <HAL_TIM_PWM_Start+0x20c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d004      	beq.n	8005108 <HAL_TIM_PWM_Start+0x148>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a33      	ldr	r2, [pc, #204]	; (80051d0 <HAL_TIM_PWM_Start+0x210>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d101      	bne.n	800510c <HAL_TIM_PWM_Start+0x14c>
 8005108:	2301      	movs	r3, #1
 800510a:	e000      	b.n	800510e <HAL_TIM_PWM_Start+0x14e>
 800510c:	2300      	movs	r3, #0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005120:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a25      	ldr	r2, [pc, #148]	; (80051bc <HAL_TIM_PWM_Start+0x1fc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d022      	beq.n	8005172 <HAL_TIM_PWM_Start+0x1b2>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005134:	d01d      	beq.n	8005172 <HAL_TIM_PWM_Start+0x1b2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a26      	ldr	r2, [pc, #152]	; (80051d4 <HAL_TIM_PWM_Start+0x214>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d018      	beq.n	8005172 <HAL_TIM_PWM_Start+0x1b2>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a24      	ldr	r2, [pc, #144]	; (80051d8 <HAL_TIM_PWM_Start+0x218>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d013      	beq.n	8005172 <HAL_TIM_PWM_Start+0x1b2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a23      	ldr	r2, [pc, #140]	; (80051dc <HAL_TIM_PWM_Start+0x21c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00e      	beq.n	8005172 <HAL_TIM_PWM_Start+0x1b2>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a19      	ldr	r2, [pc, #100]	; (80051c0 <HAL_TIM_PWM_Start+0x200>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d009      	beq.n	8005172 <HAL_TIM_PWM_Start+0x1b2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a18      	ldr	r2, [pc, #96]	; (80051c4 <HAL_TIM_PWM_Start+0x204>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d004      	beq.n	8005172 <HAL_TIM_PWM_Start+0x1b2>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a18      	ldr	r2, [pc, #96]	; (80051d0 <HAL_TIM_PWM_Start+0x210>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d115      	bne.n	800519e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	4b19      	ldr	r3, [pc, #100]	; (80051e0 <HAL_TIM_PWM_Start+0x220>)
 800517a:	4013      	ands	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b06      	cmp	r3, #6
 8005182:	d015      	beq.n	80051b0 <HAL_TIM_PWM_Start+0x1f0>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800518a:	d011      	beq.n	80051b0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800519c:	e008      	b.n	80051b0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0201 	orr.w	r2, r2, #1
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	e000      	b.n	80051b2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40012c00 	.word	0x40012c00
 80051c0:	40013400 	.word	0x40013400
 80051c4:	40014000 	.word	0x40014000
 80051c8:	40014400 	.word	0x40014400
 80051cc:	40014800 	.word	0x40014800
 80051d0:	40015000 	.word	0x40015000
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40000800 	.word	0x40000800
 80051dc:	40000c00 	.word	0x40000c00
 80051e0:	00010007 	.word	0x00010007

080051e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d020      	beq.n	8005248 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d01b      	beq.n	8005248 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f06f 0202 	mvn.w	r2, #2
 8005218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fb5c 	bl	80058ec <HAL_TIM_IC_CaptureCallback>
 8005234:	e005      	b.n	8005242 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fb4e 	bl	80058d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fb5f 	bl	8005900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f003 0304 	and.w	r3, r3, #4
 800524e:	2b00      	cmp	r3, #0
 8005250:	d020      	beq.n	8005294 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01b      	beq.n	8005294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0204 	mvn.w	r2, #4
 8005264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2202      	movs	r2, #2
 800526a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fb36 	bl	80058ec <HAL_TIM_IC_CaptureCallback>
 8005280:	e005      	b.n	800528e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fb28 	bl	80058d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fb39 	bl	8005900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f003 0308 	and.w	r3, r3, #8
 800529a:	2b00      	cmp	r3, #0
 800529c:	d020      	beq.n	80052e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d01b      	beq.n	80052e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f06f 0208 	mvn.w	r2, #8
 80052b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2204      	movs	r2, #4
 80052b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fb10 	bl	80058ec <HAL_TIM_IC_CaptureCallback>
 80052cc:	e005      	b.n	80052da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fb02 	bl	80058d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fb13 	bl	8005900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d020      	beq.n	800532c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f003 0310 	and.w	r3, r3, #16
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d01b      	beq.n	800532c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f06f 0210 	mvn.w	r2, #16
 80052fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2208      	movs	r2, #8
 8005302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 faea 	bl	80058ec <HAL_TIM_IC_CaptureCallback>
 8005318:	e005      	b.n	8005326 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fadc 	bl	80058d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 faed 	bl	8005900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00c      	beq.n	8005350 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b00      	cmp	r3, #0
 800533e:	d007      	beq.n	8005350 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f06f 0201 	mvn.w	r2, #1
 8005348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7fc f916 	bl	800157c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005356:	2b00      	cmp	r3, #0
 8005358:	d104      	bne.n	8005364 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00c      	beq.n	800537e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536a:	2b00      	cmp	r3, #0
 800536c:	d007      	beq.n	800537e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f001 f815 	bl	80063a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00c      	beq.n	80053a2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538e:	2b00      	cmp	r3, #0
 8005390:	d007      	beq.n	80053a2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800539a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f001 f80d 	bl	80063bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00c      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d007      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 faa7 	bl	8005914 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00c      	beq.n	80053ea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d007      	beq.n	80053ea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f06f 0220 	mvn.w	r2, #32
 80053e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 ffd5 	bl	8006394 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00c      	beq.n	800540e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d007      	beq.n	800540e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 ffe1 	bl	80063d0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00c      	beq.n	8005432 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d007      	beq.n	8005432 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800542a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 ffd9 	bl	80063e4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00c      	beq.n	8005456 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800544e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 ffd1 	bl	80063f8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00c      	beq.n	800547a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d007      	beq.n	800547a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 ffc9 	bl	800640c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800547a:	bf00      	nop
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800549e:	2302      	movs	r3, #2
 80054a0:	e0ff      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b14      	cmp	r3, #20
 80054ae:	f200 80f0 	bhi.w	8005692 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80054b2:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	0800550d 	.word	0x0800550d
 80054bc:	08005693 	.word	0x08005693
 80054c0:	08005693 	.word	0x08005693
 80054c4:	08005693 	.word	0x08005693
 80054c8:	0800554d 	.word	0x0800554d
 80054cc:	08005693 	.word	0x08005693
 80054d0:	08005693 	.word	0x08005693
 80054d4:	08005693 	.word	0x08005693
 80054d8:	0800558f 	.word	0x0800558f
 80054dc:	08005693 	.word	0x08005693
 80054e0:	08005693 	.word	0x08005693
 80054e4:	08005693 	.word	0x08005693
 80054e8:	080055cf 	.word	0x080055cf
 80054ec:	08005693 	.word	0x08005693
 80054f0:	08005693 	.word	0x08005693
 80054f4:	08005693 	.word	0x08005693
 80054f8:	08005611 	.word	0x08005611
 80054fc:	08005693 	.word	0x08005693
 8005500:	08005693 	.word	0x08005693
 8005504:	08005693 	.word	0x08005693
 8005508:	08005651 	.word	0x08005651
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68b9      	ldr	r1, [r7, #8]
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fabc 	bl	8005a90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0208 	orr.w	r2, r2, #8
 8005526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699a      	ldr	r2, [r3, #24]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0204 	bic.w	r2, r2, #4
 8005536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6999      	ldr	r1, [r3, #24]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	619a      	str	r2, [r3, #24]
      break;
 800554a:	e0a5      	b.n	8005698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fb36 	bl	8005bc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699a      	ldr	r2, [r3, #24]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6999      	ldr	r1, [r3, #24]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	021a      	lsls	r2, r3, #8
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	619a      	str	r2, [r3, #24]
      break;
 800558c:	e084      	b.n	8005698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68b9      	ldr	r1, [r7, #8]
 8005594:	4618      	mov	r0, r3
 8005596:	f000 fba9 	bl	8005cec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69da      	ldr	r2, [r3, #28]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f042 0208 	orr.w	r2, r2, #8
 80055a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69da      	ldr	r2, [r3, #28]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0204 	bic.w	r2, r2, #4
 80055b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69d9      	ldr	r1, [r3, #28]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	61da      	str	r2, [r3, #28]
      break;
 80055cc:	e064      	b.n	8005698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68b9      	ldr	r1, [r7, #8]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fc1b 	bl	8005e10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69d9      	ldr	r1, [r3, #28]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	021a      	lsls	r2, r3, #8
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	61da      	str	r2, [r3, #28]
      break;
 800560e:	e043      	b.n	8005698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fc8e 	bl	8005f38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0208 	orr.w	r2, r2, #8
 800562a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0204 	bic.w	r2, r2, #4
 800563a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	691a      	ldr	r2, [r3, #16]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800564e:	e023      	b.n	8005698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68b9      	ldr	r1, [r7, #8]
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fcd8 	bl	800600c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800566a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800567a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	021a      	lsls	r2, r3, #8
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005690:	e002      	b.n	8005698 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	75fb      	strb	r3, [r7, #23]
      break;
 8005696:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop

080056ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d101      	bne.n	80056c8 <HAL_TIM_ConfigClockSource+0x1c>
 80056c4:	2302      	movs	r3, #2
 80056c6:	e0f6      	b.n	80058b6 <HAL_TIM_ConfigClockSource+0x20a>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80056e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a6f      	ldr	r2, [pc, #444]	; (80058c0 <HAL_TIM_ConfigClockSource+0x214>)
 8005702:	4293      	cmp	r3, r2
 8005704:	f000 80c1 	beq.w	800588a <HAL_TIM_ConfigClockSource+0x1de>
 8005708:	4a6d      	ldr	r2, [pc, #436]	; (80058c0 <HAL_TIM_ConfigClockSource+0x214>)
 800570a:	4293      	cmp	r3, r2
 800570c:	f200 80c6 	bhi.w	800589c <HAL_TIM_ConfigClockSource+0x1f0>
 8005710:	4a6c      	ldr	r2, [pc, #432]	; (80058c4 <HAL_TIM_ConfigClockSource+0x218>)
 8005712:	4293      	cmp	r3, r2
 8005714:	f000 80b9 	beq.w	800588a <HAL_TIM_ConfigClockSource+0x1de>
 8005718:	4a6a      	ldr	r2, [pc, #424]	; (80058c4 <HAL_TIM_ConfigClockSource+0x218>)
 800571a:	4293      	cmp	r3, r2
 800571c:	f200 80be 	bhi.w	800589c <HAL_TIM_ConfigClockSource+0x1f0>
 8005720:	4a69      	ldr	r2, [pc, #420]	; (80058c8 <HAL_TIM_ConfigClockSource+0x21c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	f000 80b1 	beq.w	800588a <HAL_TIM_ConfigClockSource+0x1de>
 8005728:	4a67      	ldr	r2, [pc, #412]	; (80058c8 <HAL_TIM_ConfigClockSource+0x21c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	f200 80b6 	bhi.w	800589c <HAL_TIM_ConfigClockSource+0x1f0>
 8005730:	4a66      	ldr	r2, [pc, #408]	; (80058cc <HAL_TIM_ConfigClockSource+0x220>)
 8005732:	4293      	cmp	r3, r2
 8005734:	f000 80a9 	beq.w	800588a <HAL_TIM_ConfigClockSource+0x1de>
 8005738:	4a64      	ldr	r2, [pc, #400]	; (80058cc <HAL_TIM_ConfigClockSource+0x220>)
 800573a:	4293      	cmp	r3, r2
 800573c:	f200 80ae 	bhi.w	800589c <HAL_TIM_ConfigClockSource+0x1f0>
 8005740:	4a63      	ldr	r2, [pc, #396]	; (80058d0 <HAL_TIM_ConfigClockSource+0x224>)
 8005742:	4293      	cmp	r3, r2
 8005744:	f000 80a1 	beq.w	800588a <HAL_TIM_ConfigClockSource+0x1de>
 8005748:	4a61      	ldr	r2, [pc, #388]	; (80058d0 <HAL_TIM_ConfigClockSource+0x224>)
 800574a:	4293      	cmp	r3, r2
 800574c:	f200 80a6 	bhi.w	800589c <HAL_TIM_ConfigClockSource+0x1f0>
 8005750:	4a60      	ldr	r2, [pc, #384]	; (80058d4 <HAL_TIM_ConfigClockSource+0x228>)
 8005752:	4293      	cmp	r3, r2
 8005754:	f000 8099 	beq.w	800588a <HAL_TIM_ConfigClockSource+0x1de>
 8005758:	4a5e      	ldr	r2, [pc, #376]	; (80058d4 <HAL_TIM_ConfigClockSource+0x228>)
 800575a:	4293      	cmp	r3, r2
 800575c:	f200 809e 	bhi.w	800589c <HAL_TIM_ConfigClockSource+0x1f0>
 8005760:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005764:	f000 8091 	beq.w	800588a <HAL_TIM_ConfigClockSource+0x1de>
 8005768:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800576c:	f200 8096 	bhi.w	800589c <HAL_TIM_ConfigClockSource+0x1f0>
 8005770:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005774:	f000 8089 	beq.w	800588a <HAL_TIM_ConfigClockSource+0x1de>
 8005778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800577c:	f200 808e 	bhi.w	800589c <HAL_TIM_ConfigClockSource+0x1f0>
 8005780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005784:	d03e      	beq.n	8005804 <HAL_TIM_ConfigClockSource+0x158>
 8005786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800578a:	f200 8087 	bhi.w	800589c <HAL_TIM_ConfigClockSource+0x1f0>
 800578e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005792:	f000 8086 	beq.w	80058a2 <HAL_TIM_ConfigClockSource+0x1f6>
 8005796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800579a:	d87f      	bhi.n	800589c <HAL_TIM_ConfigClockSource+0x1f0>
 800579c:	2b70      	cmp	r3, #112	; 0x70
 800579e:	d01a      	beq.n	80057d6 <HAL_TIM_ConfigClockSource+0x12a>
 80057a0:	2b70      	cmp	r3, #112	; 0x70
 80057a2:	d87b      	bhi.n	800589c <HAL_TIM_ConfigClockSource+0x1f0>
 80057a4:	2b60      	cmp	r3, #96	; 0x60
 80057a6:	d050      	beq.n	800584a <HAL_TIM_ConfigClockSource+0x19e>
 80057a8:	2b60      	cmp	r3, #96	; 0x60
 80057aa:	d877      	bhi.n	800589c <HAL_TIM_ConfigClockSource+0x1f0>
 80057ac:	2b50      	cmp	r3, #80	; 0x50
 80057ae:	d03c      	beq.n	800582a <HAL_TIM_ConfigClockSource+0x17e>
 80057b0:	2b50      	cmp	r3, #80	; 0x50
 80057b2:	d873      	bhi.n	800589c <HAL_TIM_ConfigClockSource+0x1f0>
 80057b4:	2b40      	cmp	r3, #64	; 0x40
 80057b6:	d058      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x1be>
 80057b8:	2b40      	cmp	r3, #64	; 0x40
 80057ba:	d86f      	bhi.n	800589c <HAL_TIM_ConfigClockSource+0x1f0>
 80057bc:	2b30      	cmp	r3, #48	; 0x30
 80057be:	d064      	beq.n	800588a <HAL_TIM_ConfigClockSource+0x1de>
 80057c0:	2b30      	cmp	r3, #48	; 0x30
 80057c2:	d86b      	bhi.n	800589c <HAL_TIM_ConfigClockSource+0x1f0>
 80057c4:	2b20      	cmp	r3, #32
 80057c6:	d060      	beq.n	800588a <HAL_TIM_ConfigClockSource+0x1de>
 80057c8:	2b20      	cmp	r3, #32
 80057ca:	d867      	bhi.n	800589c <HAL_TIM_ConfigClockSource+0x1f0>
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d05c      	beq.n	800588a <HAL_TIM_ConfigClockSource+0x1de>
 80057d0:	2b10      	cmp	r3, #16
 80057d2:	d05a      	beq.n	800588a <HAL_TIM_ConfigClockSource+0x1de>
 80057d4:	e062      	b.n	800589c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057e6:	f000 fcf9 	bl	80061dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	609a      	str	r2, [r3, #8]
      break;
 8005802:	e04f      	b.n	80058a4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005814:	f000 fce2 	bl	80061dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005826:	609a      	str	r2, [r3, #8]
      break;
 8005828:	e03c      	b.n	80058a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005836:	461a      	mov	r2, r3
 8005838:	f000 fc54 	bl	80060e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2150      	movs	r1, #80	; 0x50
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fcad 	bl	80061a2 <TIM_ITRx_SetConfig>
      break;
 8005848:	e02c      	b.n	80058a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005856:	461a      	mov	r2, r3
 8005858:	f000 fc73 	bl	8006142 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2160      	movs	r1, #96	; 0x60
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fc9d 	bl	80061a2 <TIM_ITRx_SetConfig>
      break;
 8005868:	e01c      	b.n	80058a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005876:	461a      	mov	r2, r3
 8005878:	f000 fc34 	bl	80060e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2140      	movs	r1, #64	; 0x40
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fc8d 	bl	80061a2 <TIM_ITRx_SetConfig>
      break;
 8005888:	e00c      	b.n	80058a4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4619      	mov	r1, r3
 8005894:	4610      	mov	r0, r2
 8005896:	f000 fc84 	bl	80061a2 <TIM_ITRx_SetConfig>
      break;
 800589a:	e003      	b.n	80058a4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
      break;
 80058a0:	e000      	b.n	80058a4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80058a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	00100070 	.word	0x00100070
 80058c4:	00100060 	.word	0x00100060
 80058c8:	00100050 	.word	0x00100050
 80058cc:	00100040 	.word	0x00100040
 80058d0:	00100030 	.word	0x00100030
 80058d4:	00100020 	.word	0x00100020

080058d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a4c      	ldr	r2, [pc, #304]	; (8005a6c <TIM_Base_SetConfig+0x144>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d017      	beq.n	8005970 <TIM_Base_SetConfig+0x48>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005946:	d013      	beq.n	8005970 <TIM_Base_SetConfig+0x48>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a49      	ldr	r2, [pc, #292]	; (8005a70 <TIM_Base_SetConfig+0x148>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d00f      	beq.n	8005970 <TIM_Base_SetConfig+0x48>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a48      	ldr	r2, [pc, #288]	; (8005a74 <TIM_Base_SetConfig+0x14c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d00b      	beq.n	8005970 <TIM_Base_SetConfig+0x48>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a47      	ldr	r2, [pc, #284]	; (8005a78 <TIM_Base_SetConfig+0x150>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d007      	beq.n	8005970 <TIM_Base_SetConfig+0x48>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a46      	ldr	r2, [pc, #280]	; (8005a7c <TIM_Base_SetConfig+0x154>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d003      	beq.n	8005970 <TIM_Base_SetConfig+0x48>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a45      	ldr	r2, [pc, #276]	; (8005a80 <TIM_Base_SetConfig+0x158>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d108      	bne.n	8005982 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a39      	ldr	r2, [pc, #228]	; (8005a6c <TIM_Base_SetConfig+0x144>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d023      	beq.n	80059d2 <TIM_Base_SetConfig+0xaa>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005990:	d01f      	beq.n	80059d2 <TIM_Base_SetConfig+0xaa>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a36      	ldr	r2, [pc, #216]	; (8005a70 <TIM_Base_SetConfig+0x148>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d01b      	beq.n	80059d2 <TIM_Base_SetConfig+0xaa>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a35      	ldr	r2, [pc, #212]	; (8005a74 <TIM_Base_SetConfig+0x14c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d017      	beq.n	80059d2 <TIM_Base_SetConfig+0xaa>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a34      	ldr	r2, [pc, #208]	; (8005a78 <TIM_Base_SetConfig+0x150>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d013      	beq.n	80059d2 <TIM_Base_SetConfig+0xaa>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a33      	ldr	r2, [pc, #204]	; (8005a7c <TIM_Base_SetConfig+0x154>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00f      	beq.n	80059d2 <TIM_Base_SetConfig+0xaa>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a33      	ldr	r2, [pc, #204]	; (8005a84 <TIM_Base_SetConfig+0x15c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d00b      	beq.n	80059d2 <TIM_Base_SetConfig+0xaa>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a32      	ldr	r2, [pc, #200]	; (8005a88 <TIM_Base_SetConfig+0x160>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d007      	beq.n	80059d2 <TIM_Base_SetConfig+0xaa>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a31      	ldr	r2, [pc, #196]	; (8005a8c <TIM_Base_SetConfig+0x164>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d003      	beq.n	80059d2 <TIM_Base_SetConfig+0xaa>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a2c      	ldr	r2, [pc, #176]	; (8005a80 <TIM_Base_SetConfig+0x158>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d108      	bne.n	80059e4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a18      	ldr	r2, [pc, #96]	; (8005a6c <TIM_Base_SetConfig+0x144>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d013      	beq.n	8005a38 <TIM_Base_SetConfig+0x110>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a1a      	ldr	r2, [pc, #104]	; (8005a7c <TIM_Base_SetConfig+0x154>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d00f      	beq.n	8005a38 <TIM_Base_SetConfig+0x110>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a1a      	ldr	r2, [pc, #104]	; (8005a84 <TIM_Base_SetConfig+0x15c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d00b      	beq.n	8005a38 <TIM_Base_SetConfig+0x110>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a19      	ldr	r2, [pc, #100]	; (8005a88 <TIM_Base_SetConfig+0x160>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d007      	beq.n	8005a38 <TIM_Base_SetConfig+0x110>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a18      	ldr	r2, [pc, #96]	; (8005a8c <TIM_Base_SetConfig+0x164>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d003      	beq.n	8005a38 <TIM_Base_SetConfig+0x110>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a13      	ldr	r2, [pc, #76]	; (8005a80 <TIM_Base_SetConfig+0x158>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d103      	bne.n	8005a40 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d105      	bne.n	8005a5e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f023 0201 	bic.w	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	611a      	str	r2, [r3, #16]
  }
}
 8005a5e:	bf00      	nop
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	40012c00 	.word	0x40012c00
 8005a70:	40000400 	.word	0x40000400
 8005a74:	40000800 	.word	0x40000800
 8005a78:	40000c00 	.word	0x40000c00
 8005a7c:	40013400 	.word	0x40013400
 8005a80:	40015000 	.word	0x40015000
 8005a84:	40014000 	.word	0x40014000
 8005a88:	40014400 	.word	0x40014400
 8005a8c:	40014800 	.word	0x40014800

08005a90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	f023 0201 	bic.w	r2, r3, #1
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0303 	bic.w	r3, r3, #3
 8005aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f023 0302 	bic.w	r3, r3, #2
 8005adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a30      	ldr	r2, [pc, #192]	; (8005bac <TIM_OC1_SetConfig+0x11c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d013      	beq.n	8005b18 <TIM_OC1_SetConfig+0x88>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a2f      	ldr	r2, [pc, #188]	; (8005bb0 <TIM_OC1_SetConfig+0x120>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d00f      	beq.n	8005b18 <TIM_OC1_SetConfig+0x88>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a2e      	ldr	r2, [pc, #184]	; (8005bb4 <TIM_OC1_SetConfig+0x124>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00b      	beq.n	8005b18 <TIM_OC1_SetConfig+0x88>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a2d      	ldr	r2, [pc, #180]	; (8005bb8 <TIM_OC1_SetConfig+0x128>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d007      	beq.n	8005b18 <TIM_OC1_SetConfig+0x88>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a2c      	ldr	r2, [pc, #176]	; (8005bbc <TIM_OC1_SetConfig+0x12c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d003      	beq.n	8005b18 <TIM_OC1_SetConfig+0x88>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a2b      	ldr	r2, [pc, #172]	; (8005bc0 <TIM_OC1_SetConfig+0x130>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d10c      	bne.n	8005b32 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f023 0308 	bic.w	r3, r3, #8
 8005b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f023 0304 	bic.w	r3, r3, #4
 8005b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a1d      	ldr	r2, [pc, #116]	; (8005bac <TIM_OC1_SetConfig+0x11c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d013      	beq.n	8005b62 <TIM_OC1_SetConfig+0xd2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a1c      	ldr	r2, [pc, #112]	; (8005bb0 <TIM_OC1_SetConfig+0x120>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d00f      	beq.n	8005b62 <TIM_OC1_SetConfig+0xd2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a1b      	ldr	r2, [pc, #108]	; (8005bb4 <TIM_OC1_SetConfig+0x124>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00b      	beq.n	8005b62 <TIM_OC1_SetConfig+0xd2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a1a      	ldr	r2, [pc, #104]	; (8005bb8 <TIM_OC1_SetConfig+0x128>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d007      	beq.n	8005b62 <TIM_OC1_SetConfig+0xd2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a19      	ldr	r2, [pc, #100]	; (8005bbc <TIM_OC1_SetConfig+0x12c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d003      	beq.n	8005b62 <TIM_OC1_SetConfig+0xd2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a18      	ldr	r2, [pc, #96]	; (8005bc0 <TIM_OC1_SetConfig+0x130>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d111      	bne.n	8005b86 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	621a      	str	r2, [r3, #32]
}
 8005ba0:	bf00      	nop
 8005ba2:	371c      	adds	r7, #28
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	40012c00 	.word	0x40012c00
 8005bb0:	40013400 	.word	0x40013400
 8005bb4:	40014000 	.word	0x40014000
 8005bb8:	40014400 	.word	0x40014400
 8005bbc:	40014800 	.word	0x40014800
 8005bc0:	40015000 	.word	0x40015000

08005bc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	f023 0210 	bic.w	r2, r3, #16
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	021b      	lsls	r3, r3, #8
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f023 0320 	bic.w	r3, r3, #32
 8005c12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	011b      	lsls	r3, r3, #4
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a2c      	ldr	r2, [pc, #176]	; (8005cd4 <TIM_OC2_SetConfig+0x110>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d007      	beq.n	8005c38 <TIM_OC2_SetConfig+0x74>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a2b      	ldr	r2, [pc, #172]	; (8005cd8 <TIM_OC2_SetConfig+0x114>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d003      	beq.n	8005c38 <TIM_OC2_SetConfig+0x74>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a2a      	ldr	r2, [pc, #168]	; (8005cdc <TIM_OC2_SetConfig+0x118>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d10d      	bne.n	8005c54 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	011b      	lsls	r3, r3, #4
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a1f      	ldr	r2, [pc, #124]	; (8005cd4 <TIM_OC2_SetConfig+0x110>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d013      	beq.n	8005c84 <TIM_OC2_SetConfig+0xc0>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a1e      	ldr	r2, [pc, #120]	; (8005cd8 <TIM_OC2_SetConfig+0x114>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d00f      	beq.n	8005c84 <TIM_OC2_SetConfig+0xc0>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a1e      	ldr	r2, [pc, #120]	; (8005ce0 <TIM_OC2_SetConfig+0x11c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00b      	beq.n	8005c84 <TIM_OC2_SetConfig+0xc0>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ce4 <TIM_OC2_SetConfig+0x120>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d007      	beq.n	8005c84 <TIM_OC2_SetConfig+0xc0>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a1c      	ldr	r2, [pc, #112]	; (8005ce8 <TIM_OC2_SetConfig+0x124>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d003      	beq.n	8005c84 <TIM_OC2_SetConfig+0xc0>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a17      	ldr	r2, [pc, #92]	; (8005cdc <TIM_OC2_SetConfig+0x118>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d113      	bne.n	8005cac <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	621a      	str	r2, [r3, #32]
}
 8005cc6:	bf00      	nop
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40012c00 	.word	0x40012c00
 8005cd8:	40013400 	.word	0x40013400
 8005cdc:	40015000 	.word	0x40015000
 8005ce0:	40014000 	.word	0x40014000
 8005ce4:	40014400 	.word	0x40014400
 8005ce8:	40014800 	.word	0x40014800

08005cec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f023 0303 	bic.w	r3, r3, #3
 8005d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	021b      	lsls	r3, r3, #8
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a2b      	ldr	r2, [pc, #172]	; (8005df8 <TIM_OC3_SetConfig+0x10c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d007      	beq.n	8005d5e <TIM_OC3_SetConfig+0x72>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a2a      	ldr	r2, [pc, #168]	; (8005dfc <TIM_OC3_SetConfig+0x110>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d003      	beq.n	8005d5e <TIM_OC3_SetConfig+0x72>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a29      	ldr	r2, [pc, #164]	; (8005e00 <TIM_OC3_SetConfig+0x114>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d10d      	bne.n	8005d7a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	021b      	lsls	r3, r3, #8
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a1e      	ldr	r2, [pc, #120]	; (8005df8 <TIM_OC3_SetConfig+0x10c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d013      	beq.n	8005daa <TIM_OC3_SetConfig+0xbe>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a1d      	ldr	r2, [pc, #116]	; (8005dfc <TIM_OC3_SetConfig+0x110>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00f      	beq.n	8005daa <TIM_OC3_SetConfig+0xbe>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a1d      	ldr	r2, [pc, #116]	; (8005e04 <TIM_OC3_SetConfig+0x118>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00b      	beq.n	8005daa <TIM_OC3_SetConfig+0xbe>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a1c      	ldr	r2, [pc, #112]	; (8005e08 <TIM_OC3_SetConfig+0x11c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d007      	beq.n	8005daa <TIM_OC3_SetConfig+0xbe>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a1b      	ldr	r2, [pc, #108]	; (8005e0c <TIM_OC3_SetConfig+0x120>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d003      	beq.n	8005daa <TIM_OC3_SetConfig+0xbe>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a16      	ldr	r2, [pc, #88]	; (8005e00 <TIM_OC3_SetConfig+0x114>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d113      	bne.n	8005dd2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	621a      	str	r2, [r3, #32]
}
 8005dec:	bf00      	nop
 8005dee:	371c      	adds	r7, #28
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	40012c00 	.word	0x40012c00
 8005dfc:	40013400 	.word	0x40013400
 8005e00:	40015000 	.word	0x40015000
 8005e04:	40014000 	.word	0x40014000
 8005e08:	40014400 	.word	0x40014400
 8005e0c:	40014800 	.word	0x40014800

08005e10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	021b      	lsls	r3, r3, #8
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	031b      	lsls	r3, r3, #12
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a2c      	ldr	r2, [pc, #176]	; (8005f20 <TIM_OC4_SetConfig+0x110>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d007      	beq.n	8005e84 <TIM_OC4_SetConfig+0x74>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a2b      	ldr	r2, [pc, #172]	; (8005f24 <TIM_OC4_SetConfig+0x114>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d003      	beq.n	8005e84 <TIM_OC4_SetConfig+0x74>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a2a      	ldr	r2, [pc, #168]	; (8005f28 <TIM_OC4_SetConfig+0x118>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d10d      	bne.n	8005ea0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	031b      	lsls	r3, r3, #12
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a1f      	ldr	r2, [pc, #124]	; (8005f20 <TIM_OC4_SetConfig+0x110>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d013      	beq.n	8005ed0 <TIM_OC4_SetConfig+0xc0>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a1e      	ldr	r2, [pc, #120]	; (8005f24 <TIM_OC4_SetConfig+0x114>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d00f      	beq.n	8005ed0 <TIM_OC4_SetConfig+0xc0>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a1e      	ldr	r2, [pc, #120]	; (8005f2c <TIM_OC4_SetConfig+0x11c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00b      	beq.n	8005ed0 <TIM_OC4_SetConfig+0xc0>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a1d      	ldr	r2, [pc, #116]	; (8005f30 <TIM_OC4_SetConfig+0x120>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d007      	beq.n	8005ed0 <TIM_OC4_SetConfig+0xc0>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a1c      	ldr	r2, [pc, #112]	; (8005f34 <TIM_OC4_SetConfig+0x124>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d003      	beq.n	8005ed0 <TIM_OC4_SetConfig+0xc0>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a17      	ldr	r2, [pc, #92]	; (8005f28 <TIM_OC4_SetConfig+0x118>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d113      	bne.n	8005ef8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ed6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ede:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	019b      	lsls	r3, r3, #6
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	019b      	lsls	r3, r3, #6
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	621a      	str	r2, [r3, #32]
}
 8005f12:	bf00      	nop
 8005f14:	371c      	adds	r7, #28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40012c00 	.word	0x40012c00
 8005f24:	40013400 	.word	0x40013400
 8005f28:	40015000 	.word	0x40015000
 8005f2c:	40014000 	.word	0x40014000
 8005f30:	40014400 	.word	0x40014400
 8005f34:	40014800 	.word	0x40014800

08005f38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	041b      	lsls	r3, r3, #16
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a19      	ldr	r2, [pc, #100]	; (8005ff4 <TIM_OC5_SetConfig+0xbc>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d013      	beq.n	8005fba <TIM_OC5_SetConfig+0x82>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a18      	ldr	r2, [pc, #96]	; (8005ff8 <TIM_OC5_SetConfig+0xc0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d00f      	beq.n	8005fba <TIM_OC5_SetConfig+0x82>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a17      	ldr	r2, [pc, #92]	; (8005ffc <TIM_OC5_SetConfig+0xc4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d00b      	beq.n	8005fba <TIM_OC5_SetConfig+0x82>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a16      	ldr	r2, [pc, #88]	; (8006000 <TIM_OC5_SetConfig+0xc8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d007      	beq.n	8005fba <TIM_OC5_SetConfig+0x82>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a15      	ldr	r2, [pc, #84]	; (8006004 <TIM_OC5_SetConfig+0xcc>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d003      	beq.n	8005fba <TIM_OC5_SetConfig+0x82>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a14      	ldr	r2, [pc, #80]	; (8006008 <TIM_OC5_SetConfig+0xd0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d109      	bne.n	8005fce <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	021b      	lsls	r3, r3, #8
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	621a      	str	r2, [r3, #32]
}
 8005fe8:	bf00      	nop
 8005fea:	371c      	adds	r7, #28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	40012c00 	.word	0x40012c00
 8005ff8:	40013400 	.word	0x40013400
 8005ffc:	40014000 	.word	0x40014000
 8006000:	40014400 	.word	0x40014400
 8006004:	40014800 	.word	0x40014800
 8006008:	40015000 	.word	0x40015000

0800600c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800600c:	b480      	push	{r7}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800603a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800603e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	021b      	lsls	r3, r3, #8
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	4313      	orrs	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	051b      	lsls	r3, r3, #20
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a1a      	ldr	r2, [pc, #104]	; (80060cc <TIM_OC6_SetConfig+0xc0>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d013      	beq.n	8006090 <TIM_OC6_SetConfig+0x84>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a19      	ldr	r2, [pc, #100]	; (80060d0 <TIM_OC6_SetConfig+0xc4>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d00f      	beq.n	8006090 <TIM_OC6_SetConfig+0x84>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a18      	ldr	r2, [pc, #96]	; (80060d4 <TIM_OC6_SetConfig+0xc8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d00b      	beq.n	8006090 <TIM_OC6_SetConfig+0x84>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a17      	ldr	r2, [pc, #92]	; (80060d8 <TIM_OC6_SetConfig+0xcc>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d007      	beq.n	8006090 <TIM_OC6_SetConfig+0x84>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a16      	ldr	r2, [pc, #88]	; (80060dc <TIM_OC6_SetConfig+0xd0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d003      	beq.n	8006090 <TIM_OC6_SetConfig+0x84>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a15      	ldr	r2, [pc, #84]	; (80060e0 <TIM_OC6_SetConfig+0xd4>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d109      	bne.n	80060a4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006096:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	029b      	lsls	r3, r3, #10
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	621a      	str	r2, [r3, #32]
}
 80060be:	bf00      	nop
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40012c00 	.word	0x40012c00
 80060d0:	40013400 	.word	0x40013400
 80060d4:	40014000 	.word	0x40014000
 80060d8:	40014400 	.word	0x40014400
 80060dc:	40014800 	.word	0x40014800
 80060e0:	40015000 	.word	0x40015000

080060e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	f023 0201 	bic.w	r2, r3, #1
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800610e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	4313      	orrs	r3, r2
 8006118:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f023 030a 	bic.w	r3, r3, #10
 8006120:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	4313      	orrs	r3, r2
 8006128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	621a      	str	r2, [r3, #32]
}
 8006136:	bf00      	nop
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006142:	b480      	push	{r7}
 8006144:	b087      	sub	sp, #28
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	f023 0210 	bic.w	r2, r3, #16
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800616c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	031b      	lsls	r3, r3, #12
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800617e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	011b      	lsls	r3, r3, #4
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	621a      	str	r2, [r3, #32]
}
 8006196:	bf00      	nop
 8006198:	371c      	adds	r7, #28
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b085      	sub	sp, #20
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80061b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f043 0307 	orr.w	r3, r3, #7
 80061c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	609a      	str	r2, [r3, #8]
}
 80061d0:	bf00      	nop
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
 80061e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	021a      	lsls	r2, r3, #8
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	431a      	orrs	r2, r3
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	4313      	orrs	r3, r2
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	4313      	orrs	r3, r2
 8006208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	609a      	str	r2, [r3, #8]
}
 8006210:	bf00      	nop
 8006212:	371c      	adds	r7, #28
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f003 031f 	and.w	r3, r3, #31
 800622e:	2201      	movs	r2, #1
 8006230:	fa02 f303 	lsl.w	r3, r2, r3
 8006234:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a1a      	ldr	r2, [r3, #32]
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	43db      	mvns	r3, r3
 800623e:	401a      	ands	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a1a      	ldr	r2, [r3, #32]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f003 031f 	and.w	r3, r3, #31
 800624e:	6879      	ldr	r1, [r7, #4]
 8006250:	fa01 f303 	lsl.w	r3, r1, r3
 8006254:	431a      	orrs	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	621a      	str	r2, [r3, #32]
}
 800625a:	bf00      	nop
 800625c:	371c      	adds	r7, #28
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
	...

08006268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006278:	2b01      	cmp	r3, #1
 800627a:	d101      	bne.n	8006280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800627c:	2302      	movs	r3, #2
 800627e:	e074      	b.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a34      	ldr	r2, [pc, #208]	; (8006378 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d009      	beq.n	80062be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a33      	ldr	r2, [pc, #204]	; (800637c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d004      	beq.n	80062be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a31      	ldr	r2, [pc, #196]	; (8006380 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d108      	bne.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80062d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a21      	ldr	r2, [pc, #132]	; (8006378 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d022      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006300:	d01d      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a1f      	ldr	r2, [pc, #124]	; (8006384 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d018      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a1d      	ldr	r2, [pc, #116]	; (8006388 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d013      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a1c      	ldr	r2, [pc, #112]	; (800638c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d00e      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a15      	ldr	r2, [pc, #84]	; (800637c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d009      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a18      	ldr	r2, [pc, #96]	; (8006390 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d004      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a11      	ldr	r2, [pc, #68]	; (8006380 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d10c      	bne.n	8006358 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	4313      	orrs	r3, r2
 800634e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	40012c00 	.word	0x40012c00
 800637c:	40013400 	.word	0x40013400
 8006380:	40015000 	.word	0x40015000
 8006384:	40000400 	.word	0x40000400
 8006388:	40000800 	.word	0x40000800
 800638c:	40000c00 	.word	0x40000c00
 8006390:	40014000 	.word	0x40014000

08006394 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e042      	b.n	80064b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006438:	2b00      	cmp	r3, #0
 800643a:	d106      	bne.n	800644a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7fb f977 	bl	8001738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2224      	movs	r2, #36	; 0x24
 800644e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 0201 	bic.w	r2, r2, #1
 8006460:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fb24 	bl	8006ab8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f825 	bl	80064c0 <UART_SetConfig>
 8006476:	4603      	mov	r3, r0
 8006478:	2b01      	cmp	r3, #1
 800647a:	d101      	bne.n	8006480 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e01b      	b.n	80064b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800648e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800649e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0201 	orr.w	r2, r2, #1
 80064ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fba3 	bl	8006bfc <UART_CheckIdleState>
 80064b6:	4603      	mov	r3, r0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064c4:	b08c      	sub	sp, #48	; 0x30
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	689a      	ldr	r2, [r3, #8]
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	431a      	orrs	r2, r3
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	431a      	orrs	r2, r3
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	4baa      	ldr	r3, [pc, #680]	; (8006798 <UART_SetConfig+0x2d8>)
 80064f0:	4013      	ands	r3, r2
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	6812      	ldr	r2, [r2, #0]
 80064f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064f8:	430b      	orrs	r3, r1
 80064fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	68da      	ldr	r2, [r3, #12]
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a9f      	ldr	r2, [pc, #636]	; (800679c <UART_SetConfig+0x2dc>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d004      	beq.n	800652c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006528:	4313      	orrs	r3, r2
 800652a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006536:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	6812      	ldr	r2, [r2, #0]
 800653e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006540:	430b      	orrs	r3, r1
 8006542:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654a:	f023 010f 	bic.w	r1, r3, #15
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a90      	ldr	r2, [pc, #576]	; (80067a0 <UART_SetConfig+0x2e0>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d125      	bne.n	80065b0 <UART_SetConfig+0xf0>
 8006564:	4b8f      	ldr	r3, [pc, #572]	; (80067a4 <UART_SetConfig+0x2e4>)
 8006566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800656a:	f003 0303 	and.w	r3, r3, #3
 800656e:	2b03      	cmp	r3, #3
 8006570:	d81a      	bhi.n	80065a8 <UART_SetConfig+0xe8>
 8006572:	a201      	add	r2, pc, #4	; (adr r2, 8006578 <UART_SetConfig+0xb8>)
 8006574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006578:	08006589 	.word	0x08006589
 800657c:	08006599 	.word	0x08006599
 8006580:	08006591 	.word	0x08006591
 8006584:	080065a1 	.word	0x080065a1
 8006588:	2301      	movs	r3, #1
 800658a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800658e:	e116      	b.n	80067be <UART_SetConfig+0x2fe>
 8006590:	2302      	movs	r3, #2
 8006592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006596:	e112      	b.n	80067be <UART_SetConfig+0x2fe>
 8006598:	2304      	movs	r3, #4
 800659a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800659e:	e10e      	b.n	80067be <UART_SetConfig+0x2fe>
 80065a0:	2308      	movs	r3, #8
 80065a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065a6:	e10a      	b.n	80067be <UART_SetConfig+0x2fe>
 80065a8:	2310      	movs	r3, #16
 80065aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ae:	e106      	b.n	80067be <UART_SetConfig+0x2fe>
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a7c      	ldr	r2, [pc, #496]	; (80067a8 <UART_SetConfig+0x2e8>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d138      	bne.n	800662c <UART_SetConfig+0x16c>
 80065ba:	4b7a      	ldr	r3, [pc, #488]	; (80067a4 <UART_SetConfig+0x2e4>)
 80065bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c0:	f003 030c 	and.w	r3, r3, #12
 80065c4:	2b0c      	cmp	r3, #12
 80065c6:	d82d      	bhi.n	8006624 <UART_SetConfig+0x164>
 80065c8:	a201      	add	r2, pc, #4	; (adr r2, 80065d0 <UART_SetConfig+0x110>)
 80065ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ce:	bf00      	nop
 80065d0:	08006605 	.word	0x08006605
 80065d4:	08006625 	.word	0x08006625
 80065d8:	08006625 	.word	0x08006625
 80065dc:	08006625 	.word	0x08006625
 80065e0:	08006615 	.word	0x08006615
 80065e4:	08006625 	.word	0x08006625
 80065e8:	08006625 	.word	0x08006625
 80065ec:	08006625 	.word	0x08006625
 80065f0:	0800660d 	.word	0x0800660d
 80065f4:	08006625 	.word	0x08006625
 80065f8:	08006625 	.word	0x08006625
 80065fc:	08006625 	.word	0x08006625
 8006600:	0800661d 	.word	0x0800661d
 8006604:	2300      	movs	r3, #0
 8006606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800660a:	e0d8      	b.n	80067be <UART_SetConfig+0x2fe>
 800660c:	2302      	movs	r3, #2
 800660e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006612:	e0d4      	b.n	80067be <UART_SetConfig+0x2fe>
 8006614:	2304      	movs	r3, #4
 8006616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800661a:	e0d0      	b.n	80067be <UART_SetConfig+0x2fe>
 800661c:	2308      	movs	r3, #8
 800661e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006622:	e0cc      	b.n	80067be <UART_SetConfig+0x2fe>
 8006624:	2310      	movs	r3, #16
 8006626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800662a:	e0c8      	b.n	80067be <UART_SetConfig+0x2fe>
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a5e      	ldr	r2, [pc, #376]	; (80067ac <UART_SetConfig+0x2ec>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d125      	bne.n	8006682 <UART_SetConfig+0x1c2>
 8006636:	4b5b      	ldr	r3, [pc, #364]	; (80067a4 <UART_SetConfig+0x2e4>)
 8006638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006640:	2b30      	cmp	r3, #48	; 0x30
 8006642:	d016      	beq.n	8006672 <UART_SetConfig+0x1b2>
 8006644:	2b30      	cmp	r3, #48	; 0x30
 8006646:	d818      	bhi.n	800667a <UART_SetConfig+0x1ba>
 8006648:	2b20      	cmp	r3, #32
 800664a:	d00a      	beq.n	8006662 <UART_SetConfig+0x1a2>
 800664c:	2b20      	cmp	r3, #32
 800664e:	d814      	bhi.n	800667a <UART_SetConfig+0x1ba>
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <UART_SetConfig+0x19a>
 8006654:	2b10      	cmp	r3, #16
 8006656:	d008      	beq.n	800666a <UART_SetConfig+0x1aa>
 8006658:	e00f      	b.n	800667a <UART_SetConfig+0x1ba>
 800665a:	2300      	movs	r3, #0
 800665c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006660:	e0ad      	b.n	80067be <UART_SetConfig+0x2fe>
 8006662:	2302      	movs	r3, #2
 8006664:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006668:	e0a9      	b.n	80067be <UART_SetConfig+0x2fe>
 800666a:	2304      	movs	r3, #4
 800666c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006670:	e0a5      	b.n	80067be <UART_SetConfig+0x2fe>
 8006672:	2308      	movs	r3, #8
 8006674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006678:	e0a1      	b.n	80067be <UART_SetConfig+0x2fe>
 800667a:	2310      	movs	r3, #16
 800667c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006680:	e09d      	b.n	80067be <UART_SetConfig+0x2fe>
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a4a      	ldr	r2, [pc, #296]	; (80067b0 <UART_SetConfig+0x2f0>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d125      	bne.n	80066d8 <UART_SetConfig+0x218>
 800668c:	4b45      	ldr	r3, [pc, #276]	; (80067a4 <UART_SetConfig+0x2e4>)
 800668e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006692:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006696:	2bc0      	cmp	r3, #192	; 0xc0
 8006698:	d016      	beq.n	80066c8 <UART_SetConfig+0x208>
 800669a:	2bc0      	cmp	r3, #192	; 0xc0
 800669c:	d818      	bhi.n	80066d0 <UART_SetConfig+0x210>
 800669e:	2b80      	cmp	r3, #128	; 0x80
 80066a0:	d00a      	beq.n	80066b8 <UART_SetConfig+0x1f8>
 80066a2:	2b80      	cmp	r3, #128	; 0x80
 80066a4:	d814      	bhi.n	80066d0 <UART_SetConfig+0x210>
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <UART_SetConfig+0x1f0>
 80066aa:	2b40      	cmp	r3, #64	; 0x40
 80066ac:	d008      	beq.n	80066c0 <UART_SetConfig+0x200>
 80066ae:	e00f      	b.n	80066d0 <UART_SetConfig+0x210>
 80066b0:	2300      	movs	r3, #0
 80066b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066b6:	e082      	b.n	80067be <UART_SetConfig+0x2fe>
 80066b8:	2302      	movs	r3, #2
 80066ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066be:	e07e      	b.n	80067be <UART_SetConfig+0x2fe>
 80066c0:	2304      	movs	r3, #4
 80066c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066c6:	e07a      	b.n	80067be <UART_SetConfig+0x2fe>
 80066c8:	2308      	movs	r3, #8
 80066ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ce:	e076      	b.n	80067be <UART_SetConfig+0x2fe>
 80066d0:	2310      	movs	r3, #16
 80066d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066d6:	e072      	b.n	80067be <UART_SetConfig+0x2fe>
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a35      	ldr	r2, [pc, #212]	; (80067b4 <UART_SetConfig+0x2f4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d12a      	bne.n	8006738 <UART_SetConfig+0x278>
 80066e2:	4b30      	ldr	r3, [pc, #192]	; (80067a4 <UART_SetConfig+0x2e4>)
 80066e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066f0:	d01a      	beq.n	8006728 <UART_SetConfig+0x268>
 80066f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066f6:	d81b      	bhi.n	8006730 <UART_SetConfig+0x270>
 80066f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066fc:	d00c      	beq.n	8006718 <UART_SetConfig+0x258>
 80066fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006702:	d815      	bhi.n	8006730 <UART_SetConfig+0x270>
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <UART_SetConfig+0x250>
 8006708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800670c:	d008      	beq.n	8006720 <UART_SetConfig+0x260>
 800670e:	e00f      	b.n	8006730 <UART_SetConfig+0x270>
 8006710:	2300      	movs	r3, #0
 8006712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006716:	e052      	b.n	80067be <UART_SetConfig+0x2fe>
 8006718:	2302      	movs	r3, #2
 800671a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800671e:	e04e      	b.n	80067be <UART_SetConfig+0x2fe>
 8006720:	2304      	movs	r3, #4
 8006722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006726:	e04a      	b.n	80067be <UART_SetConfig+0x2fe>
 8006728:	2308      	movs	r3, #8
 800672a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800672e:	e046      	b.n	80067be <UART_SetConfig+0x2fe>
 8006730:	2310      	movs	r3, #16
 8006732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006736:	e042      	b.n	80067be <UART_SetConfig+0x2fe>
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a17      	ldr	r2, [pc, #92]	; (800679c <UART_SetConfig+0x2dc>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d13a      	bne.n	80067b8 <UART_SetConfig+0x2f8>
 8006742:	4b18      	ldr	r3, [pc, #96]	; (80067a4 <UART_SetConfig+0x2e4>)
 8006744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006748:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800674c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006750:	d01a      	beq.n	8006788 <UART_SetConfig+0x2c8>
 8006752:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006756:	d81b      	bhi.n	8006790 <UART_SetConfig+0x2d0>
 8006758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800675c:	d00c      	beq.n	8006778 <UART_SetConfig+0x2b8>
 800675e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006762:	d815      	bhi.n	8006790 <UART_SetConfig+0x2d0>
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <UART_SetConfig+0x2b0>
 8006768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800676c:	d008      	beq.n	8006780 <UART_SetConfig+0x2c0>
 800676e:	e00f      	b.n	8006790 <UART_SetConfig+0x2d0>
 8006770:	2300      	movs	r3, #0
 8006772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006776:	e022      	b.n	80067be <UART_SetConfig+0x2fe>
 8006778:	2302      	movs	r3, #2
 800677a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800677e:	e01e      	b.n	80067be <UART_SetConfig+0x2fe>
 8006780:	2304      	movs	r3, #4
 8006782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006786:	e01a      	b.n	80067be <UART_SetConfig+0x2fe>
 8006788:	2308      	movs	r3, #8
 800678a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800678e:	e016      	b.n	80067be <UART_SetConfig+0x2fe>
 8006790:	2310      	movs	r3, #16
 8006792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006796:	e012      	b.n	80067be <UART_SetConfig+0x2fe>
 8006798:	cfff69f3 	.word	0xcfff69f3
 800679c:	40008000 	.word	0x40008000
 80067a0:	40013800 	.word	0x40013800
 80067a4:	40021000 	.word	0x40021000
 80067a8:	40004400 	.word	0x40004400
 80067ac:	40004800 	.word	0x40004800
 80067b0:	40004c00 	.word	0x40004c00
 80067b4:	40005000 	.word	0x40005000
 80067b8:	2310      	movs	r3, #16
 80067ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4aae      	ldr	r2, [pc, #696]	; (8006a7c <UART_SetConfig+0x5bc>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	f040 8097 	bne.w	80068f8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067ce:	2b08      	cmp	r3, #8
 80067d0:	d823      	bhi.n	800681a <UART_SetConfig+0x35a>
 80067d2:	a201      	add	r2, pc, #4	; (adr r2, 80067d8 <UART_SetConfig+0x318>)
 80067d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d8:	080067fd 	.word	0x080067fd
 80067dc:	0800681b 	.word	0x0800681b
 80067e0:	08006805 	.word	0x08006805
 80067e4:	0800681b 	.word	0x0800681b
 80067e8:	0800680b 	.word	0x0800680b
 80067ec:	0800681b 	.word	0x0800681b
 80067f0:	0800681b 	.word	0x0800681b
 80067f4:	0800681b 	.word	0x0800681b
 80067f8:	08006813 	.word	0x08006813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067fc:	f7fd ff7e 	bl	80046fc <HAL_RCC_GetPCLK1Freq>
 8006800:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006802:	e010      	b.n	8006826 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006804:	4b9e      	ldr	r3, [pc, #632]	; (8006a80 <UART_SetConfig+0x5c0>)
 8006806:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006808:	e00d      	b.n	8006826 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800680a:	f7fd ff09 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 800680e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006810:	e009      	b.n	8006826 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006816:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006818:	e005      	b.n	8006826 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800681a:	2300      	movs	r3, #0
 800681c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006824:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 8130 	beq.w	8006a8e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	4a94      	ldr	r2, [pc, #592]	; (8006a84 <UART_SetConfig+0x5c4>)
 8006834:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006838:	461a      	mov	r2, r3
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006840:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	4613      	mov	r3, r2
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	4413      	add	r3, r2
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	429a      	cmp	r2, r3
 8006850:	d305      	bcc.n	800685e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	429a      	cmp	r2, r3
 800685c:	d903      	bls.n	8006866 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006864:	e113      	b.n	8006a8e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	2200      	movs	r2, #0
 800686a:	60bb      	str	r3, [r7, #8]
 800686c:	60fa      	str	r2, [r7, #12]
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006872:	4a84      	ldr	r2, [pc, #528]	; (8006a84 <UART_SetConfig+0x5c4>)
 8006874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006878:	b29b      	uxth	r3, r3
 800687a:	2200      	movs	r2, #0
 800687c:	603b      	str	r3, [r7, #0]
 800687e:	607a      	str	r2, [r7, #4]
 8006880:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006884:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006888:	f7fa f854 	bl	8000934 <__aeabi_uldivmod>
 800688c:	4602      	mov	r2, r0
 800688e:	460b      	mov	r3, r1
 8006890:	4610      	mov	r0, r2
 8006892:	4619      	mov	r1, r3
 8006894:	f04f 0200 	mov.w	r2, #0
 8006898:	f04f 0300 	mov.w	r3, #0
 800689c:	020b      	lsls	r3, r1, #8
 800689e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80068a2:	0202      	lsls	r2, r0, #8
 80068a4:	6979      	ldr	r1, [r7, #20]
 80068a6:	6849      	ldr	r1, [r1, #4]
 80068a8:	0849      	lsrs	r1, r1, #1
 80068aa:	2000      	movs	r0, #0
 80068ac:	460c      	mov	r4, r1
 80068ae:	4605      	mov	r5, r0
 80068b0:	eb12 0804 	adds.w	r8, r2, r4
 80068b4:	eb43 0905 	adc.w	r9, r3, r5
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	469a      	mov	sl, r3
 80068c0:	4693      	mov	fp, r2
 80068c2:	4652      	mov	r2, sl
 80068c4:	465b      	mov	r3, fp
 80068c6:	4640      	mov	r0, r8
 80068c8:	4649      	mov	r1, r9
 80068ca:	f7fa f833 	bl	8000934 <__aeabi_uldivmod>
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	4613      	mov	r3, r2
 80068d4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068dc:	d308      	bcc.n	80068f0 <UART_SetConfig+0x430>
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068e4:	d204      	bcs.n	80068f0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6a3a      	ldr	r2, [r7, #32]
 80068ec:	60da      	str	r2, [r3, #12]
 80068ee:	e0ce      	b.n	8006a8e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80068f6:	e0ca      	b.n	8006a8e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006900:	d166      	bne.n	80069d0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006902:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006906:	2b08      	cmp	r3, #8
 8006908:	d827      	bhi.n	800695a <UART_SetConfig+0x49a>
 800690a:	a201      	add	r2, pc, #4	; (adr r2, 8006910 <UART_SetConfig+0x450>)
 800690c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006910:	08006935 	.word	0x08006935
 8006914:	0800693d 	.word	0x0800693d
 8006918:	08006945 	.word	0x08006945
 800691c:	0800695b 	.word	0x0800695b
 8006920:	0800694b 	.word	0x0800694b
 8006924:	0800695b 	.word	0x0800695b
 8006928:	0800695b 	.word	0x0800695b
 800692c:	0800695b 	.word	0x0800695b
 8006930:	08006953 	.word	0x08006953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006934:	f7fd fee2 	bl	80046fc <HAL_RCC_GetPCLK1Freq>
 8006938:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800693a:	e014      	b.n	8006966 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800693c:	f7fd fef4 	bl	8004728 <HAL_RCC_GetPCLK2Freq>
 8006940:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006942:	e010      	b.n	8006966 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006944:	4b4e      	ldr	r3, [pc, #312]	; (8006a80 <UART_SetConfig+0x5c0>)
 8006946:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006948:	e00d      	b.n	8006966 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800694a:	f7fd fe69 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 800694e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006950:	e009      	b.n	8006966 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006956:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006958:	e005      	b.n	8006966 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006964:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 8090 	beq.w	8006a8e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	4a44      	ldr	r2, [pc, #272]	; (8006a84 <UART_SetConfig+0x5c4>)
 8006974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006978:	461a      	mov	r2, r3
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006980:	005a      	lsls	r2, r3, #1
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	085b      	lsrs	r3, r3, #1
 8006988:	441a      	add	r2, r3
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006992:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	2b0f      	cmp	r3, #15
 8006998:	d916      	bls.n	80069c8 <UART_SetConfig+0x508>
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069a0:	d212      	bcs.n	80069c8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069a2:	6a3b      	ldr	r3, [r7, #32]
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	f023 030f 	bic.w	r3, r3, #15
 80069aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	085b      	lsrs	r3, r3, #1
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	f003 0307 	and.w	r3, r3, #7
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	8bfb      	ldrh	r3, [r7, #30]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	8bfa      	ldrh	r2, [r7, #30]
 80069c4:	60da      	str	r2, [r3, #12]
 80069c6:	e062      	b.n	8006a8e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80069ce:	e05e      	b.n	8006a8e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	d828      	bhi.n	8006a2a <UART_SetConfig+0x56a>
 80069d8:	a201      	add	r2, pc, #4	; (adr r2, 80069e0 <UART_SetConfig+0x520>)
 80069da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069de:	bf00      	nop
 80069e0:	08006a05 	.word	0x08006a05
 80069e4:	08006a0d 	.word	0x08006a0d
 80069e8:	08006a15 	.word	0x08006a15
 80069ec:	08006a2b 	.word	0x08006a2b
 80069f0:	08006a1b 	.word	0x08006a1b
 80069f4:	08006a2b 	.word	0x08006a2b
 80069f8:	08006a2b 	.word	0x08006a2b
 80069fc:	08006a2b 	.word	0x08006a2b
 8006a00:	08006a23 	.word	0x08006a23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a04:	f7fd fe7a 	bl	80046fc <HAL_RCC_GetPCLK1Freq>
 8006a08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a0a:	e014      	b.n	8006a36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a0c:	f7fd fe8c 	bl	8004728 <HAL_RCC_GetPCLK2Freq>
 8006a10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a12:	e010      	b.n	8006a36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a14:	4b1a      	ldr	r3, [pc, #104]	; (8006a80 <UART_SetConfig+0x5c0>)
 8006a16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a18:	e00d      	b.n	8006a36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a1a:	f7fd fe01 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 8006a1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a20:	e009      	b.n	8006a36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a28:	e005      	b.n	8006a36 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006a34:	bf00      	nop
    }

    if (pclk != 0U)
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d028      	beq.n	8006a8e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a40:	4a10      	ldr	r2, [pc, #64]	; (8006a84 <UART_SetConfig+0x5c4>)
 8006a42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a46:	461a      	mov	r2, r3
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	085b      	lsrs	r3, r3, #1
 8006a54:	441a      	add	r2, r3
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	2b0f      	cmp	r3, #15
 8006a64:	d910      	bls.n	8006a88 <UART_SetConfig+0x5c8>
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a6c:	d20c      	bcs.n	8006a88 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60da      	str	r2, [r3, #12]
 8006a78:	e009      	b.n	8006a8e <UART_SetConfig+0x5ce>
 8006a7a:	bf00      	nop
 8006a7c:	40008000 	.word	0x40008000
 8006a80:	00f42400 	.word	0x00f42400
 8006a84:	08007184 	.word	0x08007184
      }
      else
      {
        ret = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006aaa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3730      	adds	r7, #48	; 0x30
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006ab8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac4:	f003 0308 	and.w	r3, r3, #8
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00a      	beq.n	8006ae2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00a      	beq.n	8006b04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00a      	beq.n	8006b26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	430a      	orrs	r2, r1
 8006b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2a:	f003 0304 	and.w	r3, r3, #4
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00a      	beq.n	8006b48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	430a      	orrs	r2, r1
 8006b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4c:	f003 0310 	and.w	r3, r3, #16
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00a      	beq.n	8006b6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6e:	f003 0320 	and.w	r3, r3, #32
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00a      	beq.n	8006b8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d01a      	beq.n	8006bce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bb6:	d10a      	bne.n	8006bce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00a      	beq.n	8006bf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	430a      	orrs	r2, r1
 8006bee:	605a      	str	r2, [r3, #4]
  }
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b098      	sub	sp, #96	; 0x60
 8006c00:	af02      	add	r7, sp, #8
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c0c:	f7fa ff56 	bl	8001abc <HAL_GetTick>
 8006c10:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0308 	and.w	r3, r3, #8
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d12f      	bne.n	8006c80 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f88e 	bl	8006d50 <UART_WaitOnFlagUntilTimeout>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d022      	beq.n	8006c80 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c42:	e853 3f00 	ldrex	r3, [r3]
 8006c46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c4e:	653b      	str	r3, [r7, #80]	; 0x50
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	461a      	mov	r2, r3
 8006c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c58:	647b      	str	r3, [r7, #68]	; 0x44
 8006c5a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c60:	e841 2300 	strex	r3, r2, [r1]
 8006c64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1e6      	bne.n	8006c3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e063      	b.n	8006d48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0304 	and.w	r3, r3, #4
 8006c8a:	2b04      	cmp	r3, #4
 8006c8c:	d149      	bne.n	8006d22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c96:	2200      	movs	r2, #0
 8006c98:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f857 	bl	8006d50 <UART_WaitOnFlagUntilTimeout>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d03c      	beq.n	8006d22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb0:	e853 3f00 	ldrex	r3, [r3]
 8006cb4:	623b      	str	r3, [r7, #32]
   return(result);
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc6:	633b      	str	r3, [r7, #48]	; 0x30
 8006cc8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cce:	e841 2300 	strex	r3, r2, [r1]
 8006cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1e6      	bne.n	8006ca8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3308      	adds	r3, #8
 8006ce0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	e853 3f00 	ldrex	r3, [r3]
 8006ce8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f023 0301 	bic.w	r3, r3, #1
 8006cf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	3308      	adds	r3, #8
 8006cf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cfa:	61fa      	str	r2, [r7, #28]
 8006cfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfe:	69b9      	ldr	r1, [r7, #24]
 8006d00:	69fa      	ldr	r2, [r7, #28]
 8006d02:	e841 2300 	strex	r3, r2, [r1]
 8006d06:	617b      	str	r3, [r7, #20]
   return(result);
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e5      	bne.n	8006cda <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e012      	b.n	8006d48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2220      	movs	r2, #32
 8006d26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3758      	adds	r7, #88	; 0x58
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	603b      	str	r3, [r7, #0]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d60:	e04f      	b.n	8006e02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d68:	d04b      	beq.n	8006e02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d6a:	f7fa fea7 	bl	8001abc <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d302      	bcc.n	8006d80 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e04e      	b.n	8006e22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0304 	and.w	r3, r3, #4
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d037      	beq.n	8006e02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2b80      	cmp	r3, #128	; 0x80
 8006d96:	d034      	beq.n	8006e02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2b40      	cmp	r3, #64	; 0x40
 8006d9c:	d031      	beq.n	8006e02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	69db      	ldr	r3, [r3, #28]
 8006da4:	f003 0308 	and.w	r3, r3, #8
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d110      	bne.n	8006dce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2208      	movs	r2, #8
 8006db2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f000 f838 	bl	8006e2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2208      	movs	r2, #8
 8006dbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e029      	b.n	8006e22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ddc:	d111      	bne.n	8006e02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006de6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 f81e 	bl	8006e2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2220      	movs	r2, #32
 8006df2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e00f      	b.n	8006e22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	69da      	ldr	r2, [r3, #28]
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	bf0c      	ite	eq
 8006e12:	2301      	moveq	r3, #1
 8006e14:	2300      	movne	r3, #0
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	461a      	mov	r2, r3
 8006e1a:	79fb      	ldrb	r3, [r7, #7]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d0a0      	beq.n	8006d62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b095      	sub	sp, #84	; 0x54
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3a:	e853 3f00 	ldrex	r3, [r3]
 8006e3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e50:	643b      	str	r3, [r7, #64]	; 0x40
 8006e52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e58:	e841 2300 	strex	r3, r2, [r1]
 8006e5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1e6      	bne.n	8006e32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3308      	adds	r3, #8
 8006e6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	e853 3f00 	ldrex	r3, [r3]
 8006e72:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e7a:	f023 0301 	bic.w	r3, r3, #1
 8006e7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3308      	adds	r3, #8
 8006e86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e90:	e841 2300 	strex	r3, r2, [r1]
 8006e94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e3      	bne.n	8006e64 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d118      	bne.n	8006ed6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f023 0310 	bic.w	r3, r3, #16
 8006eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ec2:	61bb      	str	r3, [r7, #24]
 8006ec4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	6979      	ldr	r1, [r7, #20]
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	613b      	str	r3, [r7, #16]
   return(result);
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e6      	bne.n	8006ea4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006eea:	bf00      	nop
 8006eec:	3754      	adds	r7, #84	; 0x54
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b085      	sub	sp, #20
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d101      	bne.n	8006f0c <HAL_UARTEx_DisableFifoMode+0x16>
 8006f08:	2302      	movs	r3, #2
 8006f0a:	e027      	b.n	8006f5c <HAL_UARTEx_DisableFifoMode+0x66>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2224      	movs	r2, #36	; 0x24
 8006f18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0201 	bic.w	r2, r2, #1
 8006f32:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f3a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d101      	bne.n	8006f80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	e02d      	b.n	8006fdc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2224      	movs	r2, #36	; 0x24
 8006f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 0201 	bic.w	r2, r2, #1
 8006fa6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f84f 	bl	8007060 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d101      	bne.n	8006ffc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	e02d      	b.n	8007058 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2224      	movs	r2, #36	; 0x24
 8007008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0201 	bic.w	r2, r2, #1
 8007022:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f811 	bl	8007060 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2220      	movs	r2, #32
 800704a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800706c:	2b00      	cmp	r3, #0
 800706e:	d108      	bne.n	8007082 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007080:	e031      	b.n	80070e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007082:	2308      	movs	r3, #8
 8007084:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007086:	2308      	movs	r3, #8
 8007088:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	0e5b      	lsrs	r3, r3, #25
 8007092:	b2db      	uxtb	r3, r3
 8007094:	f003 0307 	and.w	r3, r3, #7
 8007098:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	0f5b      	lsrs	r3, r3, #29
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	f003 0307 	and.w	r3, r3, #7
 80070a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070aa:	7bbb      	ldrb	r3, [r7, #14]
 80070ac:	7b3a      	ldrb	r2, [r7, #12]
 80070ae:	4911      	ldr	r1, [pc, #68]	; (80070f4 <UARTEx_SetNbDataToProcess+0x94>)
 80070b0:	5c8a      	ldrb	r2, [r1, r2]
 80070b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80070b6:	7b3a      	ldrb	r2, [r7, #12]
 80070b8:	490f      	ldr	r1, [pc, #60]	; (80070f8 <UARTEx_SetNbDataToProcess+0x98>)
 80070ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
 80070ca:	7b7a      	ldrb	r2, [r7, #13]
 80070cc:	4909      	ldr	r1, [pc, #36]	; (80070f4 <UARTEx_SetNbDataToProcess+0x94>)
 80070ce:	5c8a      	ldrb	r2, [r1, r2]
 80070d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80070d4:	7b7a      	ldrb	r2, [r7, #13]
 80070d6:	4908      	ldr	r1, [pc, #32]	; (80070f8 <UARTEx_SetNbDataToProcess+0x98>)
 80070d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070da:	fb93 f3f2 	sdiv	r3, r3, r2
 80070de:	b29a      	uxth	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80070e6:	bf00      	nop
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	0800719c 	.word	0x0800719c
 80070f8:	080071a4 	.word	0x080071a4

080070fc <memset>:
 80070fc:	4402      	add	r2, r0
 80070fe:	4603      	mov	r3, r0
 8007100:	4293      	cmp	r3, r2
 8007102:	d100      	bne.n	8007106 <memset+0xa>
 8007104:	4770      	bx	lr
 8007106:	f803 1b01 	strb.w	r1, [r3], #1
 800710a:	e7f9      	b.n	8007100 <memset+0x4>

0800710c <__libc_init_array>:
 800710c:	b570      	push	{r4, r5, r6, lr}
 800710e:	4d0d      	ldr	r5, [pc, #52]	; (8007144 <__libc_init_array+0x38>)
 8007110:	4c0d      	ldr	r4, [pc, #52]	; (8007148 <__libc_init_array+0x3c>)
 8007112:	1b64      	subs	r4, r4, r5
 8007114:	10a4      	asrs	r4, r4, #2
 8007116:	2600      	movs	r6, #0
 8007118:	42a6      	cmp	r6, r4
 800711a:	d109      	bne.n	8007130 <__libc_init_array+0x24>
 800711c:	4d0b      	ldr	r5, [pc, #44]	; (800714c <__libc_init_array+0x40>)
 800711e:	4c0c      	ldr	r4, [pc, #48]	; (8007150 <__libc_init_array+0x44>)
 8007120:	f000 f818 	bl	8007154 <_init>
 8007124:	1b64      	subs	r4, r4, r5
 8007126:	10a4      	asrs	r4, r4, #2
 8007128:	2600      	movs	r6, #0
 800712a:	42a6      	cmp	r6, r4
 800712c:	d105      	bne.n	800713a <__libc_init_array+0x2e>
 800712e:	bd70      	pop	{r4, r5, r6, pc}
 8007130:	f855 3b04 	ldr.w	r3, [r5], #4
 8007134:	4798      	blx	r3
 8007136:	3601      	adds	r6, #1
 8007138:	e7ee      	b.n	8007118 <__libc_init_array+0xc>
 800713a:	f855 3b04 	ldr.w	r3, [r5], #4
 800713e:	4798      	blx	r3
 8007140:	3601      	adds	r6, #1
 8007142:	e7f2      	b.n	800712a <__libc_init_array+0x1e>
 8007144:	080071b4 	.word	0x080071b4
 8007148:	080071b4 	.word	0x080071b4
 800714c:	080071b4 	.word	0x080071b4
 8007150:	080071b8 	.word	0x080071b8

08007154 <_init>:
 8007154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007156:	bf00      	nop
 8007158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800715a:	bc08      	pop	{r3}
 800715c:	469e      	mov	lr, r3
 800715e:	4770      	bx	lr

08007160 <_fini>:
 8007160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007162:	bf00      	nop
 8007164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007166:	bc08      	pop	{r3}
 8007168:	469e      	mov	lr, r3
 800716a:	4770      	bx	lr
